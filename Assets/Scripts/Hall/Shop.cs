using System.Collections.Generic;using UnityEngine;using UnityEngine.EventSystems;using UnityEngine.UI;using USocket.Messages;public class Shop{    //商店类型    public enum SHOPTYPE    {        SHOPTYPE_NONE       = 0,        SHOPTYPE_COIN       = 1,           //金币商店        SHOPTYPE_DIAMOND    = 2,           //钻石商店        SHOPTYPE_EXCHANGE   = 3,           //兑换商店        SHOPTYPE_MAX,       }    //商店物品类型    public enum ITEMTYPE    {        ITEMTYPE_NONE           = 0,        ITEMTYPE_COIN           = 1,          //金币        ITEMTYPE_DIAMOND        = 2,          //钻石        ITEMTYPE_JINGDONG       = 3,          //京东购物卡        ITEMTYPE_MOBILE         = 4,          //手机充值卡        ITEMTYPE_NEWHANDGIFT    = 5,          //新手礼包        ITEMTYPE_BENEFITGIFT    = 6,          //特惠礼包        ITEMTYPE_GOODS          = 7,          //实物    }    //所需货币类型    public enum CURRENCYTYPE    {        CURRENCYTYPE_NONE   = 0,        CURRENCYTYPE_RMB    = 1,            //人民币        CURRENCYTYPE_DIAMOND= 2,            //钻石        CURRENCYTYPE_LOTTERY= 3,            //奖券        CURRENCYTYPE_GOODS  = 4,            //兑换实物-物品ID    }    //兑换界面类型    public enum EXCHANGEUITYPE    {        EXCHANGEUITYPE_NONE = 0,        EXCHANGEUITYPE_COIN = 1,             //兑换金币界面        EXCHANGEUITYPE_JINGDONG = 2,         //兑换京东卡界面        EXCHANGEUITYPE_MOBILE = 3,           //兑换手机充值卡界面        EXCHANGEUITYPE_RECORD =4,           //兑换记录界面    }    //兑换记录数据    private struct ExchangeRecordData    {       public string ExchangeOrderNo;     //兑换订单ID       public uint ExchangeItemId;      //兑换物品ID       public byte ExchangeOrderState;    //订单处理状态(0未处理，1已处理)       public  ExchangeRecordData(string orderNo,uint itemId,byte state)        {            ExchangeOrderNo = orderNo;            ExchangeItemId = itemId;            ExchangeOrderState = state;        }    }    //确认界面订单信息缓存    private struct OrderCacheData    {        public string PhoneNum;        public uint ItemId;        public string RecvName;        public string RecvAddress;        public void SetOrderCacheData(string phone,uint item,string name = null,string addr= null)        {            PhoneNum = phone;            ItemId = item;            RecvName = name;            RecvAddress = addr;        }    }    //商城主界面    private  GameObject ShopMainUI;    //金币商店界面    private  GameObject CoinShopUI;    //钻石商店界面    private  GameObject DiamondShopUI;    //兑换商店界面    private  GameObject ExchangeShopUI;    //金币商店物品perfab    private Object CoinItemPerfab;    //钻石商店物品perfab    private Object DiamondItemPerfab;    //兑换商店物品perfab    private Object ExchangeItemPerfab;       //购买结果提示界面    private GameObject BuyItemResultUI;    private Object BuyItemResultUIPerfab;    //支付平台选择界面    private GameObject PayPlatfromSelectUI;    private Object PayPlatfromSelectPerfab;    private Object PayPlatfromIconPerfab;    //各商店物品初始化标记    private bool[] ShopGoodsInitFlag;    //兑换记录数据初始化标记    private bool ExChangeRecordDataFlag;    //兑换记录prefab    private Object ExchangeRecordPrefab;    //兑换商店总开关(GM工具可设置显示与否)    public bool ExchangeShopOpenOnOff;    private List<ExchangeRecordData> RecordDataList;    OrderCacheData OrderConfirmCacheData;    public Shop(GameObject canvasuiObj)    {        RecordDataList = new List<ExchangeRecordData>();        OrderConfirmCacheData = new OrderCacheData();        ExchangeShopOpenOnOff = GameMain.hall_.GetPlayerData().ShopExchangeTurnOff;        ShopMainUI = null;        RegitserMsgHandle();    }    private void RegitserMsgHandle()    {        ////兑换记录数据        //CMsgDispatcher.GetInstance().RegMsgDictionary((uint)GameCity.EMSG_ENUM.CrazyCityMsg_BACKGETTRADEINFO        //    , HandleExchangeRecordDataMsg);        //商城兑换开关        CMsgDispatcher.GetInstance().RegMsgDictionary((uint)GameCity.EMSG_ENUM.CrazyCityMsg_SETLETTRORYCOVERT            , HandleExchangeTurnOnOff);    }    public void InitShopUI()    {        if (ShopMainUI != null)            return;        ShopGoodsInitFlag = new bool[(int)SHOPTYPE.SHOPTYPE_MAX];        for (int i = 0; i < (int)SHOPTYPE.SHOPTYPE_MAX; i++)            ShopGoodsInitFlag[i] = false;        ExChangeRecordDataFlag = false;        InitShopMainUI();        InitShopKindsUI();        InitShopUIBtnListenter();        InitShopPlayerMoneyText();        //初次打开默认显示金币界面        //ShowKindsShopUI(SHOPTYPE.SHOPTYPE_COIN);    }    public bool isShowActive()    {        if (ShopMainUI != null)            return ShopMainUI.activeSelf;        return false;    }    //初始商店主界面    private void InitShopMainUI()    {        if (ShopMainUI == null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);            if (bundle == null)                return;            Object obj0 = bundle.LoadAsset("Lobby_Shop_new") as Object;            ShopMainUI = GameMain.instantiate(obj0) as GameObject;            Transform CanvasUItf = GameObject.Find("Canvas/Root").transform;            ShopMainUI.transform.SetParent(CanvasUItf, false);            ShopMainUI.SetActive(false);            CoinItemPerfab = bundle.LoadAsset("Shop_goods_Coin") as Object;            DiamondItemPerfab = bundle.LoadAsset("Shop_Diamond") as Object;            ExchangeItemPerfab = bundle.LoadAsset("Shop_goods_Exchange") as Object;            BuyItemResultUIPerfab = bundle.LoadAsset("Tips_Buy") as Object;            PayPlatfromSelectPerfab = bundle.LoadAsset("Shop_Pay") as Object;            PayPlatfromIconPerfab = bundle.LoadAsset("Pay_Button") as Object;        }    }    //初始化商店子类商店界面    private void InitShopKindsUI()    {        if (ShopMainUI == null)            return;        //CoinShopUI = ShopMainUI.transform.FindChild("Bottom").FindChild("Shop_Coin").gameObject;        DiamondShopUI = ShopMainUI.transform.Find("Bottom").Find("Shop_Diamond").gameObject;        //ExchangeShopUI = ShopMainUI.transform.FindChild("Bottom").FindChild("Shop_Exchange").gameObject;        //InitCoinShopItem();        InitDiamondShopItem();        //InitExchangeShopItem();    }    //初始商店界面玩家金钱显示    private void InitShopPlayerMoneyText()    {        RefreshShopPlayerCoinText();        RefreshShopPlayerDiamondText();        RefreshShopPlayerLotteryText();        RefreshShopPlayerVipText();    }    //初始购买结果确认界面    private void InitBuyItemResultDialog()    {        if (BuyItemResultUI == null)            BuyItemResultUI = GameMain.instantiate(BuyItemResultUIPerfab) as GameObject;        GameObject canvasobj = GameObject.Find("Canvas/Root");        BuyItemResultUI.transform.SetParent(canvasobj.transform, false);        BuyItemResultUI.SetActive(false);    }    //初始化支付平台选择界面    private void InitPayPlatfromSelectUI()    {        if(PayPlatfromSelectUI == null)        {            PayPlatfromSelectUI = GameMain.instantiate(PayPlatfromSelectPerfab) as GameObject;        }        PayPlatfromSelectUI.transform.SetParent(ShopMainUI.transform, false);        Transform tf = PayPlatfromSelectUI.transform.Find("ImageBG").Find("Viewport_Pay").Find("Content_Pay");        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        GameObject closebtn = PayPlatfromSelectUI.transform.Find("ImageBG").Find("ButtonClose").gameObject;        XPointEvent.AutoAddListener(closebtn, ClickSelectPayPlatfromCloseBtn, null);        for (int i = 1; i <= (int)PayPlatform.AliPay; i++)        {            if (GameMain.hall_.GetPlayer().IsPayPlatfromHavaFlag(i))            {                GameObject platfromicon = GameMain.instantiate(PayPlatfromIconPerfab) as GameObject;                platfromicon.transform.SetParent(tf, false);                Image img = platfromicon.GetComponent<Image>();                Sprite spr = bundle.LoadAsset("Icon_Pay_0" + i.ToString()) as Sprite;                img.sprite = spr;                XPointEvent.AutoAddListener(platfromicon, ClickPayPlatfromIcon, i);            }        }        PayPlatfromSelectUI.SetActive(false);    }    //打开购买结果提示界面    public void OpenBuyResultDialogUI(string itemIcon,ITEMTYPE itemtype,uint itemNum,uint tipsId)    {        if (BuyItemResultUI == null)            InitBuyItemResultDialog();        BuyItemResultUI.transform.SetAsLastSibling();        Image ItemIcon =  BuyItemResultUI.transform.Find("ImageBG").Find("ImageIcon")            .gameObject.GetComponent<Image>();        //Animator runanima = BuyItemResultUI.transform.FindChild("ImageBG").FindChild("ImageBG_01")        //   .gameObject.GetComponent<Animator>();        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle != null)        {            Sprite iconsprite = bundle.LoadAsset<Sprite>(itemIcon) as Sprite;            ItemIcon.sprite = iconsprite;            //Object animator = bundle.LoadAsset("Animation_ImageBG_01") as Object;            //runanima.runtimeAnimatorController = (RuntimeAnimatorController)animator;            //runanima.Play("Tips_Buy");            //runanima.SetBool("Play",true);            //AnimationClip ac = runanima.runtimeAnimatorController.animationClips[0];            //runanima.Stop();            //Debug.Log("new Animation_ImageBG_01.......:" + ac.length );        }               Text ResultText = BuyItemResultUI.transform.Find("ImageBG").Find("GroupText").Find("TextTop")            .gameObject.GetComponent<Text>();        Text ResultInfoText = BuyItemResultUI.transform.Find("ImageBG").Find("TextInfo")            .gameObject.GetComponent<Text>();        string itemtypeStr = "";        switch (itemtype)        {            case ITEMTYPE.ITEMTYPE_COIN:                itemtypeStr = "金币";                break;            case ITEMTYPE.ITEMTYPE_DIAMOND:                itemtypeStr = "钻石";                break;            case ITEMTYPE.ITEMTYPE_JINGDONG:                itemtypeStr = "京东购物卡";                break;            case ITEMTYPE.ITEMTYPE_MOBILE:                itemtypeStr = "手机充值卡";                break;            default:                break;        }        ResultInfoText.text = itemNum + itemtypeStr;        TipsData tipsdata = CCsvDataManager.Instance.TipsDataMgr.GetTipsData(tipsId);        if(tipsdata != null)        {            ResultText.text = tipsdata.TipsText;        }        BuyItemResultUI.SetActive(true);    }    //关闭购买结果提示框    private void CloseBuyResultDialogUI(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if(eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            BuyItemResultUI.SetActive(false);        }    }    //打开支付平台选择界面    public void OpenPayPlatfromSelectUI(uint itemid)    {        if (PayPlatfromSelectUI == null)            InitPayPlatfromSelectUI();               GameMain.hall_.GetPlayer().SetPlayerBuyingItemId(itemid);        PayPlatfromSelectUI.SetActive(true);               }    //关闭支付平台选择界面    private void ClosePayPlatfromSelectUI(bool isPlayerCancle = false)    {        PayPlatfromSelectUI.SetActive(false);    }    //点击关闭支付平台选择按钮    private void ClickSelectPayPlatfromCloseBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ClosePayPlatfromSelectUI(true);        }    }    //点击支付平台ICON    private void ClickPayPlatfromIcon(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            PayPlatform plat = (PayPlatform)parma;#if VVPAY_H5            GameMain.hall_.GetPlayer().RequestBuyItem(GameMain.hall_.GetPlayer().GetPlayerBuyingItemId(), plat+2);#else            GameMain.hall_.GetPlayer().RequestBuyItem(GameMain.hall_.GetPlayer().GetPlayerBuyingItemId(), plat);#endif            ClosePayPlatfromSelectUI();        }    }    //刷新商城界面玩家货币数值    public void RefreshPlayerCurrency()    {        if (isShowActive() == false)            return;        RefreshShopPlayerCoinText();        RefreshShopPlayerDiamondText();        RefreshShopPlayerLotteryText();    }    //刷新金币显示    public  void RefreshShopPlayerCoinText()    {        //Transform playercoin = ShopMainUI.transform.FindChild("Top").FindChild("Image_coinframe");        ////更新金币文本        //Text playercoinTxt = playercoin.FindChild("Text_Coin").gameObject.GetComponent<Text>();        //playercoinTxt.text = GameMain.hall_.GetPlayerData().GetCoin().ToString();    }    //刷新钻石显示    public  void RefreshShopPlayerDiamondText()    {        //Transform playerdiamond = ShopMainUI.transform.FindChild("Top").FindChild("Image_DiamondFrame");        ////更新钻石文本        //Text playerdiamondTxt = playerdiamond.FindChild("Text_Diamond").gameObject.GetComponent<Text>();        //playerdiamondTxt.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();    }    //刷新奖券显示    public  void RefreshShopPlayerLotteryText()    {        //Transform playerticket = ShopMainUI.transform.FindChild("Top").FindChild("Image_TicketFrame");        ////更新奖券文本        //Text playerlotteryTxt = playerticket.FindChild("Text_Ticket").gameObject.GetComponent<Text>();        //playerlotteryTxt.text = GameMain.hall_.GetPlayerData().GetLottery().ToString();    }    //刷新vip数据显示    public void RefreshShopPlayerVipText()    {        //byte vip_lv = GameMain.hall_.GetPlayerData().GetVipLevel();        ////刷新兑换商城        //RefreshExchangeShopItem();        //if (ShopMainUI == null)        //    return;        //Transform playervip = ShopMainUI.transform.FindChild("Top").FindChild("Vip");        ////显示当前vip等级        //Image vip = playervip.transform.FindChild("Image_Vip").gameObject.GetComponent<Image>();        //GameObject vip_text1 = playervip.transform.FindChild("Image_Vip").FindChild("Vip_Text").FindChild("Num").gameObject;        //GameObject vip_text2 = playervip.transform.FindChild("Image_Vip").FindChild("Vip_Text").FindChild("Num (1)").gameObject;                //AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        //if (bundle != null)        //{        //    if (vip_lv.ToString().Length == 1)        //    {        //        if (vip_text2.activeSelf)        //        {        //            vip_text2.SetActive(false);        //        }        //        if (vip_lv == 0)        //        {        //            vip.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_hui");        //        }        //        else if (vip_lv > 0)        //        {        //            vip.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_jin");        //        }        //        vip_text1.GetComponent<Image>().sprite = bundle.LoadAsset<Sprite>("zjm_word_sz_vip_" + vip_lv);        //    }        //    else if (vip_lv.ToString().Length == 2)        //    {        //        if (vip.sprite.name != "zjm_word_vip_jin")        //        {        //            vip.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_jin");        //        }        //        if (!vip_text2.activeSelf)        //        {        //            vip_text2.SetActive(true);        //        }        //        vip_text1.GetComponent<Image>().sprite = bundle.LoadAsset<Sprite>("zjm_word_sz_vip_" + vip_lv.ToString().Substring(0, 1));        //        vip_text2.GetComponent<Image>().sprite = bundle.LoadAsset<Sprite>("zjm_word_sz_vip_" + vip_lv.ToString().Substring(1, 1));        //    }        //}        ////显示当前vip进度        //Image imageBar = playervip.FindChild("ImageBar").gameObject.GetComponent<Image>();        //VipData vipdata = CCsvDataManager.Instance.VipDataMgr.GetVipData((uint)vip_lv+1);        //if (vipdata == null)        //{        //    vipdata = CCsvDataManager.Instance.VipDataMgr.GetMaxVipData();        //    imageBar.fillAmount = 0;        //}        //else        //{        //    imageBar.fillAmount = GameMain.hall_.GetPlayerData().GetRechargeTotal() / float.Parse(vipdata.VipPrice);        //}        //Text vipText = playervip.FindChild("ImageBar").FindChild("TextNum").gameObject.GetComponent<Text>();        //vipText.text = GameMain.hall_.GetPlayerData().GetRechargeTotal() + "/" + vipdata.VipPrice;    }    //初始金币商店物品    private void InitCoinShopItem()    {        if (ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_COIN])            return;        if (CoinShopUI == null)            return;              List<uint> coinItemList = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemListByType(SHOPTYPE.SHOPTYPE_COIN);        if (coinItemList.Count == 0)            return;        Transform GoodsShelves = CoinShopUI.transform.Find("Content_Shop_Coin");        foreach (uint itemid in coinItemList)        {            ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(itemid);            if (itemdata == null)                continue;            GameObject obj = GameMain.instantiate(CoinItemPerfab) as GameObject;            obj.transform.SetParent(GoodsShelves,false);            //设置商品价格            Text price = obj.transform.Find("ButtonBuy").Find("Text_Price").gameObject.GetComponent<Text>();            price.text = itemdata.ItemPrice.ToString();            //设置获取商品基本数量            GameObject basenumObj = obj.transform.Find("ImageBG").Find("ImageText").Find("Text_baseMoneyNum").gameObject;            basenumObj.GetComponent<Text>().text = itemdata.ItemNum.ToString();            //设置获取商品总数量            Text TotalnumText = obj.transform.Find("ImageBG").Find("ImageText").Find("Text_TotalMoneyNum").gameObject.GetComponent<Text>();            TotalnumText.text = (itemdata.ItemNum + itemdata.PresentItemNum).ToString()+"金币";            //设置商品ICON            Image Iconimg = obj.transform.Find("ImageBG").Find("ImageIcon").gameObject.GetComponent<Image>();            AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);            if (bundle != null)            {                Sprite iconsprite = bundle.LoadAsset<Sprite>(itemdata.ItemIcon) as Sprite;                Iconimg.sprite = iconsprite;            }            //设置获取商品赠送百分比            GameObject ZengsongObj = obj.transform.Find("ImageBG").Find("ImageZengsong").gameObject;            int ratePercent = (int)(((float)itemdata.PresentItemNum / itemdata.ItemNum) * 100);            if (ratePercent == 0)            {                basenumObj.SetActive(false);                ZengsongObj.SetActive(false);            }            else            {                ZengsongObj.SetActive(true);                ZengsongObj.transform.Find("Text_GiveRate").gameObject.GetComponent<Text>().text = "+" + ratePercent.ToString() + "%";            }            //购买按钮点击事件            GameObject Buybtn = obj.transform.Find("ButtonBuy").gameObject;            XPointEvent.AutoAddListener(Buybtn, ClickBuyCoinBtn, itemdata.ItemID);        }        ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_COIN] = true;    }    //初始钻石商店物品    private void InitDiamondShopItem()    {        if (ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_DIAMOND])            return;        if (ShopMainUI == null)            return;        List<uint> diamondItemList = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemListByType(SHOPTYPE.SHOPTYPE_DIAMOND);        if (diamondItemList.Count == 0)            return;#if UNITY_IOS        //如果是IOS则需初始内购环境及商品 （审核版本）        if(Application.platform == RuntimePlatform.IPhonePlayer)        {            ApplePay.Instance.InitUnityPurchase(diamondItemList);        }#endif        Transform GoodsShelves = DiamondShopUI.transform.Find("Content_Shop_Diamond");        foreach (uint itemid in diamondItemList)        {            ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(itemid);            if (itemdata == null)                continue;            GameObject obj = GameMain.instantiate(DiamondItemPerfab) as GameObject;            obj.transform.SetParent(GoodsShelves,false);            //设置商品价格            Text price = obj.transform.Find("ButtonBuy").Find("Text_Price").gameObject.GetComponent<Text>();            price.text = "￥" + itemdata.ItemPrice.ToString();            //设置获取商品基本数量            GameObject basenumObj = obj.transform.Find("ImageBG").Find("ImageText").Find("TextNum_BaseDiamondNum").gameObject;            basenumObj.GetComponent<Text>().text = itemdata.ItemNum.ToString();            //设置获取商品总数量            Text TotalnumText = obj.transform.Find("ImageBG").Find("ImageText").Find("TextNum_TotalDiamonNum").gameObject.GetComponent<Text>();            TotalnumText.text = (itemdata.ItemNum + itemdata.PresentItemNum).ToString()+"钻石";            //设置商品ICON            Image Iconimg = obj.transform.Find("ImageBG").Find("ImageIcon").gameObject.GetComponent<Image>();            AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);            if(bundle != null)            {                Sprite iconsprite = bundle.LoadAsset<Sprite>(itemdata.ItemIcon) as Sprite;                Iconimg.sprite = iconsprite;            }            //设置获取商品赠送百分比            GameObject ZengsongObj = obj.transform.Find("ImageBG").Find("ImageZengsong").gameObject;            int ratePercent = (int)(((float)itemdata.PresentItemNum / itemdata.ItemNum) *100);            if (ratePercent == 0)            {                basenumObj.SetActive(false);                ZengsongObj.SetActive(false);            }            else            {                ZengsongObj.SetActive(true);                ZengsongObj.transform.Find("Text_GiveRate").gameObject.GetComponent<Text>().text = "+" + ratePercent.ToString() + "%";            }            //购买按钮点击事件            GameObject Buybtn = obj.transform.Find("ButtonBuy").gameObject;            XPointEvent.AutoAddListener(Buybtn,ClickBuyDiamondBtn, itemdata.ItemID);        }        ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_DIAMOND] = true;    }    //初始奖券兑换商店物品    private void InitExchangeShopItem()    {        if (ShopMainUI == null)            return;        List<uint> exchaneItemList = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemListByType(SHOPTYPE.SHOPTYPE_EXCHANGE);        if (exchaneItemList.Count == 0)            return;        byte playerLv = GameMain.hall_.GetPlayerData().GetVipLevel();        long playerlottery = GameMain.hall_.GetPlayerData().GetLottery();        Transform GoodsShelves = ExchangeShopUI.transform.Find("ImageViewport/Content_Shop_Exchange");        if (ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_EXCHANGE])        {            for (int i = 0; i < GoodsShelves.childCount; i++)            {                Object.Destroy(GoodsShelves.GetChild(i).gameObject);            }                   }        foreach (uint itemid in exchaneItemList)        {            ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(itemid);            if (itemdata == null)                continue;                       if(itemdata.ItemType == ITEMTYPE.ITEMTYPE_JINGDONG || itemdata.ItemType == ITEMTYPE.ITEMTYPE_MOBILE)            {                //特殊时间段内都显示(22:00 -8:00)                if(System.DateTime.Now.Hour >=8 && System.DateTime.Now.Hour < 22)                {                    //只有VIP2 且有奖券才显示实物兑换                    if (playerLv < 2 || playerlottery < 200)                        continue;                }                          }            GameObject obj = GameMain.instantiate(ExchangeItemPerfab) as GameObject;            obj.transform.SetParent(GoodsShelves,false);            //设置商品ICON            Image Iconimg = obj.transform.Find("ImageBG").Find("ImageIcon").gameObject.GetComponent<Image>();            AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);            if (bundle != null)            {                Sprite iconsprite = bundle.LoadAsset<Sprite>(itemdata.ItemIcon) as Sprite;                Iconimg.sprite = iconsprite;            }            //设置商品价格            Text price = obj.transform.Find("ButtonBuy").Find("Text_Price").gameObject.GetComponent<Text>();            price.text = itemdata.ItemPrice.ToString();            //设置兑换商品名称            Text nameText = obj.transform.Find("ImageBG").Find("Text_ItemName").gameObject.GetComponent<Text>();            nameText.text = itemdata.ItemName;            //购买按钮点击事件            GameObject Buybtn = obj.transform.Find("ButtonBuy").gameObject;            XPointEvent.AutoAddListener(Buybtn, ClickExchangeItemBtn, itemdata.ItemID);        }        //GameObject recordbtn = ExchangeShopUI.transform.FindChild("ButtonRecord").gameObject;        //XPointEvent.AutoAddListener(recordbtn, ClickExchangeRecordBtn, null);        ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_EXCHANGE] = true;    }    //刷新兑换商店物品    public void RefreshExchangeShopItem()    {        if (ShopMainUI == null)            return;              //更新兑换按钮显示状态        GameObject tgExchangeBtn = ShopMainUI.transform.Find("Bottom/ToggleGroup/Toggle_Exchange").gameObject;        if (Luancher.IsReviewVersion || ExchangeShopOpenOnOff == false)        {            tgExchangeBtn.SetActive(false);            return;        }        else            tgExchangeBtn.SetActive(true);        if (!ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_EXCHANGE])            return;        List<uint> exchaneItemList = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemListByType(SHOPTYPE.SHOPTYPE_EXCHANGE);        if (exchaneItemList.Count == 0)            return;                Transform GoodsShelves = ExchangeShopUI.transform.Find("ImageViewport/Content_Shop_Exchange");        for (int i = 0; i < GoodsShelves.childCount; i++)        {            Object.Destroy(GoodsShelves.GetChild(i).gameObject);        }                byte playervipLv = GameMain.hall_.GetPlayerData().GetVipLevel();        long playerlottery = GameMain.hall_.GetPlayerData().GetLottery();        foreach (uint itemid in exchaneItemList)        {            ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(itemid);            if (itemdata == null)                continue;            //实物兑换上架条件            if (itemdata.ItemType == ITEMTYPE.ITEMTYPE_JINGDONG || itemdata.ItemType == ITEMTYPE.ITEMTYPE_MOBILE)            {                //特殊时间段内都显示(22:00 -8:00)                if (System.DateTime.Now.Hour >= 8 && System.DateTime.Now.Hour < 22)                {                    //只有VIP2 且有奖券才显示实物兑换                    if (playervipLv < 2 || playerlottery < 200)                        continue;                }            }            GameObject obj = GameMain.instantiate(ExchangeItemPerfab) as GameObject;            obj.transform.SetParent(GoodsShelves, false);            //设置商品ICON            Image Iconimg = obj.transform.Find("ImageBG").Find("ImageIcon").gameObject.GetComponent<Image>();            AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);            if (bundle != null)            {                Sprite iconsprite = bundle.LoadAsset<Sprite>(itemdata.ItemIcon) as Sprite;                Iconimg.sprite = iconsprite;            }            //设置商品价格            Text price = obj.transform.Find("ButtonBuy").Find("Text_Price").gameObject.GetComponent<Text>();            price.text = itemdata.ItemPrice.ToString();            //设置兑换商品名称            Text nameText = obj.transform.Find("ImageBG").Find("Text_ItemName").gameObject.GetComponent<Text>();            nameText.text = itemdata.ItemName;            //购买按钮点击事件            GameObject Buybtn = obj.transform.Find("ButtonBuy").gameObject;            XPointEvent.AutoAddListener(Buybtn, ClickExchangeItemBtn, itemdata.ItemID);        }    }    //商店界面中各按钮鼠标按键事件注册    private void InitShopUIBtnListenter()    {        if (ShopMainUI == null)            return;        GameObject returnBtn = ShopMainUI.transform.Find("Top").Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn,ClickCloseShopBtn,null);        //GameObject tgCoinBtn = ShopMainUI.transform.FindChild("Bottom").FindChild("ToggleGroup").FindChild("Toggle_Coin").gameObject;        //XPointEvent.AutoAddListener(tgCoinBtn, ClickToggleCoinBtn, null);        GameObject tgDiamondBtn = ShopMainUI.transform.Find("Bottom").Find("Shop_Diamond").gameObject;        XPointEvent.AutoAddListener(tgDiamondBtn, ClickToggleDiamondBtn, null);        //GameObject tgExchangeBtn = ShopMainUI.transform.FindChild("Bottom").FindChild("ToggleGroup").FindChild("Toggle_Exchange").gameObject;        //XPointEvent.AutoAddListener(tgExchangeBtn, ClickToggleExchangeBtn, null);        GameObject recordbtn = ShopMainUI.transform.Find("Bottom").Find("ButtonRecord").gameObject;        XPointEvent.AutoAddListener(recordbtn, ClickExchangeRecordBtn, null);        //IOS审核版本 或者VIP等级小于1 不显示        //if(Luancher.IsReviewVersion)        //   tgExchangeBtn.SetActive(false);        //else        //    tgExchangeBtn.SetActive(true);    }    //打开或关闭商店主界面    public void OpenOrCloseShopMainUI(bool bTrunoff)    {        if(ShopMainUI == null )        {            InitShopUI();        }        ShopMainUI.SetActive(bTrunoff);        if (bTrunoff)        {            RefreshPlayerCurrency();            PutManiUI2Top();        }    }    //调整界面层级到最上层    void PutManiUI2Top()    {        if (ShopMainUI == null)            return;        GameObject CanvasObj = GameObject.Find("Canvas/Root");        ShopMainUI.transform.SetAsLastSibling();    }    //点击商店界面返回按钮    private void ClickCloseShopBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if(eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenOrCloseShopMainUI(false);        }    }    //点击金币商店按钮    private void ClickToggleCoinBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ShowKindsShopUI(SHOPTYPE.SHOPTYPE_COIN);        }    }    //点击钻石商店按钮    private void ClickToggleDiamondBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ShowKindsShopUI(SHOPTYPE.SHOPTYPE_DIAMOND);        }    }    //点击兑换商店按钮    private void ClickToggleExchangeBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ShowKindsShopUI(SHOPTYPE.SHOPTYPE_EXCHANGE);        }    }    public void ChangeToggle(SHOPTYPE shoptype)    {        //Toggle toggle_coin = ShopMainUI.transform.FindChild("Bottom").FindChild("ToggleGroup").FindChild("Toggle_Coin").gameObject.GetComponent<Toggle>();        //Toggle toggle_diamond = ShopMainUI.transform.FindChild("Bottom").FindChild("Shop_Diamond").gameObject.GetComponent<Toggle>();        //Toggle toggle_exchange = ShopMainUI.transform.FindChild("Bottom").FindChild("ToggleGroup").FindChild("Toggle_Exchange").gameObject.GetComponent<Toggle>();        switch (shoptype)        {            case SHOPTYPE.SHOPTYPE_COIN:                {                    //toggle_coin.isOn = true;                    //toggle_diamond.isOn = false;                    //toggle_exchange.isOn = false;                }                break;            case SHOPTYPE.SHOPTYPE_DIAMOND:                {                    //toggle_coin.isOn = false;                    //toggle_diamond.isOn = true;                    //toggle_exchange.isOn = false;                }                break;            case SHOPTYPE.SHOPTYPE_EXCHANGE:                {                    //toggle_coin.isOn = false;                    //toggle_diamond.isOn = false;                    //toggle_exchange.isOn = true;                }                break;        }    }    //切换各类商店界面    public void ShowKindsShopUI(SHOPTYPE shoptype)    {        switch(shoptype)        {            case SHOPTYPE.SHOPTYPE_COIN:                {                    if (ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_COIN] == false)                        InitCoinShopItem();                    //CoinShopUI.SetActive(true);                    DiamondShopUI.SetActive(false);                    //ExchangeShopUI.SetActive(false);                }                break;            case SHOPTYPE.SHOPTYPE_DIAMOND:                {                    if (ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_DIAMOND] == false)                        InitDiamondShopItem();                    //CoinShopUI.SetActive(false);                    DiamondShopUI.SetActive(true);                    //ExchangeShopUI.SetActive(false);                }                break;            case SHOPTYPE.SHOPTYPE_EXCHANGE:                {                    //if (ShopGoodsInitFlag[(int)SHOPTYPE.SHOPTYPE_EXCHANGE] == false)                    InitExchangeShopItem();                    //CoinShopUI.SetActive(false);                    DiamondShopUI.SetActive(false);                    //ExchangeShopUI.SetActive(true);                }                break;        }    }    //打开兑换物品京东卡界面    private void OpenExchangeJingDongUI(uint itemid)    {        //ShopItemdata jditem = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(itemid);        //if(jditem == null)        //   return;        //ShopMainUI.transform.FindChild("pop_up").gameObject.SetActive(true);        //ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka").gameObject.SetActive(true);        ////购物卡icon        //Image jdImage = ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka/Image").gameObject.GetComponent<Image>() ;        //AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        //if (bundle != null)        //{        //    Sprite iconsprite = bundle.LoadAsset<Sprite>(jditem.ItemIcon) as Sprite;        //    jdImage.sprite = iconsprite;        //}        ////所需奖券数量        //Text jdprice = ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka/ImageTextBG/TextNum").gameObject.GetComponent<Text>();        //jdprice.text = jditem.ItemPrice.ToString();        //GameObject closebtn = ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka/ButtonClose").gameObject;        //XPointEvent.AutoAddListener(closebtn, ClickCloseExchangeUIBtn, EXCHANGEUITYPE.EXCHANGEUITYPE_JINGDONG);        //GameObject okbtn = ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka/ButtonOK").gameObject;        //XPointEvent.AutoAddListener(okbtn, clickExchangeJDOKBtn, itemid);    }    //点击兑换京东确定按钮    private void clickExchangeJDOKBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ////姓名            //InputField name = ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka/InputName").gameObject.GetComponent<InputField>();            //if (string.IsNullOrEmpty(name.text))            //{            //    CRollTextUI.Instance.AddVerticalRollText(1111);            //    return;            //}            ////手机号码            //InputField mobilenum = ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka/InputPhoneNum").gameObject.GetComponent<InputField>();            //if (string.IsNullOrEmpty(mobilenum.text) || !GameCommon.CheckPhoneIsAble(mobilenum.text))            //{            //    CRollTextUI.Instance.AddVerticalRollText(1112);            //    return;            //}            ////收件地址            //InputField address = ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka/InputAdd").gameObject.GetComponent<InputField>();            //if (string.IsNullOrEmpty(address.text))            //{            //    CRollTextUI.Instance.AddVerticalRollText(1113);            //    return;            //}            //OrderConfirmCacheData.SetOrderCacheData(mobilenum.text, (uint)parma, name.text, address.text);            ////CloseExchangeUI(EXCHANGEUITYPE.EXCHANGEUITYPE_JINGDONG);            ////打开确认订单信息界面            //OpenOrderConfirmUI();            ////发送兑换消息            ////GameMain.hall_.GetPlayer().RequestBuyItem((uint)parma, mobilenum.text, name.text,address.text);        }    }    //打开兑换物品手机充值卡界面    private void OpenExchangeMobileUI(uint itemid)    {        //ShopItemdata mobileitem = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(itemid);        //if (mobileitem == null)        //    return;        //ShopMainUI.transform.FindChild("pop_up").gameObject.SetActive(true);        //ShopMainUI.transform.FindChild("pop_up/Exchange_Huafei").gameObject.SetActive(true);        ////话费icon        //Image mobileImage = ShopMainUI.transform.FindChild("pop_up/Exchange_Huafei/Image").gameObject.GetComponent<Image>();        //AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        //if (bundle != null)        //{        //    Sprite iconsprite = bundle.LoadAsset<Sprite>(mobileitem.ItemIcon) as Sprite;                   //    mobileImage.sprite = iconsprite;        //}        ////所需奖券数量        //Text mobileprice = ShopMainUI.transform.FindChild("pop_up/Exchange_Huafei/ImageTextBG/TextNum").gameObject.GetComponent<Text>();        //mobileprice.text = mobileitem.ItemPrice.ToString();        //GameObject closebtn = ShopMainUI.transform.FindChild("pop_up/Exchange_Huafei/ButtonClose").gameObject;        //XPointEvent.AutoAddListener(closebtn, ClickCloseExchangeUIBtn, EXCHANGEUITYPE.EXCHANGEUITYPE_MOBILE);        //GameObject okbtn = ShopMainUI.transform.FindChild("pop_up/Exchange_Huafei/ButtonOK").gameObject;        //XPointEvent.AutoAddListener(okbtn, clickExchangeMobileOKBtn, itemid);    }    //点击兑换手机充值确定按钮    private void clickExchangeMobileOKBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ////手机号码            //InputField mobilenum = ShopMainUI.transform.FindChild("pop_up/Exchange_Huafei/InputPhoneNum").gameObject.GetComponent<InputField>();            //if (string.IsNullOrEmpty(mobilenum.text) || !GameCommon.CheckPhoneIsAble(mobilenum.text))            //{            //    CRollTextUI.Instance.AddVerticalRollText(1112);            //    return;            //}            //OrderConfirmCacheData.SetOrderCacheData(mobilenum.text, (uint)parma);            ////打开确认订单信息界面            //OpenOrderConfirmUI();            ////发送兑换消息            ////GameMain.hall_.GetPlayer().RequestBuyItem((uint)parma, mobilenum.text);        }    }    //打开确认订单信息界面    private void OpenOrderConfirmUI()    {        //ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(OrderConfirmCacheData.ItemId);        //if (itemdata == null)        //    return;        //ShopMainUI.transform.FindChild("pop_up/Tips_Confirm").gameObject.SetActive(true);        //ShopMainUI.transform.FindChild("pop_up/Tips_Confirm/ImageBG/Imageline/Image_TicketFrame/TextNum")        //    .gameObject.GetComponent<Text>().text = itemdata.ItemPrice.ToString() ;        //ShopMainUI.transform.FindChild("pop_up/Tips_Confirm/ImageBG/Imageline/Image_goods/Textgoods")        //    .gameObject.GetComponent<Text>().text = itemdata.ItemName;        //string orderstring = "";        //if (string.IsNullOrEmpty(OrderConfirmCacheData.RecvName))        //{        //    orderstring = "充值手机号码:<color=#FFFF33FF>" + OrderConfirmCacheData.PhoneNum + "</color>";        //}        //else        //{        //    orderstring = "收件人:<color=#FFFF33FF>" + OrderConfirmCacheData.RecvName + "</color>\r\n手机号码:<color=#FFFF33FF>"         //        + OrderConfirmCacheData.PhoneNum + "</color>\r\n收件地址:<color=#FFFF33FF>" + OrderConfirmCacheData.RecvAddress + "</color>";        //}        //ShopMainUI.transform.FindChild("pop_up/Tips_Confirm/ImageBG/Textaddress")        //     .gameObject.GetComponent<Text>().text = orderstring;        //GameObject okbtn = ShopMainUI.transform.FindChild("pop_up/Tips_Confirm/ImageBG/ButtonOk").gameObject;        //GameObject cancelbtn = ShopMainUI.transform.FindChild("pop_up/Tips_Confirm/ImageBG/ButtonCancel").gameObject;        //XPointEvent.AutoAddListener(okbtn, ClickConfirmOrderBtn, 1);        //XPointEvent.AutoAddListener(cancelbtn, ClickConfirmOrderBtn, 0);    }    //点击订单确认界面按钮    private void ClickConfirmOrderBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ////确认            //if((int)parma == 1)            //{            //    if(string.IsNullOrEmpty(OrderConfirmCacheData.RecvName))            //        CloseExchangeUI(EXCHANGEUITYPE.EXCHANGEUITYPE_MOBILE);            //    else            //        CloseExchangeUI(EXCHANGEUITYPE.EXCHANGEUITYPE_JINGDONG);            //    GameMain.hall_.GetPlayer().RequestBuyItem(OrderConfirmCacheData.ItemId, OrderConfirmCacheData.PhoneNum            //            ,OrderConfirmCacheData.RecvName,OrderConfirmCacheData.RecvAddress);            //}            ////取消            //else            //{            //}            //ShopMainUI.transform.FindChild("pop_up/Tips_Confirm").gameObject.SetActive(false);        }    }    //点击兑换记录按钮    private void ClickExchangeRecordBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenExchangeRecordUI();        }    }    //打开兑换物品记录界面    private void OpenExchangeRecordUI()    {        if(ExChangeRecordDataFlag == false)        {            //清除记录            RecordDataList.Clear();            Transform prtf = ShopMainUI.transform.Find("pop_up/Exchange_Record/Viewport_Exchange_Record/Content_Exchange_Record");            for (int i = 0; i < prtf.childCount; i++)            {                Object.Destroy(prtf.GetChild(i).gameObject);            }            //请求兑换记录数据            UMessage recordMsg = new UMessage((uint)GameCity.EMSG_ENUM.CrazyCityMsg_PLAYERGETTRADEINFO);            recordMsg.Add(GameMain.hall_.GetPlayerId());            NetWorkClient.GetInstance().SendMsg(recordMsg);            CCustomDialog.OpenCustomWaitUI("正在查询...");        }        else        {            RefreshExchangeRecordDataUI();        }        ShopMainUI.transform.Find("pop_up").gameObject.SetActive(true);        ShopMainUI.transform.Find("pop_up/Exchange_Record").gameObject.SetActive(true);        GameObject closebtn = ShopMainUI.transform.Find("pop_up/Exchange_Record/ButtonClose").gameObject;        XPointEvent.AutoAddListener(closebtn, ClickCloseExchangeUIBtn, EXCHANGEUITYPE.EXCHANGEUITYPE_RECORD);    }    //点击关闭兑换功能界面按钮    private void ClickCloseExchangeUIBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            EXCHANGEUITYPE uitype = (EXCHANGEUITYPE)parma;            CloseExchangeUI(uitype);        }    }    //关闭兑换物品子界面    private void CloseExchangeUI(EXCHANGEUITYPE UIkind)    {        ShopMainUI.transform.Find("pop_up").gameObject.SetActive(false);        switch (UIkind)        {            case EXCHANGEUITYPE.EXCHANGEUITYPE_COIN:                break;            case EXCHANGEUITYPE.EXCHANGEUITYPE_JINGDONG:                {                    //ShopMainUI.transform.FindChild("pop_up/Exchange_Gouwuka").gameObject.SetActive(false);                }                break;            case EXCHANGEUITYPE.EXCHANGEUITYPE_MOBILE:                {                    //ShopMainUI.transform.FindChild("pop_up/Exchange_Huafei").gameObject.SetActive(false);                }                break;            case EXCHANGEUITYPE.EXCHANGEUITYPE_RECORD:                {                    ShopMainUI.transform.Find("pop_up/Exchange_Record").gameObject.SetActive(false);                }                break;        }    }    //点击购买金币按钮    private void ClickBuyCoinBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            //ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData((uint)parma);            //if (itemdata == null)            //    return;            GameMain.hall_.GetPlayer().RequestBuyItem((uint)parma);//             if (Application.platform == RuntimePlatform.IPhonePlayer)//             {//                 ApplePay.Instance.BuyItem(itemdata.IOSProductName);//             }        }    }    //点击购买钻石按钮    private void ClickBuyDiamondBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);#if !UNITY_EDITOR            //当前账号绑定才能进行充值(审核版本不做绑定检查)//             if(!Luancher.IsReviewVersion && GameMain.hall_.GetPlayerData().nBindMobileNum == 0)//             {//                 CCustomDialog.OpenCustomDialogWithTipsID(1108, PromptBindMobileCallBack);//                 return;//             }#endif#if UNITY_EDITOR|| WINDOWS_GUEST            GameMain.hall_.GetPlayer().RequestBuyItem((uint)parma);#else#if UKGAME_SDK            if(Luancher.IsReviewVersion)            {               GameMain.hall_.GetPlayer().RequestBuyItem((uint)parma,PayPlatform.Apple);            }            else            {                ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData((uint)parma);                if (itemdata == null)                    return;                string playeritemId = string.Format("{0}|{1}", GameMain.hall_.GetPlayerData().GetPlayerID(), itemdata.ItemID);                CUKGameSDK.UKPlatform_Pay(itemdata.ItemPrice.ToString(), itemdata.ItemName, playeritemId, itemdata.ItemID.ToString());                           }         #else            //如果只允许行apple支付            if(GameMain.hall_.GetPlayer().IsOnlyApplePay())                 GameMain.hall_.GetPlayer().RequestBuyItem((uint)parma,PayPlatform.Apple);            else            {                //OpenPayPlatfromSelectUI((uint)parma);              GameMain.hall_.GetPlayer().RequestBuyItem((uint)parma, PayPlatform.Wechat);            }#endif#endif        }    }    //提示绑定手机账号回调处理    private void PromptBindMobileCallBack(object parma)    {        int selectState = (int)parma;        if(selectState == 1)        {            //去绑定界面            PlayerInfoUI.Instance.OpenOrClosePlayerInfoUI(true);            PlayerInfoUI.Instance.OpenOrCloseBindPhoneUI(true);        }    }    //点击兑换物品按钮    private void ClickExchangeItemBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            //GameMain.hall_.GetPlayer().RequestBuyItem((uint)parma);            uint itemid = (uint)parma;            ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(itemid);            if (itemdata == null)                return;            if (GameMain.hall_.GetPlayerData().GetLottery() < itemdata.ItemPrice)            {                CCustomDialog.OpenCustomConfirmUI(1103);                return;            }            switch(itemdata.ItemType)            {                case ITEMTYPE.ITEMTYPE_COIN:                    {                        GameMain.hall_.GetPlayer().RequestBuyItem(itemid);                    }                    break;                case ITEMTYPE.ITEMTYPE_JINGDONG:                    {                        OpenExchangeJingDongUI(itemid);                    }                    break;                case ITEMTYPE.ITEMTYPE_MOBILE:                    {                        OpenExchangeMobileUI(itemid);                    }                    break;            }        }    }    //添加兑换记录    public void AddExchangeRecordData(string orderid,uint itemId,byte orderstate,bool addlist = true)    {        ShopItemdata itemdata = CCsvDataManager.Instance.ShopItemDataMgr.GetShopItemData(itemId);        if (itemdata == null)            return;        if (ExchangeRecordPrefab == null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);            if (bundle == null)                return;            ExchangeRecordPrefab = bundle.LoadAsset<Object>("Shop_pop_up_Record") as Object;        }        if(addlist)        {            ExchangeRecordData redata = new ExchangeRecordData(orderid, itemId, orderstate);            RecordDataList.Add(redata);        }        GameObject recordobj = GameMain.instantiate(ExchangeRecordPrefab) as GameObject;        Transform prtf = ShopMainUI.transform.Find("pop_up/Exchange_Record/Viewport_Exchange_Record/Content_Exchange_Record");        recordobj.transform.SetParent(prtf, false);        recordobj.transform.Find("TextRiqi").gameObject.GetComponent<Text>().text = orderid;        recordobj.transform.Find("TextJiangpin").gameObject.GetComponent<Text>().text = itemdata.ItemName;        string statetxt = "<color=#FFFF00FF>等待处理</color>";        if (orderstate == 1)            statetxt = "<color=#00FF00FF>已处理</color>";        recordobj.transform.Find("TextZhuangtai").gameObject.GetComponent<Text>().text = statetxt;    }    //刷新兑换记录界面    private void RefreshExchangeRecordDataUI()    {        Transform prtf = ShopMainUI.transform.Find("pop_up/Exchange_Record/Viewport_Exchange_Record/Content_Exchange_Record");        if (prtf.childCount > 0 || RecordDataList.Count == 0)            return;        for(int i =0; i< RecordDataList.Count; i++)        {            ExchangeRecordData redata = RecordDataList[i];            AddExchangeRecordData(redata.ExchangeOrderNo,redata.ExchangeItemId,redata.ExchangeOrderState,false);        }    }    //处理兑换记录数据消息    private bool HandleExchangeRecordDataMsg(uint msgType, UMessage umsg)    {        CCustomDialog.CloseCustomWaitUI();        uint playerid = umsg.ReadUInt();        int recordcount = umsg.ReadInt();        ExChangeRecordDataFlag = true;        for (int i=0; i< recordcount; i++)        {            string orderid = umsg.ReadString();            byte orderstate = umsg.ReadByte();            uint itemid = umsg.ReadUInt();            AddExchangeRecordData(orderid,itemid,orderstate);        }                return true;    }    //处理商城兑换开关消息    private bool HandleExchangeTurnOnOff(uint msgType, UMessage umsg)    {                bool turnoff = umsg.ReadBool();        if (ExchangeShopOpenOnOff != turnoff)        {            ExchangeShopOpenOnOff = turnoff;            RefreshExchangeShopItem();            if (!ExchangeShopOpenOnOff && isShowActive())                ShowKindsShopUI(SHOPTYPE.SHOPTYPE_DIAMOND);        }        return true;    }}