using System.Collections.Generic;using UnityEngine;using USocket.Messages;using UnityEngine.EventSystems;using UnityEngine.UI;using System.Linq;public class FriendsMoments{    GameObject root_;    GameObject main_;    GameObject CanvasObj;    Vector3 speedforward_;    bool isopenset;    GameObject numberpanel_;    Dictionary<uint, GameObject> tableobjects_;    Dictionary<uint, GameObject> memberobjects_;    Dictionary<uint, GameObject> joinobjects_;    GameObject playerlistpanel_;    GameObject friendroomrulepanel_;    int currentPickGame_;    LandLordRule llr_;    ThrowEggsRule ter_;    MahjongRule mjr_;    GameObject waitingTips_;    byte currentNeedUpdateGameID;    byte playtimesindex_;    bool isUpdateJoin_;    GameObject buyfriendspanel_;    List<AppointmentRecord> recordlist_;    List<GameObject> recorditems_;    bool isrecord_;    GameObject recordpanel_;    Dictionary<uint, MomentsMember> otherplayers;    public FriendsMoments()    {        if (GameMain.hall_.GetPlayerData().momentsid == 0)            LoadFriendsResource();        else            LoadMainResource();        InitFriendsMsg();        GameMain.hall_.InitRoomsData();        speedforward_ = new Vector3(0, 1, 0);        isopenset = false;        tableobjects_ = new Dictionary<uint, GameObject>();        memberobjects_ = new Dictionary<uint, GameObject>();        joinobjects_ = new Dictionary<uint, GameObject>();        recordlist_ = new List<AppointmentRecord>();        isUpdateJoin_ = false;        isrecord_ = false;        otherplayers = new Dictionary<uint, MomentsMember>();    }    void InitFriendsMsg()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_Info, BackMomentsInfo);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_Create, BackCreateFriendsMoments);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_AgreeJoin, BackAgreeJoin);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_Join, BackJoin);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_KickOut, BackKickOut);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_CreateTable, BackCreateTable);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_BuyFriendsDiamond, BackBuyFriendsDiamond);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_Exit, BackExit);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_LoginOrExit, BackLoginOrExit);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_ChangeContent, BackChangeContent);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_MemberChangeNameOrIcon, BackChangeNameOrIcon);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_JoinFriendsTable, BackJoinFriendsTable);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_CloseTable, BackCloseTable);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_BRIEFINFO, BackBriefInfo);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_Record, BackMomentsRecord);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_AddRecord, BackMomentsAddRecord);

        CMsgDispatcher.GetInstance().RegMsgDictionary(
            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_LeaveFriendsTable, BackMomentsLeaveTable);

        CMsgDispatcher.GetInstance().RegMsgDictionary(
            (uint)GameCity.EMSG_ENUM.Friends_Moments_SM_Break, BackMomentsBreak);    }    bool BackMomentsBreak(uint msgType, UMessage msg)
    {
        byte state = msg.ReadByte();
        if(state == 0)
        {
            CCustomDialog.OpenCustomConfirmUI(1650);
            return false;
        }

        GameMain.hall_.GetPlayerData().momentsid = 0;
        FriendsMomentsDataMamager.GetFriendsInstance().momentsID = 0;
        FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond = 0;

        LoadFriendsResource();
        if(GameMain.hall_.contestui_ != null)
            GameMain.hall_.contestui_.SetActive(true);
        if(main_ != null)
            main_.SetActive(false);
        GameMain.safeDeleteObj(main_);

        FriendsMomentsDataMamager.GetFriendsInstance().memberList.Clear();
        FriendsMomentsDataMamager.GetFriendsInstance().tableList.Clear();
        FriendsMomentsDataMamager.GetFriendsInstance().joinList.Clear();
        recordlist_.Clear();

        CCustomDialog.OpenCustomConfirmUI(1212);

        return true;
    }    bool BackMomentsLeaveTable(uint msgType, UMessage msg)
    {
        uint appointmentid = msg.ReadUInt();
        uint playerid = msg.ReadUInt();
        byte sitNo = 0;

        if(FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(appointmentid))
        {
            for(int index = 0; index < FriendsMomentsDataMamager.GetFriendsInstance().tableList[appointmentid].seats_.Count; index++)
            {
                if (FriendsMomentsDataMamager.GetFriendsInstance().tableList[appointmentid].seats_[index].playerid == playerid)
                {
                    sitNo = (byte)index;
                    break;
                }   
            }

            if(FriendsMomentsDataMamager.GetFriendsInstance().tableList[appointmentid].hostid == playerid)
                FriendsMomentsDataMamager.GetFriendsInstance().tableList.Remove(appointmentid);
            else
                FriendsMomentsDataMamager.GetFriendsInstance().tableList[appointmentid].seats_[sitNo].playerid = 0;

            if(tableobjects_.ContainsKey(appointmentid))
            {
                if (tableobjects_[appointmentid] != null)
                {
                    if(FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(appointmentid))
                    {
                        if (FriendsMomentsDataMamager.GetFriendsInstance().tableList[appointmentid].gameid == (byte)GameKind_Enum.GameKind_LandLords)
                            if (sitNo == 2)
                                sitNo += 1;

                        tableobjects_[appointmentid].transform.Find("tableBG/player_" + (sitNo + 1) + "/seat").gameObject.SetActive(true);
                        tableobjects_[appointmentid].transform.Find("tableBG/player_" + (sitNo + 1) + "/Image_HeadBG").gameObject.SetActive(false);
                    }
                }
                else
                    tableobjects_.Clear();
            }
        }

        return true;
    }    bool BackMomentsAddRecord(uint msgType, UMessage msg)    {        AppointmentRecord data = new AppointmentRecord();        byte playerLength = msg.ReadByte();        data.gameID = msg.ReadByte();        data.gameTimes = msg.ReadByte();        data.maxpower = msg.ReadByte();        string powerText = "";        if (data.maxpower != 251)        {            if (data.gameID == (byte)GameKind_Enum.GameKind_LandLords)            {                if (data.maxpower == 250)                    powerText = "不封顶";                else                    powerText = "最大" + data.maxpower + "倍";                data.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameName + " 打" + data.gameTimes + "局 " + powerText;            }            else if (data.gameID == (byte)GameKind_Enum.GameKind_GuanDan)            {                if (data.gameTimes == (byte)TePlayType.Goon)                    powerText = " 连续打";                else                    powerText = " 打" + data.gameTimes + "局 打" + data.maxpower.ToString();                data.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameName + powerText;            }            else if(data.gameID == (byte)GameKind_Enum.GameKind_Mahjong ||
                    data.gameID == (byte)GameKind_Enum.GameKind_YcMahjong)
            {
                if (data.maxpower == 250 || data.maxpower == 0)                    powerText = "不封顶";                else                    powerText = "最大" + data.maxpower + "倍";                data.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameName + " 打" + data.gameTimes + "局 " + powerText;
            }        }        else        {            powerText = "比赛 第" + data.gameTimes.ToString() + "轮";            data.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameName + powerText;        }        data.timeseconds = msg.ReadLong();        data.videoes = msg.ReadLong();        data.isopen = false;                for (int playerindex = 0; playerindex < playerLength; playerindex++)        {            AppointmentRecordPlayer playerdata = new AppointmentRecordPlayer();            playerdata.playerid = msg.ReadUInt();

            if (FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerdata.playerid))
            {
                playerdata.faceid = FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerdata.playerid].faceid;
                playerdata.playerName = FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerdata.playerid].memberName;
                playerdata.coin = msg.ReadLong();
                playerdata.url = FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerdata.playerid].url;
            }            else
            {
                playerdata.faceid = 101;
                playerdata.playerName = "";
                playerdata.coin = msg.ReadLong();
                playerdata.url = "";
            }            data.result.Add(playerdata.playerid, playerdata);        }        recordlist_.Add(data);        recordlist_ = recordlist_.OrderByDescending(u => u.timeseconds).ToList();        uint tableid = msg.ReadUInt();
        if (tableobjects_.ContainsKey(tableid))        {            if (tableobjects_[tableid] != null)            {                tableobjects_[tableid].SetActive(false);                GameMain.safeDeleteObj(tableobjects_[tableid]);            }            tableobjects_.Remove(tableid);        }        if (FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(tableid))
        {
            FriendsMomentsDataMamager.GetFriendsInstance().tableList.Remove(tableid);
            InitTables();
        }        return true;    }    bool BackMomentsRecord(uint msgType, UMessage msg)    {        byte state = msg.ReadByte();        if (state == 0)        {            CCustomDialog.OpenCustomConfirmUI(2005);            return false;        }        isrecord_ = true;        if (recordlist_ == null)            recordlist_ = new List<AppointmentRecord>();        recordlist_.Clear();        byte length = msg.ReadByte();        for (int index = 0; index < length; index++)        {            AppointmentRecord data = new AppointmentRecord();            data.gameID = msg.ReadByte();            data.gameTimes = msg.ReadByte();            data.maxpower = msg.ReadByte();            string powerText = "";            if (data.maxpower != 251)            {                if (data.gameID == (byte)GameKind_Enum.GameKind_LandLords)                {                    if (data.maxpower == 250)                        powerText = "不封顶";                    else                        powerText = "最大" + data.maxpower + "倍";                    data.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameName + " 打" + data.gameTimes + "局 " + powerText;                }                else if (data.gameID == (byte)GameKind_Enum.GameKind_GuanDan)                {                    if (data.gameTimes == (byte)TePlayType.Goon)                        powerText = " 连续打";                    else if(data.maxpower == 0)                        powerText = " 打" + data.gameTimes + "局 随机打";
                    else
                        powerText = " 打" + data.gameTimes + "局 打" + data.maxpower.ToString();                    data.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameName + powerText;                }            }            else            {                powerText = "比赛 第" + data.gameTimes.ToString() + "轮";                data.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameName + powerText;            }            data.timeseconds = msg.ReadLong();            //data.videoes = msg.ReadLong();            data.isopen = false;            byte playerLength = msg.ReadByte();            for (int playerindex = 0; playerindex < playerLength; playerindex++)            {                AppointmentRecordPlayer playerdata = new AppointmentRecordPlayer();                playerdata.playerid = msg.ReadUInt();                playerdata.faceid = msg.ReadInt();                playerdata.playerName = msg.ReadString();                playerdata.coin = msg.ReadLong();                playerdata.url = msg.ReadString();                data.result.Add(playerdata.playerid, playerdata);            }            recordlist_.Add(data);        }        recordlist_ = recordlist_.OrderByDescending(u => u.timeseconds).ToList();        ShowAppointmentRecord();        return true;    }    bool BackBriefInfo(uint msgType, UMessage msg)    {        byte state = msg.ReadByte();        if(state == 1)        {            CCustomDialog.OpenCustomConfirmUI(1628);            return false;        }        uint momentsid = msg.ReadUInt();        string momentsName = msg.ReadString();        string hostName = msg.ReadString();        uint memberNumber = msg.ReadUInt();        ShowJoinPanel(momentsid, momentsName, hostName, memberNumber);        return true;    }    bool BackMomentsInfo(uint msgType, UMessage msg)    {        uint playerid = msg.ReadUInt();        if (playerid != GameMain.hall_.GetPlayerId())            return false;        FriendsMomentsDataMamager.GetFriendsInstance().momentsID = msg.ReadUInt();        FriendsMomentsDataMamager.GetFriendsInstance().momentsName = msg.ReadString();        FriendsMomentsDataMamager.GetFriendsInstance().hostid = msg.ReadUInt();        FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond = msg.ReadLong();        GameMain.hall_.GetPlayerData().momentsid = FriendsMomentsDataMamager.GetFriendsInstance().momentsID;        GameMain.hall_.GetPlayerData().momentName = FriendsMomentsDataMamager.GetFriendsInstance().momentsName;        FriendsMomentsDataMamager.GetFriendsInstance().tableList.Clear();        FriendsMomentsDataMamager.GetFriendsInstance().joinList.Clear();        FriendsMomentsDataMamager.GetFriendsInstance().memberList.Clear();        byte length = msg.ReadByte();        for(int index = 0; index < length; index++)        {            MomentsMember member = new MomentsMember();            member.memberid = msg.ReadUInt();            member.memberName = msg.ReadString();            member.faceid = msg.ReadInt();            member.masterScore = msg.ReadSingle();
            
            member.isonline = msg.ReadByte() == 1;            if(member.isonline)                member.url = msg.ReadString();            FriendsMomentsDataMamager.GetFriendsInstance().memberList.Add(member.memberid, member);        }        if(FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId())        {            length = msg.ReadByte();            for (int index = 0; index < length; index++)            {                MomentsMember member = new MomentsMember();                member.memberid = msg.ReadUInt();                member.memberName = msg.ReadString();                member.faceid = msg.ReadInt();                member.masterScore = msg.ReadSingle();                byte state = msg.ReadByte();                if(state > 0)                    member.url = msg.ReadString();                FriendsMomentsDataMamager.GetFriendsInstance().joinList.Add(member.memberid, member);            }        }        length = msg.ReadByte();        for (int index = 0; index < length; index++)        {            uint playerNumber = msg.ReadUInt();            MomentsTable mt = new MomentsTable(playerNumber);            mt.tableid = msg.ReadUInt();            mt.gameid = msg.ReadByte();            string powerText = "";            if (mt.gameid == (byte)GameKind_Enum.GameKind_LandLords)            {                mt.llr.maxPower = msg.ReadByte();                mt.llr.playTimes = msg.ReadByte();                if (mt.llr.maxPower == 250)                    powerText = "不封顶";                else                    powerText = "最大" + mt.llr.maxPower + "倍";                mt.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(mt.gameid).GameName +                    " 打" + mt.llr.playTimes.ToString() + "局 " + powerText;            }            if (mt.gameid == (byte)GameKind_Enum.GameKind_GuanDan)            {                mt.ter.playType = (TePlayType)msg.ReadByte();                if (mt.ter.playType == TePlayType.Goon)                {                    mt.ter.vectory = msg.ReadByte();                    powerText = " 连续打";                }                else                {                    mt.ter.times = msg.ReadByte();                    mt.ter.score = msg.ReadByte();                    mt.ter.cp = (CurrentPoker)msg.ReadByte();                    if(mt.ter.cp == CurrentPoker.Random)                        powerText = " 打" + mt.ter.times + "局 双下" + mt.ter.score.ToString() + "分 随机打";                    else if((byte)mt.ter.cp == 1)                        powerText = " 打" + mt.ter.times + "局 双下" + mt.ter.score.ToString() + "分 打A";
                    else
                        powerText = " 打" + mt.ter.times + "局 双下" + mt.ter.score.ToString() + "分 打" + (byte)mt.ter.cp;                }                mt.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(mt.gameid).GameName + powerText;            }            byte seatlength = msg.ReadByte();            for (int mtindex = 0; mtindex < seatlength; mtindex++)            {                mt.seats_[mtindex].playerid = msg.ReadUInt();                if(!FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(mt.seats_[mtindex].playerid))
                {
                    MomentsMember mm = new MomentsMember();

                    mm.faceid = msg.ReadInt();
                    mm.memberName = msg.ReadString();
                    mm.url = msg.ReadString();

                    if (!otherplayers.ContainsKey(mt.seats_[mtindex].playerid))
                        otherplayers.Add(mt.seats_[mtindex].playerid, mm);
                }            }            FriendsMomentsDataMamager.GetFriendsInstance().tableList.Add(mt.tableid, mt);        }        LoadMainResource();        main_.SetActive(true);        return true;    }    bool BackCloseTable(uint msgType, UMessage msg)    {        byte state = msg.ReadByte();        if(state != 0)
        {
            CCustomDialog.OpenCustomConfirmUI(2206);
            return false;
        }        uint tableid = msg.ReadUInt();        if(tableobjects_.ContainsKey(tableid))        {            if(tableobjects_[tableid] != null)            {                tableobjects_[tableid].SetActive(false);                GameMain.safeDeleteObj(tableobjects_[tableid]);            }            tableobjects_.Remove(tableid);        }        if (FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(tableid))
        {
            FriendsMomentsDataMamager.GetFriendsInstance().tableList.Remove(tableid);
            InitTables();
        }        return true;    }    bool BackJoinFriendsTable(uint msgType, UMessage msg)    {        uint playerid = msg.ReadUInt();        //if (!FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerid))        //    return false;        uint tableid = msg.ReadUInt();        if (!FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerid))
        {
            MomentsMember mm = new MomentsMember();

            mm.faceid = msg.ReadInt();
            mm.memberName = msg.ReadString();
            mm.url = msg.ReadString();

            if(!otherplayers.ContainsKey(playerid))
                otherplayers.Add(playerid, mm);
        }        MomentsTable table = null;
        if (FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(tableid))
            table = FriendsMomentsDataMamager.GetFriendsInstance().tableList[tableid];        if (table == null)            return false;        byte sitNo = 0;        for(int index = 0; index < table.seats_.Count; index++)        {            if (table.seats_[index].playerid == 0)            {                sitNo = (byte)index;                break;            }        }        table.seats_[sitNo].playerid = playerid;        if (!tableobjects_.ContainsKey(tableid))            return false;        if (tableobjects_[tableid] == null)        {
            tableobjects_.Clear();
            return false;
        }        byte uisitno = sitNo;        if (uisitno == 2)            uisitno = 3;        GameObject playerbg = tableobjects_[tableid].transform.Find("tableBG/player_" + (uisitno + 1).ToString()).gameObject;        GameObject iconobj = playerbg.transform.Find("Image_HeadBG").gameObject;        Image icon = iconobj.transform.Find("Image_HeadMask/Image_HeadImage").gameObject.GetComponent<Image>();        if (FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerid))
        {
            icon.sprite = GameMain.hall_.GetIcon(FriendsMomentsDataMamager.GetFriendsInstance().memberList[table.seats_[sitNo].playerid].url,
                    FriendsMomentsDataMamager.GetFriendsInstance().memberList[table.seats_[sitNo].playerid].memberid,
                    FriendsMomentsDataMamager.GetFriendsInstance().memberList[table.seats_[sitNo].playerid].faceid);
        }
        else
        {
            icon.sprite = GameMain.hall_.GetIcon(otherplayers[table.seats_[sitNo].playerid].url,
                    otherplayers[table.seats_[sitNo].playerid].memberid,
                    otherplayers[table.seats_[sitNo].playerid].faceid);
        }        iconobj.SetActive(true);        AppointmentDataManager.AppointmentDataInstance().kind = AppointmentKind.From_Moments;        return true;    }    bool BackChangeNameOrIcon(uint msgType, UMessage msg)    {        uint playerid = msg.ReadUInt();                if (!FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerid))            return false;        string name = msg.ReadString();        int faceid = msg.ReadInt();        FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].memberName = name;        FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].faceid = faceid;        RefreshMemberList();        return true;    }    bool BackChangeContent(uint msgType, UMessage msg)    {        string content = msg.ReadString();        FriendsMomentsDataMamager.GetFriendsInstance().content = content;        if (main_ == null)            return false;        Text contentTx = main_.transform.Find("middle/ImageBG_notice/Text_notice").gameObject.GetComponent<Text>();        contentTx.text = FriendsMomentsDataMamager.GetFriendsInstance().content;        return true;    }    bool BackLoginOrExit(uint msgType, UMessage msg)    {        bool state = msg.ReadByte() == 1;        uint playerid = msg.ReadUInt();        if (playerid == GameMain.hall_.GetPlayerId())            return false;        if (!FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerid))            return false;        FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].isonline = state;        RefreshMemberList();        return true;    }    bool BackExit(uint msgType, UMessage msg)    {        uint playerid = msg.ReadUInt();        if(playerid == GameMain.hall_.GetPlayerId())        {            LoadFriendsResource();            root_.SetActive(true);            main_.SetActive(false);            GameMain.safeDeleteObj(main_);            GameMain.hall_.GetPlayerData().momentsid = 0;            FriendsMomentsDataMamager.GetFriendsInstance().momentsID = 0;            FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond = 0;            FriendsMomentsDataMamager.GetFriendsInstance().memberList.Clear();            FriendsMomentsDataMamager.GetFriendsInstance().tableList.Clear();            FriendsMomentsDataMamager.GetFriendsInstance().joinList.Clear();            recordlist_.Clear();            Back2Hall();        }        else        {            if (!FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerid))                return false;            FriendsMomentsDataMamager.GetFriendsInstance().memberList.Remove(playerid);            RefreshMemberList();        }        return true;    }    bool BackBuyFriendsDiamond(uint msgType, UMessage msg)    {
        uint playerid = msg.ReadUInt();
        long diamond = msg.ReadLong();        FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond = diamond;

        if (main_ == null)            return false;        if(playerid == 0)
        {
            CCustomDialog.OpenCustomConfirmUI(1501);
            return false;
        }        if (GameMain.hall_.GetPlayerId() == playerid)        {            GameMain.hall_.GetPlayerData().SetCoin(msg.ReadLong());            GameMain.hall_.GetPlayerData().SetDiamond(msg.ReadUInt());            Text selfDiamondTx = main_.transform.Find("Top/Image_DiamondFrame/Text_Diamond").gameObject.GetComponent<Text>();            selfDiamondTx.text = (GameMain.hall_.GetPlayerData().GetCoin() + GameMain.hall_.GetPlayerData().GetDiamond()).ToString();            GameMain.hall_.RefreshShopPlayerDiamondText();            CCustomDialog.OpenCustomConfirmUI(1636);        }        Text friendsDianmondTx = main_.transform.Find("Top/Image_Diamondfriend/Text_Diamond").gameObject.GetComponent<Text>();        friendsDianmondTx.text = FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond.ToString();        return true;    }    bool BackCreateTable(uint msgType, UMessage msg)    {        byte state = msg.ReadByte();        if(state == 0)        {            CCustomDialog.OpenCustomConfirmUI(1617);            return false;        }        int needpay = msg.ReadInt();        //FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond -= needpay;        byte length = msg.ReadByte();        MomentsTable table = new MomentsTable(length);        table.tableid = msg.ReadUInt();        table.gameid = msg.ReadByte();        table.playerNumber = length;        table.llr.playTimes = msg.ReadByte();        table.llr.maxPower = msg.ReadByte();        table.hostid = msg.ReadUInt();        if (table.hostid == GameMain.hall_.GetPlayerId())            return true;        string powerText = "";        if (table.gameid == (byte)GameKind_Enum.GameKind_LandLords)        {            if (table.llr.maxPower == 250)                powerText = "不封顶";            else                powerText = "最大" + table.llr.maxPower + "倍";            table.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(table.gameid).GameName +                 " 打" + table.llr.playTimes.ToString() + "局 " + powerText;        }        if (table.gameid == (byte)GameKind_Enum.GameKind_GuanDan)        {            table.ter.playType = (TePlayType)msg.ReadByte();            if (table.ter.playType == TePlayType.Goon)            {                table.ter.vectory = msg.ReadByte();                powerText = " 连续打";            }              else            {                table.ter.times = msg.ReadByte();                table.ter.score = msg.ReadByte();                table.ter.cp = (CurrentPoker)msg.ReadByte();                if(table.ter.cp == CurrentPoker.Random)                    powerText = "打" + table.ter.times + "局 双下" + table.ter.score.ToString() + "分 随机打";                else if((byte)table.ter.cp == 1)                    powerText = "打" + table.ter.times + "局 双下" + table.ter.score.ToString() + "分 打A";
                else
                    powerText = "打" + table.ter.times + "局 双下" + table.ter.score.ToString() + "分 打" + (byte)table.ter.cp;            }            table.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(table.gameid).GameName + powerText;        }        byte tableplayernumber = msg.ReadByte();        for (int index = 0; index < tableplayernumber; index++)        {            byte sitNo = msg.ReadByte();            table.seats_[sitNo].playerid = msg.ReadUInt();        }
                FriendsMomentsDataMamager.GetFriendsInstance().tableList.Add(table.tableid, table);        InitTables();        return true;    }    bool BackKickOut(uint msgType, UMessage msg)    {        uint playerid = msg.ReadUInt();        if(playerid == 0)
        {
            CCustomDialog.OpenCustomConfirmUI(1649);
            return false;
        }        if(playerid == GameMain.hall_.GetPlayerId())        {            GameMain.hall_.GetPlayerData().momentsid = 0;            FriendsMomentsDataMamager.GetFriendsInstance().momentsID = 0;            LoadFriendsResource();            GameMain.hall_.contestui_.SetActive(true);            //root_.SetActive(true);            main_.SetActive(false);            GameMain.safeDeleteObj(main_);            FriendsMomentsDataMamager.GetFriendsInstance().memberList.Clear();            FriendsMomentsDataMamager.GetFriendsInstance().tableList.Clear();            FriendsMomentsDataMamager.GetFriendsInstance().joinList.Clear();            recordlist_.Clear();            CCustomDialog.OpenCustomConfirmUI(1226);        }        else        {            if(memberobjects_.ContainsKey(playerid))            {                if(memberobjects_[playerid] != null)                {                    memberobjects_[playerid].SetActive(false);                    GameMain.safeDeleteObj(memberobjects_[playerid]);                    memberobjects_.Remove(playerid);                }                if(FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerid))                    FriendsMomentsDataMamager.GetFriendsInstance().memberList.Remove(playerid);                RefreshMemberList();            }        }        return true;    }    bool BackJoin(uint msgType, UMessage msg)    {        byte state = msg.ReadByte();        if (state == 1)            CCustomDialog.OpenCustomConfirmUI(1629);        if(state == 2)            CCustomDialog.OpenCustomConfirmUI(1219);        if (state != 0)            return false;        uint playerid = msg.ReadUInt();        if (playerid == GameMain.hall_.GetPlayerId())        {            //LoadMainResource();            //main_.SetActive(true);            CCustomDialog.OpenCustomConfirmUI(1631);        }        else        {            MomentsMember member = new MomentsMember();            member.memberid = playerid;            member.memberName = msg.ReadString();            member.faceid = msg.ReadInt();            member.masterScore = msg.ReadSingle();            byte rstate = msg.ReadByte();            if(rstate > 1)                member.url = msg.ReadString();            if(GameMain.hall_.GetPlayerId() == FriendsMomentsDataMamager.GetFriendsInstance().hostid)            {                if(!FriendsMomentsDataMamager.GetFriendsInstance().joinList.ContainsKey(member.memberid))
                {
                    FriendsMomentsDataMamager.GetFriendsInstance().joinList.Add(member.memberid, member);                    InitAskPanel();
                }            }        }        RefreshJoinSpot();        return true;    }    void ShowJoinPanel(uint momentsid, string momentsName, string hostName, uint memberNumber)    {        if (root_ == null)            return;        GameObject joinpanel = root_.transform.Find("Pop-up/join").gameObject;        joinpanel.SetActive(true);        Text momentsNameTx = joinpanel.transform.Find("ImageBG/TextName").gameObject.GetComponent<Text>();        momentsNameTx.text = momentsName;        Text momentsnumberTx = joinpanel.transform.Find("ImageBG/number/Text").gameObject.GetComponent<Text>();        momentsnumberTx.text = memberNumber.ToString();        Text momentsidTx = joinpanel.transform.Find("ImageBG/TextID").gameObject.GetComponent<Text>();        momentsidTx.text = momentsid.ToString();        Text hostTx = joinpanel.transform.Find("ImageBG/Textplayer").gameObject.GetComponent<Text>();        hostTx.text = hostName;        GameObject joinbtn = joinpanel.transform.Find("ImageBG/Button_yes").gameObject;        XPointEvent.AutoAddListener(joinbtn, OnSendJoinMomentsMsg, momentsid);        GameObject closejoinbtn = joinpanel.transform.Find("ImageBG/Button_no").gameObject;        XPointEvent.AutoAddListener(closejoinbtn, OnCloseJoinPanel, null);    }    private void OnCloseJoinPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (root_ == null)                return;            GameObject joinpanel = root_.transform.Find("Pop-up/join").gameObject;            joinpanel.SetActive(false);            if(numberpanel_ != null)                numberpanel_.SetActive(false);        }    }    private void OnSendJoinMomentsMsg(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (GameMain.hall_.GetPlayerData().momentsid != 0)                CCustomDialog.OpenCustomConfirmUI(1639);            uint momentsID = (uint)button;            UMessage joinmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_Join);            joinmsg.Add(GameMain.hall_.GetPlayerId());            joinmsg.Add(momentsID);            NetWorkClient.GetInstance().SendMsg(joinmsg);            if (root_ == null)                return;            GameObject joinpanel = root_.transform.Find("Pop-up/join").gameObject;            joinpanel.SetActive(false);            if (numberpanel_ != null)                numberpanel_.SetActive(false);        }    }    bool BackAgreeJoin(uint msgType, UMessage msg)    {        byte state = msg.ReadByte();        string momentsName = msg.ReadString();        if (state == 0)        {            uint playerid = msg.ReadUInt();            if(playerid == GameMain.hall_.GetPlayerId())            {                FriendsMomentsDataMamager.GetFriendsInstance().momentsID = msg.ReadUInt();                FriendsMomentsDataMamager.GetFriendsInstance().momentsName = msg.ReadString();                FriendsMomentsDataMamager.GetFriendsInstance().hostid = msg.ReadUInt();                FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond = msg.ReadLong();                GameMain.hall_.GetPlayerData().momentsid = FriendsMomentsDataMamager.GetFriendsInstance().momentsID;                GameMain.hall_.GetPlayerData().momentName = FriendsMomentsDataMamager.GetFriendsInstance().momentsName;                byte length = msg.ReadByte();                for(int index = 0; index < length; index++)                {                    MomentsMember mm = new MomentsMember();                    mm.memberid = msg.ReadUInt();                    mm.memberName = msg.ReadString();                    mm.faceid = msg.ReadInt();                    mm.masterScore = msg.ReadSingle();
                    mm.isonline = msg.ReadByte() > 0;                    if(mm.isonline)                        mm.url = msg.ReadString();                    FriendsMomentsDataMamager.GetFriendsInstance().memberList.Add(mm.memberid, mm);                }                length = msg.ReadByte();                for (int index = 0; index < length; index++)                {                    uint number = msg.ReadUInt();                    MomentsTable mt = new MomentsTable(number);                    mt.tableid = msg.ReadUInt();                    mt.gameid = msg.ReadByte();                    string powerText = "";                    if (mt.gameid == (byte)GameKind_Enum.GameKind_LandLords)                    {                        mt.llr.maxPower = msg.ReadByte();                        mt.llr.playTimes = msg.ReadByte();                        if (mt.llr.maxPower == 250)                            powerText = "不封顶";                        else                            powerText = "最大" + mt.llr.maxPower + "倍";                        mt.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(mt.gameid).GameName +                             " 打" + mt.llr.playTimes.ToString() + "局 " + powerText;                    }                    if (mt.gameid == (byte)GameKind_Enum.GameKind_GuanDan)                    {                        mt.ter.playType = (TePlayType)msg.ReadByte();                        if (mt.ter.playType == TePlayType.Goon)                        {                            mt.ter.vectory = msg.ReadByte();                            powerText = " 连续打";                        }                        else                        {                            mt.ter.times = msg.ReadByte();                            mt.ter.score = msg.ReadByte();                            mt.ter.cp = (CurrentPoker)msg.ReadByte();                            if(mt.ter.cp == CurrentPoker.Random)                                powerText = " 打" + mt.ter.times + "局 双下" + mt.ter.score.ToString() + "分 随机打";                            else if((byte)mt.ter.cp == 1)                                powerText = " 打" + mt.ter.times + "局 双下" + mt.ter.score.ToString() + "分 打A";
                            else
                                powerText = " 打" + mt.ter.times + "局 双下" + mt.ter.score.ToString() + "分 打" + (byte)mt.ter.cp;                        }                        mt.gamerule = CCsvDataManager.Instance.GameDataMgr.GetGameData(mt.gameid).GameName + powerText;                    }                    byte tableplayernumber = msg.ReadByte();                    for (int mtindex = 0; mtindex < tableplayernumber; mtindex++)                    {                        byte sitNo = msg.ReadByte();                        mt.seats_[sitNo].playerid = msg.ReadUInt();                    }                    FriendsMomentsDataMamager.GetFriendsInstance().tableList.Add(mt.tableid, mt);                }                LoadMainResource();                if (root_ != null)                {                    if (root_.activeSelf)                        main_.SetActive(true);                    root_.SetActive(false);                }                                }            else            {                MomentsMember mm = new MomentsMember();                mm.memberid = playerid;                mm.memberName = msg.ReadString();                mm.faceid = msg.ReadInt();
                mm.url = msg.ReadString();
                mm.isonline = msg.ReadByte() == 1;
                //mm.isonline = true;                if(!FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(mm.memberid))                    FriendsMomentsDataMamager.GetFriendsInstance().memberList.Add(mm.memberid, mm);                RefreshMemberList();            }        }

        //被拒绝
        if (state == 1)
        {
            object[] param = { momentsName };
            CCustomDialog.OpenCustomConfirmUIWithFormatParam(1632, param);
        }

        //已有朋友圈
        if (state == 2)
            CCustomDialog.OpenCustomConfirmUI(1656);        RefreshJoinSpot();        return true;    }    bool BackCreateFriendsMoments(uint msgType, UMessage msg)    {        byte state = msg.ReadByte();        if(state == 0)        {            FriendsMomentsDataMamager.GetFriendsInstance().momentsID = msg.ReadUInt();            FriendsMomentsDataMamager.GetFriendsInstance().momentsName = msg.ReadString();            FriendsMomentsDataMamager.GetFriendsInstance().hostid = GameMain.hall_.GetPlayerId();            GameMain.hall_.GetPlayerData().momentsid = FriendsMomentsDataMamager.GetFriendsInstance().momentsID;            GameMain.hall_.GetPlayerData().momentName = FriendsMomentsDataMamager.GetFriendsInstance().momentsName;            LoadMainResource();            main_.SetActive(true);            MomentsMember member = new MomentsMember();            member.memberid = GameMain.hall_.GetPlayerId();            member.memberName = GameMain.hall_.GetPlayerData().GetPlayerName();            member.faceid = (int)GameMain.hall_.GetPlayerData().PlayerIconId;            //member.masterScore = GameMain.hall_.GetPlayerData().MasterScoreKindArray;            member.isonline = true;            member.url = GameMain.hall_.GetPlayerData().GetPlayerIconURL();            FriendsMomentsDataMamager.GetFriendsInstance().memberList.Add(member.memberid, member);            RefreshMemberList();            return true;        }        if (state == 1)            CCustomDialog.OpenCustomConfirmUI(1635);        else if (state == 2)            CCustomDialog.OpenCustomConfirmUI(1635);        else if (state == 3)            CCustomDialog.OpenCustomConfirmUI(1634);        else if (state == 4)            CCustomDialog.OpenCustomConfirmUI(1633);        return true;    }    void LoadFriendsResource()    {        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        if (root_ != null)        {            root_.SetActive(false);            return;        }        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Lobby_friend_find");        root_ = (GameObject)GameMain.instantiate(obj0);        CanvasObj = GameObject.Find("Canvas/Root");        root_.transform.SetParent(CanvasObj.transform, false);        root_.SetActive(false);        InitFriendsEvents();        InitFriendsData();    }    void LoadMainResource()    {        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        if (main_ != null)        {            main_.SetActive(false);            InitMainData();            return;        }        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Lobby_friend");        main_ = (GameObject)GameMain.instantiate(obj0);        CanvasObj = GameObject.Find("Canvas/Root");        main_.transform.SetParent(CanvasObj.transform, false);        main_.SetActive(false);        InitMainEvents();        InitMainData();    }    void InitMainEvents()    {        GameObject returnBtn = main_.transform.Find("Top/ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn, OnBack2Hall, null);        GameObject setBtn = main_.transform.Find("Top/ButtonSet").gameObject;        XPointEvent.AutoAddListener(setBtn, OnSetMoments, null);        GameObject closeSetBtn = main_.transform.Find("Pop-up/set/UiRootBG_Button").gameObject;        XPointEvent.AutoAddListener(closeSetBtn, OnCloseSetMoments, null);        GameObject ask4joinBtn = main_.transform.Find("Pop-up/set/ButtonGroupMask/ButtonGroup/Button_shenqing").gameObject;        XPointEvent.AutoAddListener(ask4joinBtn, OnOpenAskPanel, null);        GameObject closeAskPanelBtn = main_.transform.Find("Pop-up/applyList/Middle/Buttonclose").gameObject;        XPointEvent.AutoAddListener(closeAskPanelBtn, OnCloseAskPanel, null);        GameObject closeMemberPanelBtn = main_.transform.Find("Pop-up/PlayerList/Middle/Buttonclose").gameObject;        XPointEvent.AutoAddListener(closeMemberPanelBtn, OnCloseMemberPanel, null);        GameObject exitBtn = main_.transform.Find("Pop-up/set/ButtonGroupMask/ButtonGroup/Button_tuichu").gameObject;        XPointEvent.AutoAddListener(exitBtn, OnExit, null);

        GameObject breakBtn = main_.transform.Find("Pop-up/set/ButtonGroupMask/ButtonGroup/Button_jiesan").gameObject;        XPointEvent.AutoAddListener(breakBtn, OnExit, null);        GameObject recordBtn = main_.transform.Find("middle/ImageBG_notice/Button_record").gameObject;        XPointEvent.AutoAddListener(recordBtn, OnMomentsRecord, null);        GameObject memberBtn = main_.transform.Find("middle/ImageBG_notice/Button_member").gameObject;        XPointEvent.AutoAddListener(memberBtn, OnShowMemberList, null);        GameObject closeMemberBtn = main_.transform.Find("Pop-up/PlayerList/UiRootBG_Button").gameObject;        XPointEvent.AutoAddListener(closeMemberBtn, OnCloseMemberList, null);        GameObject createTableBtn = main_.transform.Find("middle/ImageBG_notice/Button_table").gameObject;        XPointEvent.AutoAddListener(createTableBtn, OnCreateTable, null);        GameObject chargeBtn = main_.transform.Find("Top/Image_DiamondFrame").gameObject;        XPointEvent.AutoAddListener(chargeBtn, GameMain.hall_.Charge, Shop.SHOPTYPE.SHOPTYPE_DIAMOND);        GameObject chargeFriendsBtn = main_.transform.Find("Top/Image_Diamondfriend").gameObject;        XPointEvent.AutoAddListener(chargeFriendsBtn, OnChargeFriendsDiamond, null);        GameObject friendsdiamondconfirmbtn = main_.transform.Find("Pop-up/Buy_Diamondfriend/ImageBG/ButtonOk").gameObject;        XPointEvent.AutoAddListener(friendsdiamondconfirmbtn, OnBuyFriendsDiamond, null);        GameObject closeChargeFriendBtn = main_.transform.Find("Pop-up/Buy_Diamondfriend/ImageBG/Button_close").gameObject;        XPointEvent.AutoAddListener(closeChargeFriendBtn, OnCloseBuyFriendsDiamond, null);    }    private void OnMomentsRecord(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (isrecord_)            {                ShowAppointmentRecord();                return;            }            UMessage recordmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_Record);            recordmsg.Add(GameMain.hall_.GetPlayerId());            NetWorkClient.GetInstance().SendMsg(recordmsg);        }    }    void LoadAppointmentRecordResource()    {        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Lobby_Roomrecord");        recordpanel_ = (GameObject)GameMain.instantiate(obj0);        GameObject GameCanvas = GameObject.Find("Canvas");        recordpanel_.transform.SetParent(GameCanvas.transform.Find("Root"), false);        RefreshRecordData();        InitRecordEvents();    }    void InitRecordEvents()    {        GameObject closebtn = recordpanel_.transform.Find("Top").Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(closebtn, OnCloseRecordPanel, null);    }    private void OnCloseRecordPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            recordpanel_.SetActive(false);        }    }    private void OnOOCRecordItem(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            int index = (int)button;            AppointmentRecord data = recordlist_[index];            Rect temp = recorditems_[index].transform.gameObject.GetComponent<Image>().rectTransform.rect;            if (temp.height == 80.0f)            {                recorditems_[index].transform.gameObject.GetComponent<Image>().rectTransform.sizeDelta = new Vector2(temp.width, 150.0f);                recorditems_[index].transform.Find("Image_gaikuang").Find("ImageIcon_1").gameObject.SetActive(false);                recorditems_[index].transform.Find("Image_gaikuang").Find("ImageIcon_2").gameObject.SetActive(true);            }            else            {                recorditems_[index].transform.gameObject.GetComponent<Image>().rectTransform.sizeDelta = new Vector2(temp.width, 80.0f);                recorditems_[index].transform.Find("Image_gaikuang").Find("ImageIcon_1").gameObject.SetActive(true);                recorditems_[index].transform.Find("Image_gaikuang").Find("ImageIcon_2").gameObject.SetActive(false);            }            for (int objindex = 0; objindex < recorditems_.Count; objindex++)            {                if (objindex == index)                    continue;                recorditems_[objindex].transform.gameObject.GetComponent<Image>().rectTransform.sizeDelta = new Vector2(temp.width, 80.0f);                recorditems_[objindex].transform.Find("Image_gaikuang").Find("ImageIcon_1").gameObject.SetActive(true);                recorditems_[objindex].transform.Find("Image_gaikuang").Find("ImageIcon_2").gameObject.SetActive(false);            }        }    }    void ShowAppointmentRecord()    {        if (recordpanel_ == null)            LoadAppointmentRecordResource();        RefreshRecordData();        recordpanel_.SetActive(true);    }    void RefreshRecordData()    {        if (recordpanel_ == null)            return;        if (recorditems_ == null)            recorditems_ = new List<GameObject>();        GameObject recorditemBG = recordpanel_.transform.Find("middle").            Find("Viewport_record").Find("Content_record").gameObject;        GameMain.hall_.ClearChilds(recorditemBG);        for (int index = 0; index < recorditems_.Count; index++)            GameMain.safeDeleteObj(recorditems_[index]);        recorditems_.Clear();        for (int index = 0; index < recordlist_.Count; index++)        {            LoadRecordItem(index);        }    }    void LoadRecordItem(int index)    {        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        AppointmentRecord data = recordlist_[index];        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Lobby_Roomrecord_info");        GameObject recorditem = (GameObject)GameMain.instantiate(obj0);        GameObject recorditemBG = recordpanel_.transform.Find("middle").            Find("Viewport_record").Find("Content_record").gameObject;        recorditem.transform.SetParent(recorditemBG.transform, false);        XPointEvent.AutoAddListener(recorditem, OnOOCRecordItem, index);        Image gameicon = recorditem.transform.Find("Image_gaikuang").Find("TextGame").gameObject.GetComponent<Image>();        gameicon.sprite = bundle.LoadAsset<Sprite>(CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameTextIcon);        Text appointmentTime = recorditem.transform.Find("Image_gaikuang").Find("TextTime").gameObject.GetComponent<Text>();        System.DateTime sdt = GameCommon.ConvertLongToDateTime(data.timeseconds);        appointmentTime.text = sdt.ToString("yyyy年MM月dd日HH:mm");        Text appointmentRule = recorditem.transform.Find("Image_gaikuang").Find("TextRule").gameObject.GetComponent<Text>();        //string powerText = "";        //if (data.maxpower == 250)        //    powerText = "不封顶";        //else        //    powerText = "最大" + data.maxpower + "倍";        //appointmentRule.text = CCsvDataManager.Instance.GameDataMgr.GetGameData(data.gameID).GameName + " " + data.gameTimes + "局 " + powerText;        appointmentRule.text = data.gamerule;        Text selfcoinTx = recorditem.transform.Find("Image_gaikuang").Find("TextJifen").gameObject.GetComponent<Text>();        if(data.result.ContainsKey(GameMain.hall_.GetPlayerId()))
        {
            if (data.result[GameMain.hall_.GetPlayerId()].coin >= 0)
            {
                selfcoinTx.text = "+" + data.result[GameMain.hall_.GetPlayerId()].coin.ToString();
                selfcoinTx.color = new Color(217.0f / 255.0f, 59.0f / 255.0f, 42.0f / 255.0f);
            }
            else
            {
                selfcoinTx.text = data.result[GameMain.hall_.GetPlayerId()].coin.ToString();
                selfcoinTx.color = new Color(89.0f / 255.0f, 130.0f / 255.0f, 188.0f / 255.0f);
            }
        }        else
        {
            selfcoinTx.text = "";
        }        GameObject detailBG = recorditem.transform.Find("Image_xiangqing").gameObject;        int playerindex = 1;        foreach (uint playerid in data.result.Keys)        {            GameObject playerBG = detailBG.transform.Find("playerinfo_" + playerindex.ToString()).gameObject;            Image playerIcon = playerBG.transform.Find("Image_HeadBG").                Find("Image_HeadMask").Find("Image_HeadImage").                gameObject.GetComponent<Image>();            playerIcon.sprite = GameMain.hall_.GetIcon(data.result[playerid].url, data.result[playerid].playerid,data.result[playerid].faceid);            Text playerName = playerBG.transform.Find("TextName").gameObject.GetComponent<Text>();            playerName.text = data.result[playerid].playerName;            Text playerCoin = playerBG.transform.Find("TextJifen").gameObject.GetComponent<Text>();            if (data.result[playerid].coin >= 0)            {                playerCoin.text = "+" + data.result[playerid].coin.ToString();                playerCoin.color = new Color(217.0f / 255.0f, 59.0f / 255.0f, 42.0f / 255.0f);            }            else            {                playerCoin.text = data.result[playerid].coin.ToString();                playerCoin.color = new Color(89.0f / 255.0f, 130.0f / 255.0f, 188.0f / 255.0f);            }            playerindex++;        }        GameObject videoBtn = recorditem.transform.Find("Image_xiangqing/Button_video").gameObject;        //XPointEvent.AutoAddListener(videoBtn, OnClickWatchVideo, data);        videoBtn.SetActive(false);        if (data.result.Count == 3)        {            detailBG.transform.Find("playerinfo_4").gameObject.SetActive(false);        }        recorditems_.Add(recorditem);    }    private void OnBuyFriendsDiamond(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);
            //捐钱
            buyfriendspanel_.SetActive(false);            long coin = 0;            InputField coinTx = buyfriendspanel_.transform.Find("ImageBG/InputField").gameObject.GetComponent<InputField>();            long.TryParse(coinTx.text, out coin);            if (coin <= 0)            {                CCustomDialog.OpenCustomConfirmUI(1501);                return;            }            long selfcoin = GameMain.hall_.GetPlayerData().GetCoin() + GameMain.hall_.GetPlayerData().GetDiamond();            if (selfcoin < coin)
            {
                CCustomDialog.OpenCustomConfirmUI(1501);
                return;
            }            UMessage buymsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_BuyFriendsDiamond);            buymsg.Add(GameMain.hall_.GetPlayerId());            buymsg.Add(GameMain.hall_.GetPlayerData().momentsid);            buymsg.Add(coin);            NetWorkClient.GetInstance().SendMsg(buymsg);        }    }    private void OnCloseBuyFriendsDiamond(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (buyfriendspanel_ == null)                buyfriendspanel_ = main_.transform.Find("Pop-up/Buy_Diamondfriend").gameObject;            buyfriendspanel_.SetActive(false);        }    }    private void OnChargeFriendsDiamond(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (buyfriendspanel_ == null)            {                buyfriendspanel_ = main_.transform.Find("Pop-up/Buy_Diamondfriend").gameObject;            }                            buyfriendspanel_.SetActive(true);        }    }    private void OnCreateTable(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (friendroomrulepanel_ == null)                LoadFriendsRoomRulePanel();            friendroomrulepanel_.SetActive(true);            friendroomrulepanel_.transform.SetAsLastSibling();        }    }    void LoadFriendsRoomRulePanel()    {        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("friend_Room_rule");        friendroomrulepanel_ = (GameObject)GameMain.instantiate(obj0);        CanvasObj = GameObject.Find("Canvas/Root");        friendroomrulepanel_.transform.SetParent(CanvasObj.transform, false);                currentPickGame_ = 0;        GameObject returnBtn = friendroomrulepanel_.transform.Find("Top").Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn, OnCloseRulePanel, null);        //Text coin = friendroomrulepanel_.transform.FindChild("Top").FindChild("Image_coinframe").FindChild("Text_Coin").gameObject.GetComponent<Text>();        //coin.text = GameMain.hall_.GetPlayerData().GetCoin().ToString();        //Text diamond = friendroomrulepanel_.transform.FindChild("Top").FindChild("Image_DiamondFrame").FindChild("Text_Diamond").gameObject.GetComponent<Text>();        //diamond.text = (GameMain.hall_.GetPlayerData().GetDiamond() + GameMain.hall_.GetPlayerData().GetCoin()).ToString();        //GameObject diamondBtn = friendroomrulepanel_.transform.FindChild("Top").FindChild("Image_DiamondFrame").gameObject;        //XPointEvent.AutoAddListener(diamondBtn, GameMain.hall_.Charge, Shop.SHOPTYPE.SHOPTYPE_DIAMOND);        //GameObject coinBtn = friendroomrulepanel_.transform.FindChild("Top").FindChild("Image_coinframe").gameObject;        //XPointEvent.AutoAddListener(coinBtn, GameMain.hall_.Charge, Shop.SHOPTYPE.SHOPTYPE_COIN);        Toggle landlordToggle = friendroomrulepanel_.transform.Find("Left/Imagebg/Toggle_7").gameObject.GetComponent<Toggle>();        landlordToggle.onValueChanged.AddListener(delegate (bool value) {ChangeRuleInfo(0, value); });        Toggle throwEgg = friendroomrulepanel_.transform.Find("Left/Imagebg/Toggle_13").gameObject.GetComponent<Toggle>();        throwEgg.onValueChanged.AddListener(delegate (bool value) {  ChangeRuleInfo(1, value); });        Toggle mahjong = friendroomrulepanel_.transform.Find("Left/Imagebg/Toggle_12").gameObject.GetComponent<Toggle>();        mahjong.onValueChanged.AddListener(delegate (bool value) { ChangeRuleInfo(2, value); });        AppointmentDataManager.AppointmentDataInstance().gameid = (byte)GameKind_Enum.GameKind_LandLords;        InitRightRuleEvents();        RefreshPayInfo(1);    }    void InitRightRuleEvents()    {        GameObject right = friendroomrulepanel_.transform.Find("Right").gameObject;        GameObject createBtn = right.transform.Find("Button_chuangjian").gameObject;        XPointEvent.AutoAddListener(createBtn, OnCreateGameRoom, null);        GameObject createBtn0 = right.transform.Find("Button_chuangjian_0").gameObject;        XPointEvent.AutoAddListener(createBtn0, OnCreateGameRoom, 0);        GameObject llfirstGroup = right.transform.Find("rule_7").Find("jushu").Find("ImageBG").gameObject;        for (int index = 0; index < llfirstGroup.transform.childCount; index++)        {            Toggle toggle = llfirstGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();            int temp = index;            toggle.onValueChanged.AddListener(                delegate (bool value)                {                    CustomAudio.GetInstance().PlayCustomAudio(1004);                    if (llr_ == null)                        llr_ = new LandLordRule();                    llr_.playTimes = LandLordRule.playTimesList[temp];                    RefreshPayInfo(temp + 1);                });        }        GameObject llsecondGroup = right.transform.Find("rule_7").Find("beishu").Find("ImageBG").gameObject;        for (int index = 0; index < llsecondGroup.transform.childCount; index++)        {            Toggle toggle = llsecondGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();            int temp = index;            if (llr_ == null)                llr_ = new LandLordRule();            toggle.onValueChanged.AddListener(delegate (bool vale) { CustomAudio.GetInstance().PlayCustomAudio(1004);
                llr_.maxPower = LandLordRule.maxPowerList[temp]; });        }        GameObject tefirstGroup = right.transform.Find("rule_13").Find("wanfa").Find("ImageBG").gameObject;        GameObject goonPanel = right.transform.Find("rule_13").Find("lianxu").gameObject;        GameObject timesPanel = right.transform.Find("rule_13").Find("jiju").gameObject;        for (int index = 0; index < tefirstGroup.transform.childCount; index++)        {            Toggle toggle = tefirstGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();            int temp = index;            toggle.onValueChanged.AddListener(delegate (bool value)            {                CustomAudio.GetInstance().PlayCustomAudio(1004);                ter_.playType = (TePlayType)temp;                goonPanel.SetActive(temp == 0);                timesPanel.SetActive(temp == 1);            });        }        GameObject tesecondGroup = right.transform.Find("rule_13").Find("lianxu").Find("guo").Find("ImageBG").gameObject;        for (int index = 0; index < tesecondGroup.transform.childCount; index++)        {            Toggle toggle = tesecondGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();            int temp = index;            if (ter_ == null)                ter_ = new ThrowEggsRule();            toggle.onValueChanged.AddListener(delegate (bool value) { CustomAudio.GetInstance().PlayCustomAudio(1004);
                ter_.vectory = ThrowEggsRule.victoryList[temp]; });        }        GameObject tethirdGroup = right.transform.Find("rule_13").Find("jiju").Find("jushu").Find("ImageBG").gameObject;        for (int index = 0; index < tethirdGroup.transform.childCount; index++)        {            Toggle toggle = tethirdGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();            int temp = index;            toggle.onValueChanged.AddListener(                delegate (bool value)                {                    CustomAudio.GetInstance().PlayCustomAudio(1004);                    if (ter_ == null)                        ter_ = new ThrowEggsRule();                    ter_.times = ThrowEggsRule.timesList[temp];                    RefreshPayInfo(temp + 1);                });        }        GameObject teforthGroup = right.transform.Find("rule_13").Find("jiju").Find("jifen").Find("ImageBG").gameObject;        for (int index = 0; index < teforthGroup.transform.childCount; index++)        {            Toggle toggle = teforthGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();            int temp = index;            toggle.onValueChanged.AddListener(delegate (bool value) { CustomAudio.GetInstance().PlayCustomAudio(1004);
                ter_.score = ThrowEggsRule.scoreList[temp]; });        }        GameObject tefifthGroup = right.transform.Find("rule_13").Find("jiju").Find("jipai").Find("ImageBG").gameObject;        for (int index = 0; index < tefifthGroup.transform.childCount; index++)        {            Toggle toggle = tefifthGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();            int temp = index;            if (temp == 0)                temp = 2;            else                temp = 0;            toggle.onValueChanged.AddListener(delegate (bool value) { CustomAudio.GetInstance().PlayCustomAudio(1004);
                ter_.cp = (CurrentPoker)temp; });        }

        if (mjr_ == null)
            mjr_ = new MahjongRule();

        GameObject mjfirstGroup = right.transform.Find("rule_12/jushu/ImageBG").gameObject;        for (int index = 0; index < mjfirstGroup.transform.childCount; index++)
        {
            Toggle toggle = mjfirstGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();
            int temp = index;

            toggle.onValueChanged.AddListener(delegate (bool value)
            {
                CustomAudio.GetInstance().PlayCustomAudio(1004);
                mjr_.times = MahjongRule.timesList[temp];
            });
        }        GameObject mjsecondGroup = right.transform.Find("rule_12/beishu/ImageBG").gameObject;        for (int index = 0; index < mjsecondGroup.transform.childCount; index++)
        {
            Toggle toggle = mjsecondGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();
            int temp = index;

            toggle.onValueChanged.AddListener(delegate (bool value)
            {
                CustomAudio.GetInstance().PlayCustomAudio(1004);
                mjr_.maxPower = MahjongRule.maxPowerList[temp];
            });
        }        GameObject mjthirdGroup = right.transform.Find("rule_12/wanfa_1/ImageBG").gameObject;        for (int index = 0; index < mjthirdGroup.transform.childCount; index++)
        {
            Toggle toggle = mjthirdGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();
            int temp = index;
            toggle.onValueChanged.AddListener(delegate (bool value)
            {
                CustomAudio.GetInstance().PlayCustomAudio(1004);
                if (temp == 0)
                    mjr_.isAddBet = value;
                if (temp == 1)
                    mjr_.isAddBet = !value;
            });
        }        GameObject mjforthGroup = right.transform.Find("rule_12/wanfa_2/ImageBG").gameObject;        for (int index = 0; index < mjforthGroup.transform.childCount; index++)
        {
            Toggle toggle = mjforthGroup.transform.GetChild(index).gameObject.GetComponent<Toggle>();
            int temp = index;

            toggle.onValueChanged.AddListener(delegate (bool value)
            {
                CustomAudio.GetInstance().PlayCustomAudio(1004);
                mjr_.isOtherFour = value;
            });
        }        GameObject mjfifthGroup = right.transform.Find("rule_12/wanfa_3/ImageBG").gameObject;        Toggle toggle0 = mjfifthGroup.transform.GetChild(0).gameObject.GetComponent<Toggle>();
        toggle0.onValueChanged.AddListener(delegate (bool value)
        {
            CustomAudio.GetInstance().PlayCustomAudio(1004);
            mjr_.isOneNine = value;
        });

        Toggle toggle1 = mjfifthGroup.transform.GetChild(1).gameObject.GetComponent<Toggle>();
        toggle1.onValueChanged.AddListener(delegate (bool value)
        {
            CustomAudio.GetInstance().PlayCustomAudio(1004);
            mjr_.isMiddle = value;
        });

        Toggle toggle2 = mjfifthGroup.transform.GetChild(2).gameObject.GetComponent<Toggle>();
        toggle2.onValueChanged.AddListener(delegate (bool value)
        {
            CustomAudio.GetInstance().PlayCustomAudio(1004);
            mjr_.isSkyGroud = value;
        });    }    //创建房间    private void OnCreateGameRoom(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            byte state = UpdateGameResource();            if (state != 0)                return;            byte gameid = AppointmentDataManager.AppointmentDataInstance().gameid;            int power = AppointmentDataManager.AppointmentDataInstance().appointmentcsvs_[gameid].datas[0];            int level = AppointmentDataManager.AppointmentDataInstance().appointmentcsvs_[gameid].datas[playtimesindex_];            int pay4appointment = power * level;            if(FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond < pay4appointment)            {                CCustomDialog.OpenCustomConfirmUI(1617);                return;            }            UMessage createmsg = new UMessage((uint)GameCity.EMSG_ENUM.Appointment_CM_Create);            createmsg.Add((byte)1);            createmsg.Add(GameMain.hall_.GetPlayerId());            createmsg.Add(AppointmentDataManager.AppointmentDataInstance().gameid);
            createmsg.Add(playtimesindex_);            createmsg.Add((byte)0);

            switch ((GameKind_Enum)AppointmentDataManager.AppointmentDataInstance().gameid)
            {
                case GameKind_Enum.GameKind_LandLords:
                    createmsg.Add(llr_.playTimes);
                    createmsg.Add(llr_.maxPower);
                    break;
                case GameKind_Enum.GameKind_GuanDan:
                    createmsg.Add((byte)ter_.playType);
                    if (ter_.playType == TePlayType.Goon)
                    {
                        createmsg.Add(ter_.vectory);
                    }
                    if (ter_.playType == TePlayType.Times)
                    {
                        createmsg.Add(ter_.times);
                        createmsg.Add(ter_.score);
                        createmsg.Add((byte)ter_.cp);
                    }
                    break;
                case GameKind_Enum.GameKind_Mahjong:
                    createmsg.Add(mjr_.times);
                    createmsg.Add(mjr_.maxPower);
                    int playtype = 0;
                    if (mjr_.isAddBet)
                        GameKind.AddFlag(0, ref playtype);
                    if (mjr_.isOtherFour)
                        GameKind.AddFlag(1, ref playtype);
                    if (mjr_.isOneNine)
                        GameKind.AddFlag(2, ref playtype);
                    if (mjr_.isMiddle)
                        GameKind.AddFlag(3, ref playtype);
                    if (mjr_.isSkyGroud)
                        GameKind.AddFlag(4, ref playtype);
                    createmsg.Add((ushort)playtype);
                    break;
            }
               NetWorkClient.GetInstance().SendMsg(createmsg);            GameObject group = friendroomrulepanel_.transform.Find("Right").gameObject;            group.transform.Find("Button_chuangjian").gameObject.GetComponent<Button>().interactable = false;            group.transform.Find("Button_chuangjian_0").gameObject.GetComponent<Button>().interactable = false;            AppointmentDataManager.AppointmentDataInstance().kind = AppointmentKind.From_Moments;        }    }    byte UpdateGameResource()    {        byte gameid = AppointmentDataManager.AppointmentDataInstance().gameid;        byte updatestate = CResVersionCompareUpdate.CheckGameResNeedDownORUpdate(gameid);        if (updatestate != 0)        {            uint tips = 1024;            currentNeedUpdateGameID = gameid;            CCustomDialog.OpenCustomDialogWithTipsID(tips, DownLoadGameResource);        }        return updatestate;    }    void DownLoadGameResource(object param)    {        int select = (int)param;        if (select == 1)        {            if (waitingTips_ == null)                LoadWaitingTipsResource();            waitingTips_.SetActive(true);            GameMain.hall_.CheckGameResourceUpdate((byte)currentNeedUpdateGameID);        }    }    void LoadWaitingTipsResource()    {        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Tips_Waiting");        waitingTips_ = (GameObject)GameMain.instantiate(obj0);        GameObject GameCanvas = GameObject.Find("Canvas/Root");        waitingTips_.transform.SetParent(GameCanvas.transform, false);    }    void RefreshPayInfo(int levelindex)    {        GameObject group = friendroomrulepanel_.transform.Find("Right").gameObject;        byte gameid = AppointmentDataManager.AppointmentDataInstance().gameid;        int power = AppointmentDataManager.AppointmentDataInstance().appointmentcsvs_[gameid].datas[0];        int level = AppointmentDataManager.AppointmentDataInstance().appointmentcsvs_[gameid].datas[levelindex];        int pay4appointment = power * level;        group.transform.Find("Button_chuangjian").gameObject.SetActive(pay4appointment > 0);        group.transform.Find("Button_chuangjian_0").gameObject.SetActive(pay4appointment <= 0);        Text pay = group.transform.Find("ImageBGcost").Find("Textnum").gameObject.GetComponent<Text>();        pay.text = pay4appointment.ToString();

        group.transform.Find("ImageBGcost/ImageIcon_jlb").gameObject.SetActive(true);        group.transform.Find("ImageBGcost/ImageIcon_yj").gameObject.SetActive(false);        playtimesindex_ = (byte)levelindex;    }    void ChangeRuleInfo(int pick, bool ison)    {        currentPickGame_ = pick;        if (ison)        {            CustomAudio.GetInstance().PlayCustomAudio(1003);            GameObject group = friendroomrulepanel_.transform.Find("Right").gameObject;            for (int index = 0; index < 3; index++)            {                GameObject child = group.transform.GetChild(index).gameObject;                child.SetActive(false);            }            GameObject rule = group.transform.GetChild(currentPickGame_).gameObject;            rule.SetActive(true);            switch (currentPickGame_)            {                case 0:                    AppointmentDataManager.AppointmentDataInstance().gameid = (byte)GameKind_Enum.GameKind_LandLords;                    break;                case 1:                    AppointmentDataManager.AppointmentDataInstance().gameid = (byte)GameKind_Enum.GameKind_GuanDan;                    break;
                case 2:
                    AppointmentDataManager.AppointmentDataInstance().gameid = (byte)GameKind_Enum.GameKind_Mahjong;                    break;            }            RefreshPayInfo(1);        }    }    private void OnCloseRulePanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            friendroomrulepanel_.SetActive(false);        }    }    private void OnCloseMemberList(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            playerlistpanel_.SetActive(false);        }    }    private void OnShowMemberList(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {
            CustomAudio.GetInstance().PlayCustomAudio(1002);            RefreshMemberList();            if (main_ == null)                return;            if(playerlistpanel_ == null)                playerlistpanel_ = main_.transform.Find("Pop-up/PlayerList").gameObject;            playerlistpanel_.SetActive(true);        }    }    void RefreshMemberList()    {        if (main_ == null)            return;        if (playerlistpanel_ == null)            playerlistpanel_ = main_.transform.Find("Pop-up/PlayerList").gameObject;        GameObject playerlistbg = playerlistpanel_.transform.Find("Middle/Viewport/Content").gameObject;        GameMain.hall_.ClearChilds(playerlistbg);        memberobjects_.Clear();        foreach (uint key in FriendsMomentsDataMamager.GetFriendsInstance().memberList.Keys)        {            LoadMemberResource(key);        }    }    void LoadMemberResource(uint playerid)    {        if (!FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(playerid))            return;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        playerlistpanel_ = main_.transform.Find("Pop-up/PlayerList").gameObject;        GameObject playerlistbg = playerlistpanel_.transform.Find("Middle/Viewport/Content").gameObject;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("friend_PlayerList");        GameObject item = (GameObject)GameMain.instantiate(obj0);        item.transform.SetParent(playerlistbg.transform, false);        Image icon = item.transform.Find("ImageHeadIcon").gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].url,            FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].memberid,            FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].faceid);        Text name = item.transform.Find("TextName").gameObject.GetComponent<Text>();        if(FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].memberid == FriendsMomentsDataMamager.GetFriendsInstance().hostid)            name.text = "<color=#bf442d>" + FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].memberName + "</color>";
        else
            name.text = FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].memberName;
        Text master = item.transform.Find("TextDashi").gameObject.GetComponent<Text>();        master.text = FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].masterScore.ToString();        Text state = item.transform.Find("TextZhuangtai").gameObject.GetComponent<Text>();        if(FriendsMomentsDataMamager.GetFriendsInstance().memberList[playerid].isonline)            state.text = "<color=#2b8d3b>在线</color>";        else            state.text = "<color=#bf442d>离线</color>";        GameObject kickBtn = item.transform.Find("ButtonKickOut").gameObject;        kickBtn.SetActive(FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId() && playerid != GameMain.hall_.GetPlayerId());        XPointEvent.AutoAddListener(kickBtn, OnKickMember, playerid);        if(!memberobjects_.ContainsKey(playerid))            memberobjects_.Add(playerid, item);    }    //踢人    private void OnKickMember(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint playerid = (uint)button;            kickplayerid = playerid;            string[] param = { playerid.ToString() };            CCustomDialog.OpenCustomDialogWithFormatParams(1638, KickOut, param);        }    }    uint kickplayerid = 0;    void KickOut(object isagree)    {        bool agree = (int)isagree == 1;        if (kickplayerid == 0)        {            CCustomDialog.OpenCustomConfirmUI(1628);            return;        }        if (!agree)            return;        UMessage kickmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_KickOut);        kickmsg.Add(kickplayerid);        kickmsg.Add(FriendsMomentsDataMamager.GetFriendsInstance().momentsID);        NetWorkClient.GetInstance().SendMsg(kickmsg);    }    private void OnExit(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId())                CCustomDialog.OpenCustomDialogWithTipsID(1645, Exit);            else                CCustomDialog.OpenCustomDialogWithTipsID(1637, Exit);        }    }    void Exit(object value)    {        bool yes = (int)value == 1;        if(yes)        {            if (FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId())
            {
                UMessage breakmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_Break);

                breakmsg.Add(GameMain.hall_.GetPlayerData().momentsid);

                NetWorkClient.GetInstance().SendMsg(breakmsg);
            }
            else
            {
                UMessage exitmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_Exit);

                exitmsg.Add(GameMain.hall_.GetPlayerId());
                exitmsg.Add(GameMain.hall_.GetPlayerData().momentsid);

                NetWorkClient.GetInstance().SendMsg(exitmsg);
            }        }    }    private void OnCloseMemberPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            playerlistpanel_ = main_.transform.Find("Pop-up/PlayerList").gameObject;            playerlistpanel_.SetActive(false);        }    }    private void OnCloseAskPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            GameObject askpanel = main_.transform.Find("Pop-up/applyList").gameObject;            askpanel.SetActive(false);        }    }    private void OnOpenAskPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            GameObject askpanel = main_.transform.Find("Pop-up/applyList").gameObject;            askpanel.SetActive(true);            InitAskPanel();        }    }    void InitAskPanel()    {        if (FriendsMomentsDataMamager.GetFriendsInstance().hostid != GameMain.hall_.GetPlayerId())            return;        if (main_ == null)            return;        GameObject BgObj = main_.transform.Find("Pop-up/applyList/Middle/Viewport/Content").gameObject;        foreach (uint key in joinobjects_.Keys)
        {
            if (joinobjects_[key] != null)
            {
                joinobjects_[key].SetActive(false);
                GameMain.safeDeleteObj(joinobjects_[key]);
            }
        }        joinobjects_.Clear();        GameMain.hall_.ClearChilds(BgObj);        foreach (uint key in FriendsMomentsDataMamager.GetFriendsInstance().joinList.Keys)        {            LoadAskItem(key);        }    }    void LoadAskItem(uint playerid)    {        if (!FriendsMomentsDataMamager.GetFriendsInstance().joinList.ContainsKey(playerid))            return;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("friend_applyList");        GameObject item = (GameObject)GameMain.instantiate(obj0);        GameObject BgObj = main_.transform.Find("Pop-up/applyList/Middle/Viewport/Content").gameObject;        item.transform.SetParent(BgObj.transform, false);        MomentsMember member = FriendsMomentsDataMamager.GetFriendsInstance().joinList[playerid];        Image icon = item.transform.Find("ImageHeadIcon").gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(member.url, member.memberid,member.faceid);        Text name = item.transform.Find("TextName").gameObject.GetComponent<Text>();        name.text = member.memberName;        Text master = item.transform.Find("TextDashi").gameObject.GetComponent<Text>();        master.text = member.masterScore.ToString();        GameObject agreebtn = item.transform.Find("Button_yes").gameObject;        XPointEvent.AutoAddListener(agreebtn, OnAgreeJoin, member.memberid);        GameObject refusebtn = item.transform.Find("Button_no").gameObject;        XPointEvent.AutoAddListener(refusebtn, OnRefuseJoin, member.memberid);        if(!joinobjects_.ContainsKey(member.memberid))            joinobjects_.Add(member.memberid, item);    }    private void OnRefuseJoin(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint memberid = (uint)button;            UMessage joinmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_AgreeJoin);            joinmsg.Add(memberid);            joinmsg.Add(GameMain.hall_.GetPlayerData().momentsid);            joinmsg.Add((byte)0);            NetWorkClient.GetInstance().SendMsg(joinmsg);

            DelayJoinPlayer(memberid);
        }    }    void DelayJoinPlayer(uint memberid)
    {
        if (joinobjects_.ContainsKey(memberid))
        {
            if (joinobjects_[memberid] != null)
            {
                joinobjects_[memberid].SetActive(false);
                GameMain.safeDeleteObj(joinobjects_[memberid]);
            }

            joinobjects_.Remove(memberid);
        }

        if (FriendsMomentsDataMamager.GetFriendsInstance().joinList.ContainsKey(memberid))
            FriendsMomentsDataMamager.GetFriendsInstance().joinList.Remove(memberid);

        RefreshJoinSpot();
    }

    private void OnAgreeJoin(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint memberid = (uint)button;            UMessage createmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_AgreeJoin);            createmsg.Add(memberid);            createmsg.Add(GameMain.hall_.GetPlayerData().momentsid);            createmsg.Add((byte)1);            NetWorkClient.GetInstance().SendMsg(createmsg);            DelayJoinPlayer(memberid);        }    }    private void OnSetMoments(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            GameObject setPanel = main_.transform.Find("Pop-up/set").gameObject;            setPanel.SetActive(true);            isopenset = true;        }    }    private void OnCloseSetMoments(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            isopenset = false;        }    }    void MoveSetPanel(float deltatime)    {        if (main_ == null)            return;        GameObject setPanel = main_.transform.Find("Pop-up/set").gameObject;        GameObject menu = setPanel.transform.Find("ButtonGroupMask/ButtonGroup").gameObject;        if (menu.transform.localPosition.y > 207.0f && !isopenset)        {            setPanel.SetActive(false);            return;        }        if (menu.transform.localPosition.y < -4.0f && isopenset)            return;        if (isopenset)            speedforward_.y = -deltatime * 1000.0f;        else            speedforward_.y = deltatime * 1000.0f;                menu.transform.Translate(speedforward_);    }    void InitMainData()    {        Text momentsIDTx = main_.transform.Find("Top/ImageBG_ID/Text_ID").gameObject.GetComponent<Text>();        momentsIDTx.text = FriendsMomentsDataMamager.GetFriendsInstance().momentsID.ToString();        Text momentsNameTx = main_.transform.Find("Top/ImageBG_ID/Text_Name").gameObject.GetComponent<Text>();        momentsNameTx.text = FriendsMomentsDataMamager.GetFriendsInstance().momentsName;        Text selfDiamondTx = main_.transform.Find("Top/Image_DiamondFrame/Text_Diamond").gameObject.GetComponent<Text>();        selfDiamondTx.text = (GameMain.hall_.GetPlayerData().GetCoin() + GameMain.hall_.GetPlayerData().GetDiamond()).ToString();        Text friendsDianmondTx = main_.transform.Find("Top/Image_Diamondfriend/Text_Diamond").gameObject.GetComponent<Text>();        friendsDianmondTx.text = FriendsMomentsDataMamager.GetFriendsInstance().friendDiamond.ToString();
        //Text contentTx = main_.transform.FindChild("middle/ImageBG_notice/Text_notice").gameObject.GetComponent<Text>();
        //contentTx.text = FriendsMomentsDataMamager.GetFriendsInstance().content;

        main_.transform.Find("Pop-up/set/ButtonGroupMask/ButtonGroup/Button_tuichu").            gameObject.SetActive(FriendsMomentsDataMamager.GetFriendsInstance().hostid != GameMain.hall_.GetPlayerId());
        main_.transform.Find("Pop-up/set/ButtonGroupMask/ButtonGroup/Button_jiesan").
            gameObject.SetActive(FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId());        main_.transform.Find("Pop-up/set/ButtonGroupMask/ButtonGroup/Button_shenqing").gameObject.            SetActive(FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId());        InitTables();        RefreshJoinSpot();    }    void RefreshJoinSpot()
    {
        if (main_ == null)
            return;

        GameObject spot = main_.transform.Find("Top/ButtonSet/ImageSpot").gameObject;
        spot.SetActive(FriendsMomentsDataMamager.GetFriendsInstance().joinList.Count != 0 &&
            FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId());

        GameObject nextspot = main_.transform.Find("Pop-up/set/ButtonGroupMask/ButtonGroup/Button_shenqing/ImageSpot").gameObject;
        nextspot.SetActive(FriendsMomentsDataMamager.GetFriendsInstance().joinList.Count != 0 &&
            FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId());
    }    void InitTables()    {
        if (main_ == null)
            return;

        GameObject BgObj = main_.transform.Find("middle/friend_table_Viewport/Content").gameObject;        if (tableobjects_ == null)            tableobjects_ = new Dictionary<uint, GameObject>();        foreach (uint key in tableobjects_.Keys)
        {
            if (tableobjects_[key] != null)
            {
                tableobjects_[key].SetActive(false);
                GameMain.safeDeleteObj(tableobjects_[key]);
            }
        }        tableobjects_.Clear();        GameMain.hall_.ClearChilds(BgObj);        foreach ( uint key in FriendsMomentsDataMamager.GetFriendsInstance().tableList.Keys)        {            LoadTableItem(key);        }    }    void LoadTableItem(uint tableid)    {        if (!FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(tableid))            return;        if (main_ == null)            return;        GameObject BgObj = main_.transform.Find("middle/friend_table_Viewport/Content").gameObject;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("friend_table");        GameObject item = (GameObject)GameMain.instantiate(obj0);        item.transform.SetParent(BgObj.transform, false);        MomentsTable table = FriendsMomentsDataMamager.GetFriendsInstance().tableList[tableid];        Image gameicon = item.transform.Find("GameIcon").gameObject.GetComponent<Image>();        gameicon.sprite = bundle.LoadAsset<Sprite>(CCsvDataManager.Instance.GameDataMgr.GetGameData(table.gameid).GameTextIcon);        Text ruleTx = item.transform.Find("TextRule").gameObject.GetComponent<Text>();        ruleTx.text = table.gamerule;

        if (table.gameid == (byte)GameKind_Enum.GameKind_LandLords)
            item.transform.Find("tableBG/player_3").gameObject.SetActive(false);        uint tempid = tableid;        for (int index = 0; index < table.seats_.Count; index++)        {            int uitemp = index;

            if(table.gameid == (byte)GameKind_Enum.GameKind_LandLords)
            {
                if (index == 2)                    uitemp += 1;
            }
            GameObject playerbg = item.transform.Find("tableBG/player_" + (uitemp + 1).ToString()).gameObject;            if(table.seats_[index].playerid != 0)            {                GameObject iconobj = playerbg.transform.Find("Image_HeadBG").gameObject;                Image icon = iconobj.transform.Find("Image_HeadMask/Image_HeadImage").gameObject.GetComponent<Image>();                if(FriendsMomentsDataMamager.GetFriendsInstance().memberList.ContainsKey(table.seats_[index].playerid))
                {
                    icon.sprite = GameMain.hall_.GetIcon(FriendsMomentsDataMamager.GetFriendsInstance().memberList[table.seats_[index].playerid].url,
                        FriendsMomentsDataMamager.GetFriendsInstance().memberList[table.seats_[index].playerid].memberid,
                        FriendsMomentsDataMamager.GetFriendsInstance().memberList[table.seats_[index].playerid].faceid);
                }                else
                {
                    icon.sprite = GameMain.hall_.GetIcon(otherplayers[table.seats_[index].playerid].url,
                        otherplayers[table.seats_[index].playerid].memberid,
                        otherplayers[table.seats_[index].playerid].faceid);
                }                iconobj.SetActive(true);            }            int temp = index;            GameObject seatBtn = playerbg.transform.Find("seat").gameObject;            XPointEvent.AutoAddListener(seatBtn, OnJoinMomentsTable, tempid);        }        GameObject openbtn = item.transform.Find("ButtonBG/Button_kai").gameObject;        XPointEvent.AutoAddListener(openbtn, OnOpenTableMenu, tempid);        GameObject closebtn = item.transform.Find("ButtonBG/Button_guan").gameObject;        XPointEvent.AutoAddListener(closebtn, OnCloseTableMenu, tempid);        GameObject delaybtn = item.transform.Find("ButtonBG/Button_delete").gameObject;        XPointEvent.AutoAddListener(delaybtn, OnDelayTableMenu, tempid);        GameObject sharebtn = item.transform.Find("ButtonBG/Button_share").gameObject;
        //XPointEvent.AutoAddListener(sharebtn, OnShareTable, tempid);
        sharebtn.SetActive(false);        if (!tableobjects_.ContainsKey(tempid))            tableobjects_.Add(tempid, item);    }    private void OnJoinMomentsTable(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint tableid = (uint)button;            //加入房间            UMessage jointablemsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_JoinFriendsTable);            jointablemsg.Add(GameMain.hall_.GetPlayerId());            jointablemsg.Add(FriendsMomentsDataMamager.GetFriendsInstance().momentsID);            jointablemsg.Add(tableid);            NetWorkClient.GetInstance().SendMsg(jointablemsg);        }    }    private void OnShareTable(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint tableid = (uint)button;
            if (!FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(tableid))
                return;

            //分享
            Player.ShareURLToWechat("http://gdcdn.qpdashi.com",
                CCsvDataManager.Instance.GameDataMgr.GetGameData(AppointmentDataManager.AppointmentDataInstance().gameid).GameName +
                " 房间密码:" + tableid.ToString() + " " + FriendsMomentsDataMamager.GetFriendsInstance().tableList[tableid].gamerule.Substring(3), false);        }    }    private void OnDelayTableMenu(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint tableid = (uint)button;            if (!tableobjects_.ContainsKey(tableid))                return;            if (!FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(tableid))                return;            UMessage closetablemsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_CloseTable);            closetablemsg.Add(GameMain.hall_.GetPlayerId());            closetablemsg.Add(FriendsMomentsDataMamager.GetFriendsInstance().momentsID);            closetablemsg.Add(tableid);            NetWorkClient.GetInstance().SendMsg(closetablemsg);        }    }    void TableMenu(uint tableid, bool isshow)    {        if (tableobjects_ == null)
            tableobjects_ = new Dictionary<uint, GameObject>();        if (!tableobjects_.ContainsKey(tableid))            return;        if (!FriendsMomentsDataMamager.GetFriendsInstance().tableList.ContainsKey(tableid))            return;        GameObject openbtn = tableobjects_[tableid].transform.Find("ButtonBG/Button_kai").gameObject;        openbtn.SetActive(!isshow);        GameObject closebtn = tableobjects_[tableid].transform.Find("ButtonBG/Button_guan").gameObject;        closebtn.SetActive(isshow);        GameObject delaybtn = tableobjects_[tableid].transform.Find("ButtonBG/Button_delete").gameObject;        if (FriendsMomentsDataMamager.GetFriendsInstance().hostid == GameMain.hall_.GetPlayerId())
            delaybtn.SetActive(isshow);        else
            delaybtn.SetActive(false);        GameObject sharebtn = tableobjects_[tableid].transform.Find("ButtonBG/Button_share").gameObject;        sharebtn.SetActive(false);        //sharebtn.SetActive(isshow);    }    private void OnCloseTableMenu(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint tableid = (uint)button;            TableMenu(tableid, false);        }    }    private void OnOpenTableMenu(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint tableid = (uint)button;            TableMenu(tableid, true);        }    }    void InitFriendsEvents()    {        GameObject returnBtn = root_.transform.Find("Top/ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn, OnBack2Hall, null);        GameObject createBtn = root_.transform.Find("middle/Button_chuangjian").gameObject;        XPointEvent.AutoAddListener(createBtn, OnOpenCreatePanel, null);        GameObject createPanel = root_.transform.Find("Pop-up/Create").gameObject;        GameObject createCloseBtn = createPanel.transform.Find("ImageBG/Button_no").gameObject;        XPointEvent.AutoAddListener(createCloseBtn, OnCloseCreatePanel, null);        GameObject createConfirmBtn = createPanel.transform.Find("ImageBG/Button_yes").gameObject;        XPointEvent.AutoAddListener(createConfirmBtn, OnConfirmCreateFriendsMoments, null);        GameObject joinBtn = root_.transform.Find("middle/Button_jiaru").gameObject;        XPointEvent.AutoAddListener(joinBtn, OnJoinMoments, null);        GameObject chargeBtn = root_.transform.Find("Top/Image_DiamondFrame").gameObject;        XPointEvent.AutoAddListener(chargeBtn, GameMain.hall_.Charge, Shop.SHOPTYPE.SHOPTYPE_DIAMOND);    }    string inputText;    void InitNumberPanel()    {        GameObject closeBtn = numberpanel_.transform.Find("ImageBG").Find("Button_close").gameObject;        XPointEvent.AutoAddListener(closeBtn, OnCloseNumberPanel, null);        GameObject buttonsBG = numberpanel_.transform.Find("ImageBG").Find("ImageBG").gameObject;        for (int index = 0; index < 10; index++)        {            GameObject number = buttonsBG.transform.Find("Button_" + index.ToString()).gameObject;            int temp = index;            XPointEvent.AutoAddListener(number, OnClickNumber, temp);        }        GameObject reinput = buttonsBG.transform.Find("Button_delete").gameObject;        XPointEvent.AutoAddListener(reinput, OnClickReinput, null);        GameObject backspace = buttonsBG.transform.Find("Button_backspace").gameObject;        XPointEvent.AutoAddListener(backspace, OnClickBackSpace, null);    }    private void OnCloseNumberPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            numberpanel_.SetActive(false);        }    }    private void OnClickReinput(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            inputText = "";            SetInputText();        }    }    private void OnClickBackSpace(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (inputText.Length == 0)            {                SetInputText();                return;            }            inputText = inputText.Remove(inputText.Length - 1, 1);            SetInputText();        }    }    private void OnClickNumber(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            int number = (int)button;            inputText += number.ToString();            SetInputText();        }    }    void SetInputText()    {        if (numberpanel_ == null)            return;        string oneName = "Text";        for (int index = 0; index < 5; index++)        {            if (index != 0)                oneName = "Text (" + index.ToString() + ")";            Text oneNumber = numberpanel_.transform.Find("ImageBG").Find("InputField").                Find("ImageTextBG").Find(oneName).gameObject.GetComponent<Text>();            if (index >= inputText.Length)                oneNumber.text = "";            else                oneNumber.text = inputText.Substring(index, 1);        }        if (inputText.Length >= 5)        {            uint momentsID = 0;            uint.TryParse(inputText, out momentsID);            SendJoinMsg(momentsID);            inputText = "";            SetInputText();        }    }    void SendJoinMsg(uint momentsID)    {        UMessage joinmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_BRIEFINFO);        joinmsg.Add(GameMain.hall_.GetPlayerId());        joinmsg.Add(momentsID);        NetWorkClient.GetInstance().SendMsg(joinmsg);    }    private void OnJoinMoments(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            numberpanel_ = root_.transform.Find("Pop-up/friend_ID").gameObject;            InitNumberPanel();            numberpanel_.SetActive(true);        }    }    void InitFriendsData()    {        Text diamond = root_.transform.Find("Top/Image_DiamondFrame/Text_Diamond").gameObject.GetComponent<Text>();        diamond.text = (GameMain.hall_.GetPlayerData().GetCoin() + GameMain.hall_.GetPlayerData().GetDiamond()).ToString();    }    void RefreshTime()    {        if (root_ == null)            return;        Text time = root_.transform.Find("Top").Find("Text_time").gameObject.GetComponent<Text>();        time.text = System.DateTime.Now.ToString("HH:mm");    }    public void ShowFriendsMoments()    {        if (GameMain.hall_.GetPlayerData().momentsid == 0)        {            if (root_ == null)                LoadFriendsResource();            InitFriendsData();            root_.SetActive(true);        }        else        {            if (main_ == null)                LoadMainResource();            InitMainData();            main_.SetActive(true);        }    }    private void OnBack2Hall(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            Back2Hall();        }    }    void Back2Hall()    {        if (root_ != null)            root_.SetActive(false);        if (main_ != null)            main_.SetActive(false);        if (GameMain.hall_.contestui_ != null)            GameMain.hall_.contestui_.SetActive(true);    }    private void OnOpenCreatePanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (root_ == null)                LoadFriendsResource();            GameObject createPanel = root_.transform.Find("Pop-up/Create").gameObject;            createPanel.SetActive(true);        }    }    private void OnCloseCreatePanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (root_ == null)                LoadFriendsResource();            GameObject createPanel = root_.transform.Find("Pop-up/Create").gameObject;            createPanel.SetActive(false);        }    }    private void OnConfirmCreateFriendsMoments(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (root_ == null)                LoadFriendsResource();            GameObject createPanel = root_.transform.Find("Pop-up/Create").gameObject;            createPanel.SetActive(false);            InputField contentTx = createPanel.transform.Find("ImageBG/InputField").gameObject.GetComponent<InputField>();            string content = contentTx.text;            if(content.Length == 0 || content.Contains(' '))            {                CCustomDialog.OpenCustomConfirmUI(1635);                return;            }            if(content.Length > 8)
            {
                CCustomDialog.OpenCustomConfirmUI(1643);                return;
            }            UMessage createmsg = new UMessage((uint)GameCity.EMSG_ENUM.Friends_Moments_CM_Create);            createmsg.Add(GameMain.hall_.GetPlayerId());            createmsg.Add(content);            NetWorkClient.GetInstance().SendMsg(createmsg);        }    }    void WaitingPercent()    {        uint percent = DownLoadProcessMgr.Instance.GetDownloadPercent();        if (waitingTips_ != null)        {            Text percentTx = waitingTips_.transform.Find("Text").gameObject.GetComponent<Text>();            percentTx.text = percent.ToString() + "%";        }        if (CGameResDownloadMgr.Instance.isAllGameResHaveDownOver())        {            if (waitingTips_ != null)                waitingTips_.SetActive(false);            if (isUpdateJoin_)            {                if (percent >= 100)                {                    //下载完毕                }            }        }    }    public void RefreshMoney()    {        if (root_ != null)        {            Text diamond = root_.transform.Find("Top").Find("Image_DiamondFrame").Find("Text_Diamond").gameObject.GetComponent<Text>();            diamond.text = (GameMain.hall_.GetPlayerData().GetDiamond() + GameMain.hall_.GetPlayerData().GetCoin()).ToString();        }        if(main_ != null)        {            Text diamond = main_.transform.Find("Top").Find("Image_DiamondFrame").Find("Text_Diamond").gameObject.GetComponent<Text>();            diamond.text = (GameMain.hall_.GetPlayerData().GetDiamond() + GameMain.hall_.GetPlayerData().GetCoin()).ToString();        }    }    public void Update ()    {        float deltatime = Time.deltaTime;        MoveSetPanel(deltatime);        RefreshTime();        WaitingPercent();    }}