using System;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using USocket.Messages;public enum VideoActionInfo_Enum{    //斗地主    VideoActionInfo_Land = 0,    VideoActionInfo_1,//系统改变状态    VideoActionInfo_2,//系统发牌    VideoActionInfo_3,//系统询问是否叫地主    VideoActionInfo_4,//系统让地主获取三张牌    VideoActionInfo_5,//系统询问出牌    VideoActionInfo_6,//玩家回复是否要地主    VideoActionInfo_7,//玩家回复出牌    VideoActionInfo_8,//系统通知结算界面    //掼蛋    VideoActionInfo_Guandan = 100,    VideoActionInfo_101,//系统改变状态    VideoActionInfo_102,//系统发牌    VideoActionInfo_103,//系统让玩家上供    VideoActionInfo_104,//系统通知玩家上供完毕    VideoActionInfo_105,//系统让玩家还贡    VideoActionInfo_106,//系统通知玩家还贡完毕    VideoActionInfo_107,//系统通知换位置    VideoActionInfo_108,//系统通知抗贡    VideoActionInfo_109,//系统通知打开配牌    VideoActionInfo_110,//系统通知出牌    VideoActionInfo_111,//玩家上供牌    VideoActionInfo_112,//玩家还贡    VideoActionInfo_113,//玩家出牌    VideoActionInfo_114,//系统通知结算界面                                   //麻将    VideoActionInfo_Mahjong = 200,    VideoActionInfo_201,//掷骰子    VideoActionInfo_202,//系统发牌    VideoActionInfo_203,//系统通知换牌    VideoActionInfo_204,//系统通知换牌完毕    VideoActionInfo_205,//系统通知定缺    VideoActionInfo_206,//系统通知定缺完毕    VideoActionInfo_207,//系统发一张牌给玩家    VideoActionInfo_208,//玩家出牌    VideoActionInfo_209,//玩家碰杠    VideoActionInfo_210,//别人不抢杠胡就下雨    VideoActionInfo_211,//玩家胡    VideoActionInfo_212,//玩家换牌    VideoActionInfo_213,//补花    //够级    VideoActionInfo_Gouji = 300,    VideoActionInfo_301,//发牌    VideoActionInfo_302,//抗贡    VideoActionInfo_303,//买3    VideoActionInfo_304,//买4    VideoActionInfo_305,//圈贡    VideoActionInfo_306,//点贡    VideoActionInfo_307,//烧贡    VideoActionInfo_308,//闷贡    VideoActionInfo_309,//落贡    VideoActionInfo_310,//革命    VideoActionInfo_311,//要头    VideoActionInfo_312,//宣点    VideoActionInfo_313,//系统通知出牌(烧牌结束)    VideoActionInfo_314,//开始烧(反烧)牌    VideoActionInfo_315,//转换出牌人    VideoActionInfo_316,//玩家出牌    VideoActionInfo_317,//让牌    VideoActionInfo_318,//开点（宣点成功或失败）    //象棋    VideoActionInfo_CChess = 400,    VideoActionInfo_401,//发棋    VideoActionInfo_402,//走棋    VideoActionInfo_end};public class VideoAction{    public uint userId;    public VideoActionInfo_Enum vai;    public List<int> list = new List<int>();}public class GameVideo : MonoBehaviour{    static GameVideo m_Instance;    Transform LobbyUITfm { get; set; }    Transform PlayUITfm { get; set; }    AppointmentRecord m_CurData = null;    const float StepInterval = 2f;    Button m_PauseBtn, m_ContinueBtn, m_LastBtn, m_NextBtn, m_ReplayBtn;    Button[] m_SpeedBtns;    int m_nCurStep = 0;    float m_fSpeed = 1f;    float m_fTimer = 0f;    public bool m_bPause = false;    bool m_bEnd = false;    Dictionary<byte, List<uint>> m_IndexPlayers = new Dictionary<byte, List<uint>>();    List<VideoAction> m_ActionsList = new List<VideoAction>();    void Awake()    {        InitMsgHandle();    }    void InitMsgHandle()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCVideoMsg_SendRoundScoreToClint, HandleGetRoundScore);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCVideoMsg_SendStepInfoToClint, HandleStepInfo);    }    void OnEnd()    {        m_nCurStep = 0;        m_fSpeed = 1f;        m_fTimer = 0f;        m_bPause = false;        m_bEnd = true;        m_ActionsList.Clear();    }    void GameOver()    {        OnEnd();        m_CurData = null;        Destroy(LobbyUITfm.gameObject);        m_IndexPlayers.Clear();    }    void Init()    {        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        GameObject obj = (GameObject)bundle.LoadAsset("Lobby_video");        obj = Instantiate(obj);        LobbyUITfm = obj.transform;        LobbyUITfm.SetParent(GameMain.ddCanvas.transform.Find("Root"), false);        LobbyUITfm.Find("Top/ButtonReturn").GetComponent<Button>().onClick.AddListener(() => OnClickReturn(0));    }    void InitGame()    {        if (PlayUITfm != null)            return;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        Transform canvasTfm = GameObject.Find("Canvas/Root").transform;        if (canvasTfm == null)            return;        GameObject obj = (GameObject)bundle.LoadAsset("Lobby_video_play");        obj = Instantiate(obj);        obj.SetActive(false);        PlayUITfm = obj.transform;        PlayUITfm.SetParent(canvasTfm, false);        PlayUITfm.GetComponent<Button>().onClick.AddListener(()=>OnClickPlayScreenBtn(false));        PlayUITfm.Find("Top/ButtonReturn").GetComponent<Button>().onClick.AddListener(()=>OnClickReturn(1));        Transform tfm = PlayUITfm.Find("bottom");        m_PauseBtn = tfm.Find("Button_pause").GetComponent<Button>();        m_PauseBtn.onClick.AddListener(() => OnClickPlayBtn(0));        m_ContinueBtn = tfm.Find("Button_play").GetComponent<Button>();        m_ContinueBtn.onClick.AddListener(() => OnClickPlayBtn(1));        m_LastBtn = tfm.Find("Button_last").GetComponent<Button>();        m_LastBtn.onClick.AddListener(() => OnClickPlayBtn(2));        m_NextBtn = tfm.Find("Button_next").GetComponent<Button>();        m_NextBtn.onClick.AddListener(() => OnClickPlayBtn(3));        m_ReplayBtn = tfm.Find("Button_playagain").GetComponent<Button>();        m_ReplayBtn.onClick.AddListener(() => OnClickPlayBtn(4));        m_SpeedBtns = tfm.Find("speed").GetComponentsInChildren<Button>(true);        int index = 1;        float speed = 1f;        foreach(Button btn in m_SpeedBtns)        {            float ratio = speed;            int temp = index;            btn.onClick.AddListener(() => OnClickSpeed(ratio, temp));            index++;            speed *= 2f;        }    }    public static GameVideo GetInstance()    {        if (m_Instance == null)            m_Instance = GameMain.Instance.gameObject.AddComponent<GameVideo>();        return m_Instance;    }    public void OnClickWatch(AppointmentRecord record)    {        CustomAudio.GetInstance().PlayCustomAudio(1002);        Init();        m_CurData = record;        UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCVideoMsg_ApplyGetRoundScore);        msg.Add(record.videoes);        HallMain.videotcpclient.SendMsg(msg);    }    void OnClickPlayScreenBtn(bool forceShow)    {        foreach(Transform child in PlayUITfm)        {            child.gameObject.SetActive(forceShow ? true : !child.gameObject.activeSelf);        }    }    void OnClickReturn(int index)//0:lobby 1:inGame    {        CustomAudio.GetInstance().PlayCustomAudio(1002);        if (index == 0)        {            GameOver();        }        else        {            OnEnd();            GameMain.hall_.GameBaseObj.OnVideoReplay();            GameMain.hall_.SwitchToHallScene(true, 5);        }    }    void UpdateBtn()    {        m_PauseBtn.gameObject.SetActive(!m_bPause && !m_bEnd);        m_ContinueBtn.gameObject.SetActive(m_bPause && !m_bEnd);        m_ReplayBtn.gameObject.SetActive(m_bEnd);        m_LastBtn.interactable = m_nCurStep > 0;        m_NextBtn.interactable = m_nCurStep < m_ActionsList.Count;        if (m_bEnd)            OnClickPlayScreenBtn(true);    }    void OnClickPlayBtn(int index)    {        CustomAudio.GetInstance().PlayCustomAudio(1002);        if (index == 0)//pause        {            m_bPause = true;            m_fTimer = 0f;        }        else if (index == 1)//continue        {            m_bPause = false;            m_fTimer = StepInterval;        }        else if (index == 2)//last        {            m_bPause = true;            m_fTimer = 0f;            while (!PlayLast(false) && m_nCurStep != 0) ;        }        else if (index == 3)//next        {            m_bPause = true;            m_fTimer = 0f;            while (!PlayNext(false) && m_nCurStep != m_ActionsList.Count) ;        }        else if(index == 4)//replay        {            m_bEnd = false;            m_bPause = false;            m_fTimer = 0;            m_nCurStep = 0;            GameMain.hall_.GameBaseObj.OnVideoReplay();        }        UpdateBtn();    }    void OnClickSpeed(float speed, int index)    {        CustomAudio.GetInstance().PlayCustomAudio(1002);        m_fSpeed = speed;        m_SpeedBtns[index - 1].gameObject.SetActive(false);        int next = index == m_SpeedBtns.Length ? 0 : index;        m_SpeedBtns[next].gameObject.SetActive(true);    }    public void ShowBegin()    {        InitGame();        PlayUITfm.gameObject.SetActive(true);        m_PauseBtn.gameObject.SetActive(true);        m_ContinueBtn.gameObject.SetActive(false);        for (int i = 0; i < m_SpeedBtns.Length; i++)            m_SpeedBtns[i].gameObject.SetActive(i == 1);        m_LastBtn.interactable = false;        m_NextBtn.interactable = true;        m_nCurStep = 0;        m_fTimer = StepInterval;        m_bPause = m_bEnd = false;        Transform tfm = PlayUITfm.Find("Top");        Text t = tfm.Find("TextRule").GetComponent<Text>();        t.text = m_CurData.gamerule;        t = tfm.Find("TextTime").GetComponent<Text>();        System.DateTime sdt = GameCommon.ConvertLongToDateTime(m_CurData.timeseconds);        t.text = sdt.ToString("yyyy年MM月dd日HH:mm");    }    void Update()    {        if (m_ActionsList.Count == 0 || m_bPause || m_bEnd)            return;        m_fTimer += Time.deltaTime * m_fSpeed;        if (m_fTimer > StepInterval)        {            if (PlayNext(true))                m_fTimer = 0f;        }    }    public float GetStepTime()    {        if (m_bPause)            return 1f;        return StepInterval / m_fSpeed;    }    bool PlayNext(bool updateBtn)    {        if (m_nCurStep == m_ActionsList.Count)            return true;        DebugLog.Log("Next:" + m_nCurStep);        bool res = GameMain.hall_.GameBaseObj.OnVideoStep(m_ActionsList, m_nCurStep);        m_nCurStep++;        m_bEnd = (m_nCurStep == m_ActionsList.Count);        if (updateBtn)            UpdateBtn();        return res;    }    bool PlayLast(bool updateBtn)    {        if (m_nCurStep == 0)            return true;        m_bEnd = false;        m_nCurStep--;        DebugLog.Log("Last:" + m_nCurStep);        bool res = GameMain.hall_.GameBaseObj.OnVideoStep(m_ActionsList, m_nCurStep, true);        if (updateBtn)            UpdateBtn();        return res;    }    bool HandleGetRoundScore(uint _msgType, UMessage _ms)    {        long videoId = _ms.ReadLong();        byte res = _ms.ReadByte();//是否成功 1成功有数据 0没有        if (res == 0)            return false;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return false;        if (!ShowRoundScore(true))            return false;        Transform parent = LobbyUITfm.Find("middle/Viewport_video/Content_video");        GameObject assetObj = (GameObject)bundle.LoadAsset("video_record");        Transform tfm, child;        long time;        Color winCol = new Color(0.851f, 0.231f, 0.165f);        Color loseCol = new Color(0.349f, 0.51f, 0.737f);        byte nRoundNum = _ms.ReadByte();//打了几局        byte nRoleNum = _ms.ReadByte();//几个人        for (byte i = 1; i <= nRoundNum; i++)        {            time = _ms.ReadLong();            tfm = (Instantiate(assetObj)).transform;            tfm.SetParent(parent, false);            Text t = tfm.Find("Textju").GetComponent<Text>();            t.text = i.ToString();            t = tfm.Find("TextTime").GetComponent<Text>();            System.DateTime sdt = GameCommon.ConvertLongToDateTime(time);            t.text = sdt.ToString("yyyy年MM月dd日HH:mm");            uint[] playerIds = new uint[nRoleNum];            byte k = 0;            for (; k < nRoleNum; ++k)            {                uint nUseid = (uint)_ms.ReadInt();                int nScore = _ms.ReadInt();//积分                byte sit = _ms.ReadByte();                if (!m_CurData.result.ContainsKey(nUseid))                    continue;                playerIds[sit] = nUseid;                AppointmentRecordPlayer player = m_CurData.result[nUseid];                child = tfm.Find("playerinfo_" + (k+1));                Image img = child.Find("Image_HeadBG/Image_HeadMask/Image_HeadImage").GetComponent<Image>();                img.sprite = GameMain.hall_.GetIcon(player.url, nUseid, player.faceid);                t = child.Find("TextName").GetComponent<Text>();                t.text = player.playerName;                t = child.Find("TextJifen").GetComponent<Text>();                t.text = GameFunction.FormatCoinText(nScore, true, false);                t.color = nScore > 0 ? winCol : loseCol;            }            m_IndexPlayers.Add(i, new List<uint>(playerIds));            for(; k < tfm.childCount; k++)            {                child = tfm.Find("playerinfo_" + (k+1));                if(child == null)                {                    break;                }                child.gameObject.SetActive(false);            }            byte temp = i;            tfm.Find("Button_start").GetComponent<Button>().onClick.AddListener(() => OnClickStart(videoId, temp));            //tfm.FindChild("Button_share").GetComponent<Button>().onClick.AddListener(() => OnClickShare(videoId, temp));            tfm.Find("Button_share").gameObject.SetActive(false);        }        return true;    }    void OnClickStart(long videoId, byte index)    {        CustomAudio.GetInstance().PlayCustomAudio(1002);        string key = videoId + ":" + index;        List<VideoAction> list = StateStorage.LoadData<List<VideoAction>>(key);        if(list == null || list.Count == 0)        {            UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCVideoMsg_ApplyGetStepInfo);            msg.Add(videoId);            msg.Add(index);            HallMain.videotcpclient.SendMsg(msg);        }        else        {            m_ActionsList = new List<VideoAction>(list);            StartPlay(index);        }    }    void OnClickShare(long videoId, byte index)    {    }    void StartPlay(byte index)    {        HallMain.videotcpclient.CloseNetwork();        ShowRoundScore(false);        GameMain.hall_.EnterGameScene((GameKind_Enum)m_CurData.gameID, GameTye_Enum.GameType_Record, 0,            () =>            {                List<AppointmentRecordPlayer> list = new List<AppointmentRecordPlayer>();                foreach (uint playerId in m_IndexPlayers[index])                    list.Add(m_CurData.result[playerId]);                GameMain.hall_.GameBaseObj.SetupVideo(list);            });    }    public bool ShowRoundScore(bool show)    {        if (LobbyUITfm == null)            return false;        LobbyUITfm.gameObject.SetActive(show);        return true;    }    bool HandleStepInfo(uint _msgType, UMessage _ms)    {        m_ActionsList.Clear();        long nVideoid = _ms.ReadLong();     //录像ID        byte nIndex = _ms.ReadByte();       //第几局        byte res = _ms.ReadByte();          //是否成功 1成功有数据 0没有        if (res == 0)            return false;        ushort nSize = _ms.ReaduShort();    //有多少条数据        for (int i = 0; i < nSize; i++)        {            VideoAction ac = new VideoAction();            float nTime = _ms.ReadSingle();            //发生时间            ac.userId = _ms.ReadUInt();            //做这个事件的useid            ushort nAction = _ms.ReaduShort();         //事件编号            ac.vai = (VideoActionInfo_Enum)nAction;            ushort nParameterNum = _ms.ReaduShort();   //有多少参数            for (int k = 0; k < nParameterNum; k++)            {                int nParameter = _ms.ReadInt();     //                ac.list.Add(nParameter);            }            m_ActionsList.Add(ac);        }        String key = nVideoid + ":" + nIndex;        StateStorage.SaveData(key, m_ActionsList);        StartPlay(nIndex);        return true;    }}