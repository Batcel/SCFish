using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using UnityEngine.EventSystems;using USocket.Messages;using DragonBones;using XLua;public class FlyObjects{    public Vector3 targetPosition;    public bool isUpdate;    public float speed;    public GameObject flyObj;    protected float nearly;    public bool isenddestroy;    public FlyObjects()    {        isUpdate = true;        speed = 10.0f;        nearly = 0.3f;        isenddestroy = false;    }    public void Update(float time)    {        if (!isUpdate)            return;        if (flyObj == null)            return;        Vector3 forward = targetPosition - flyObj.transform.position;        Vector3 unitForward = forward.normalized;        if (NearlyEqual(flyObj.transform.position, targetPosition))        {            isUpdate = false;            if (isenddestroy)                flyObj.SetActive(false);        }        else
        {
            Vector3 deltaPosition = new Vector3(unitForward.x * speed * time, unitForward.y * speed * time, 0.0f);
            flyObj.transform.Translate(deltaPosition);
        }        }    public bool NearlyEqual(Vector3 left, Vector3 right)    {        if ((left.x - right.x <= nearly && left.x - right.x >= -nearly)            && (left.y - right.y <= nearly && left.y - right.y >= -nearly))            return true;        return false;    }    public void SetChipStartPosition(Vector3 position)    {        if (flyObj == null)            return;        flyObj.transform.position = position;    }}public class FlyPokers : FlyObjects{    public static FlyPokers instance_;    private FlyPokers()    {        LoadPokerResource();        isUpdate = false;        flyObj.SetActive(false);        nearly = 1.0f;        speed = 50.0f;    }    public static FlyPokers Instance()    {        if (instance_ == null)            instance_ = new FlyPokers();        return instance_;    }    public void LoadPokerResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            UnityEngine.Object obj0 = bundle.LoadAsset("Image_poker");            flyObj = (GameObject)GameMain.instantiate(obj0);            GameObject background = GameObject.Find("Canvas/Root");            flyObj.transform.SetParent(background.transform, false);        }    }}public class FlyChips : FlyObjects{    List<Sprite> materials;    public byte chipsource;    public byte chiptarget;    int materialIndex_;    public FlyChips()    {        materials = new List<Sprite>();        speed = 15.0f;        LoadChipResource();    }    void LoadChipResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            UnityEngine.Object obj0 = bundle.LoadAsset("Icon_Chip");            flyObj = (GameObject)GameMain.instantiate(obj0);            GameObject background = GameObject.Find("Canvas/Root");            flyObj.transform.SetParent(background.transform.Find("Niu5_MainUI(Clone)").Find("Middle").Find("Chip_Point"), false);            for(int index = 1; index <= 6; index++)            {                Sprite material = bundle.LoadAsset<Sprite>("Niu_icon_cm_" + index.ToString());                materials.Add(material);            }        }    }    public void SetChipMaterial(int index)    {        if (flyObj == null)            return;        Image chip = flyObj.GetComponent<Image>();        chip.sprite = materials[index];        materialIndex_ = index;    }    public int GetChipMaterial()    {        return materialIndex_;    }}[Hotfix]public class BAK_StartGame{    GameObject gameroot_;    GameObject pickroot_;    long currentChip_;    bool isgaming;    Dictionary<int, BAK_ChipsData> CurrentChips_;    Dictionary<int, BAK_ChipsData> LastChips_;    List<FlyChips> flychips_;    System.Random rd = new System.Random(9);    bool isAutoGoon_;    Dictionary<byte, Sprite> pokers_;    GameObject resultPanel_;    public BAK_StartGame(GameObject pickroot)    {        flychips_ = new List<FlyChips>();        pokers_ = new Dictionary<byte, Sprite>();        isAutoGoon_ = false;        LoadBullAllKillGameResource();        InitBullAllKillGameMsg();        InitBossList();        InitChipsToggle();        RefreshGamePlayerInfo();        InitSetPanel();        InitChipButtonEvents();        InitPokers();        InitSeats();        InitBossBtnSprites();        InitBossListEvents();        ShowPokerType(false);        InitChipDatas();        InitRecordPanelEvents();        InitRulePanel();        RefreshRecordPanel();        RefreshPlayerNumber();        LoadAnimateResource();        Start(pickroot);    }    void InitChipDatas()    {        CurrentChips_ = new Dictionary<int, BAK_ChipsData>();        for (byte index = 1; index < 5; index++)        {            byte cindex = index;            CurrentChips_.Add(cindex, new BAK_ChipsData());        }                    LastChips_ = new Dictionary<int, BAK_ChipsData>();        for (byte index = 1; index < 5; index++)        {            byte cindex = index;            LastChips_.Add(cindex, new BAK_ChipsData());        }    }    public void Start(GameObject pickroot)    {        pickroot_ = pickroot;        gameroot_.SetActive(true);        isgaming = true;        bossstate_ = 1;        currentPokerPosition = 0;        sendPokerRound = 0;        currentChip_ = BAK_DataCenter.Instance().chipsdatas[0];        gametime_ = BAK_DataCenter.Instance().ber.stateLastTime;        isSendingPoker = false;        CloseChargePokers();        RefreshGamePanel();    }    public void RefreshGamePanel()    {        SetBossInfo();        RefreshVipSeats();        RefreshPokers();        ResetChipNumber();    }    void RefreshPlayerNumber()    {        Text players = gameroot_.transform.Find("Middle").Find("Seat").            Find("Seat_Otherplayers").Find("TextNum").gameObject.GetComponent<Text>();        players.text = BAK_DataCenter.Instance().ber.playerNumber.ToString();    }    void RefreshVipSeats()    {        for (int index = 1; index <= BAK_DataCenter.Instance().ber.vipSeatInfos.Count; index++)        {            SetSeatInfoByIndex(index);        }    }    void RefreshPokers()    {        for (int index = 0; index < BAK_DataCenter.Instance().ber.pokersNumber; index++)        {            bool isShow = BAK_DataCenter.Instance().ber.roomstate > (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_ChipIn;            SetPokerByIndex(index, isShow);        }    }    public void Update()    {        float time = Time.deltaTime;        UpdateSetPanel(time);        if (!isgaming)            return;        for(int index = 0; index < flychips_.Count; index++)        {            flychips_[index].Update(time);        }        ShowStartTips(time);        SendingPokers();        UpdateGameTime(time);        SeeingChargePoker(time);        UpdateRecordPanel(time);        UpdateRulePanel(time);        UpdateScalePokers(time);        UpdateResultChipMove(time);        FlyPokers.Instance().Update(time);    }    float gametime_;    void UpdateGameTime(float time)    {        gametime_ -= time;        if(gametime_ > 0.0f)            SetTime(gametime_);    }    void InitBullAllKillGameMsg()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_ROOMSTATE, BackChangeRoomState);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_BOSSCHANGE, BackChangeBoss);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_BOSSDOWN, BackDownBoss);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_MAKEFIRSTPOKER, BackMakePokers);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_PUBLISHPOKERS, BackPublishPokers);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_APPLYBEBOSS, BackBecomeBoss);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_APPLYBOSSLIST, BackAskBossList);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_CHIPIN, BackChip);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_PUBLISHCHIPIN, BackPublishChip);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_APPLYSITVIP, BackSitDown);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_FORCELETSTAND, BackForceStandUp);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_APPLYLEAVEROOM, BackExit);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_PUBLISHRESULT, BackResult);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_SM_PUBLISHROLENUM, BackPlayerNumber);    }    List<int> fouritemiswin = new List<int>();    bool BackChangeRoomState(uint _msgType, UMessage msg)    {        byte state = msg.ReadByte();        BAK_DataCenter.Instance().ber.roomstate = state;        CCustomDialog.CloseCustomWaitUI();        if (state == (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_WaitBoss)        {            CCustomDialog.OpenCustomWaitUI(2400);            gametime_ = BAK_DataCenter.Instance().blm.waitRobotTime;            return true;        }        if(state == (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_ChipIn)        {            CloseChargePokers();            isstarttips = true;            gametime_ = BAK_DataCenter.Instance().blm.chipTime;            animate_start.gameObject.SetActive(true);            animate_start.animation.Play("newAnimation");            if (isAutoGoon_)                GoOnChip();            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return false;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1005].audioName);            return true;        }        if(state == (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_GameWait)        {            gametime_ = BAK_DataCenter.Instance().blm.overWaitTime;            fouritemiswin.Clear();            int bossresult = msg.ReadByte();            fouritemiswin.Add(msg.ReadByte() / 100);            fouritemiswin.Add(msg.ReadByte() / 100);            fouritemiswin.Add(msg.ReadByte() / 100);            fouritemiswin.Add(msg.ReadByte() / 100);            PlayWinAnimator();            PlayerTurnOutChip();            ismove = true;        }        return true;    }    float movetime = 2.0f;    float currentmovetime = 0.0f;    bool ismove = false;    int movestep = 1;    void UpdateResultChipMove(float time)    {        if (!ismove)            return;        currentmovetime += time;        if (currentmovetime >= movetime)        {            switch (movestep)            {                case 1:                    //Debug.Log("boss get~~~~~~~");                    BossGetWinChip();                    movestep++;                    currentmovetime = 0.0f;                    break;                case 2:                    //Debug.Log("boss pay~~~~~~");                    BossTurnOutChip();                    movestep++;                    currentmovetime = 0.0f;                    break;                case 3:                    //Debug.Log("player get~~~~~~");                    PlayerGetWinChip();                    movestep = 1;                    ismove = false;                    currentmovetime = 0.0f;                    //SetPickPlayerMoney();                    break;            }        }    }    void PlayerGetWinChip()    {        for (int index = 0; index < fouritemiswin.Count; index++)        {            if (fouritemiswin[index] == 2)            {                int length = flychips_.Count;                for (int chipindex = 0; chipindex < length; chipindex++)                {                    if (flychips_[chipindex].chiptarget == index + 1)                    {                        Vector3 startPosition = new Vector3();                        if (flychips_[chipindex].chipsource == 0)                            startPosition = gameroot_.transform.Find("Bottom").Find("ChouMa").position;                        else if (flychips_[chipindex].chipsource < 5)                            startPosition = gameroot_.transform.Find("Middle").Find("Seat").                                Find("Seat_" + flychips_[chipindex].chipsource.ToString()).position;                        else if (flychips_[chipindex].chipsource == 5)                            startPosition = gameroot_.transform.Find("Middle").Find("Seat").Find("Seat_Otherplayers").position;                        flychips_[chipindex].targetPosition = startPosition;                        flychips_[chipindex].isUpdate = true;                        flychips_[chipindex].isenddestroy = true;                    }                }            }        }    }    void PlayerTurnOutChip()    {        for (int index = 0; index < fouritemiswin.Count; index++)        {            if(fouritemiswin[index] == 1)            {                int length = flychips_.Count;                int chipnumber = 0;                for (int chipindex = 0; chipindex < length; chipindex++)                {                    if (flychips_[chipindex].chiptarget == index + 1)                    {                        for (int outindex = 0;                            outindex < BAK_DataCenter.Instance().pokertypes[BAK_DataCenter.Instance().ber.pokerinfos[(byte)(0)].pokertype].rewardrate;                            outindex++)                        {                            chipnumber++;                            if (chipnumber > 50)                                break;                            CreateFlyChip(flychips_[chipindex].chiptarget, flychips_[chipindex].GetChipMaterial(), flychips_[chipindex].chipsource);                        }                                                }                }            }        }    }    void BossGetWinChip()    {        for (int index = 0; index < fouritemiswin.Count; index++)        {            if (fouritemiswin[index] == 1)            {                int length = flychips_.Count;                for (int chipindex = 0; chipindex < length; chipindex++)                {                    if (flychips_[chipindex].chiptarget == index + 1)                    {                        flychips_[chipindex].targetPosition = gameroot_.transform.Find("Top").Find("DelaerInfo").position;                        flychips_[chipindex].isUpdate = true;                        flychips_[chipindex].isenddestroy = true;                    }                }            }        }    }    void BossTurnOutChip()    {        for (int index = 0; index < fouritemiswin.Count; index++)        {            if (fouritemiswin[index] == 2)            {                int length = flychips_.Count;                int chipnumber = 0;                for (int chipindex = 0; chipindex < length; chipindex++)                {                    if (flychips_[chipindex].chiptarget == index + 1)                    {                        for (int outindex = 0;                            outindex < BAK_DataCenter.Instance().pokertypes[BAK_DataCenter.Instance().ber.pokerinfos[(byte)(index + 1)].pokertype].rewardrate;                            outindex++)                        {                            chipnumber++;                            if (chipnumber > 50)                                break;                            CreateFlyChip(flychips_[chipindex].chiptarget, flychips_[chipindex].GetChipMaterial(), 6, flychips_[chipindex].chipsource);                        }                                                }                }            }        }    }    void PlayWinAnimator()    {        int all = fouritemiswin[0] + fouritemiswin[1] + fouritemiswin[2] + fouritemiswin[3];        if (all == 8)        {            isstarttips = true;            animate_alllose.gameObject.SetActive(true);        }        if (all == 4)        {            isstarttips = true;            animate_allkill.gameObject.SetActive(true);        }        for(int index = 0; index < fouritemiswin.Count; index++)        {            if(fouritemiswin[index] == 2)            {                animate_rewards[index].animation.Play("newAnimation");                animate_rewards[index].gameObject.SetActive(true);            }        }    }    bool BackChangeBoss(uint _msgType, UMessage msg)    {        CCustomDialog.CloseCustomWaitUI();        BAK_DataCenter.Instance().ber.bossid = msg.ReadUInt();        BAK_DataCenter.Instance().ber.bossFaceId = msg.ReadUInt();        BAK_DataCenter.Instance().ber.bossurl = msg.ReadString();        BAK_DataCenter.Instance().ber.bossCarryMoney = msg.ReadLong();        BAK_DataCenter.Instance().ber.bossName = msg.ReadString();        SetBossInfo();        if(BAK_DataCenter.Instance().ber.bossid == GameMain.hall_.GetPlayerId())        {            bossstate_ = 3;            ChangeBossButtonByIndex(bossstate_);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return false;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1004].audioName);            BossTip(true);        }        return true;    }    bool BackDownBoss(uint _msgType, UMessage msg)    {        uint playerid = msg.ReadUInt();        string name = msg.ReadString();        BAK_DataCenter.Instance().ber.bossid = 0;        SetBossInfo();        if(playerid == GameMain.hall_.GetPlayerId())        {            bossstate_ = 1;            ChangeBossButtonByIndex(bossstate_);            BossTip(false);        }        return true;    }    bool isSendingPoker = false;    byte firstPoker;    bool BackMakePokers(uint _msgType, UMessage msg)    {        CloseResultPanel();        ShowPokerType(false);        byte chargePoker = msg.ReadByte();        firstPoker = msg.ReadByte();        currentPokerPosition = firstPoker;        BAK_DataCenter.Instance().ber.roomstate = (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_Init;        ShowChargePoker(chargePoker);        RefreshPokers();        ResetChipNumber();        return true;    }    void ResetChipNumber()    {        for (int index = 1; index <= 4; index++)        {            SetSelfChipNumberByIndex(index, 0);            SetChipNumberByIndex(index, 0);        }    }    float seechargetime = 2.0f;    float currentchargetime = 0.0f;    bool ischarge = false;    void SeeingChargePoker(float time)    {        if (!ischarge)            return;        currentchargetime += time;        if(currentchargetime >= seechargetime)        {            currentchargetime = 0.0f;            ischarge = false;            CloseChargePoker();        }    }    void ShowChargePoker(byte chargePoker)    {        GameObject pokers = gameroot_.transform.Find("Middle").Find("Chip_Point").            Find("poker_paidui").gameObject;        pokers.SetActive(true);        Image poker = pokers.transform.Find("Image_poker (4)").gameObject.GetComponent<Image>();        poker.sprite = pokers_[chargePoker];        BAK_DataCenter.Instance().ber.roomstate = (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_Init;        RefreshPokers();        ischarge = true;    }    void CloseChargePoker()    {        GameObject pokers = gameroot_.transform.Find("Middle").Find("Chip_Point").            Find("poker_paidui").gameObject;        Image poker = pokers.transform.Find("Image_poker (4)").gameObject.GetComponent<Image>();        poker.sprite = pokers_[0];                isSendingPoker = true;    }    void CloseChargePokers()    {        GameObject pokers = gameroot_.transform.Find("Middle").Find("Chip_Point").            Find("poker_paidui").gameObject;        pokers.SetActive(false);    }    int currentPokerPosition;    int sendPokerRound;    int pokertimes_ = 0;    void SendingPokers()    {        //发牌        if (!isSendingPoker)            return;        if (FlyPokers.Instance().isUpdate)        {            if (FlyPokers.Instance().flyObj == null)                FlyPokers.Instance().LoadPokerResource();            return;        }        ShowBackPokerByIndexes(currentPokerPosition, sendPokerRound);        pokertimes_++;        if (pokertimes_ >= 5)        {            sendPokerRound += 1;            pokertimes_ = 0;        }        if (sendPokerRound >= 5)        {            currentPokerPosition = 0;            sendPokerRound = 0;            if (FlyPokers.Instance().flyObj == null)                FlyPokers.Instance().LoadPokerResource();            FlyPokers.Instance().flyObj.SetActive(false);            isSendingPoker = false;            CloseChargePokers();            return;        }        currentPokerPosition += 1;        if (currentPokerPosition >= 5 + firstPoker)            currentPokerPosition = firstPoker;        Vector3 targetPosition = new Vector3();        int tempPosition = currentPokerPosition;        if (tempPosition >= 5)            tempPosition -= 5;        string pokerName = "";        if(sendPokerRound > 0)            pokerName = " (" + sendPokerRound.ToString() + ")";        if (tempPosition == 0)        {            targetPosition = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("poker_Zhuangjia").Find("Image_poker" + pokerName).position;        }        else        {            targetPosition = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("Button_" + tempPosition.ToString()).            Find("poker").Find("Image_poker" + pokerName).position;        }        if (FlyPokers.Instance().flyObj == null)            FlyPokers.Instance().LoadPokerResource();        FlyPokers.Instance().flyObj.SetActive(true);        ResetFlyPokers(targetPosition);    }    void ResetFlyPokers(Vector3 tposition)    {        Vector3 startPosition = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("poker_paidui").position;        FlyPokers.Instance().isUpdate = true;        FlyPokers.Instance().SetChipStartPosition(startPosition);        FlyPokers.Instance().targetPosition = tposition;    }    bool BackPublishPokers(uint _msgType, UMessage msg)    {        BAK_DataCenter.Instance().ber.pokersNumber = msg.ReadByte();        for(byte index = 0; index < BAK_DataCenter.Instance().ber.pokersNumber; index++)        {            byte pokerNo = msg.ReadByte();            BAK_DataCenter.Instance().ber.pokerinfos[pokerNo].pokertype = msg.ReadByte();            byte pokerSum = msg.ReadByte();            BAK_DataCenter.Instance().ber.pokerinfos[pokerNo].pokers.Clear();            for (int pokerindex = 0; pokerindex < pokerSum; pokerindex++)            {                BAK_DataCenter.Instance().ber.pokerinfos[pokerNo].pokers.Add( msg.ReadByte() );            }            string pokertype = BAK_DataCenter.Instance().pokertypes[BAK_DataCenter.Instance().ber.pokerinfos[pokerNo].pokertype].pokertype;            pokertype = pokertype + "x" + BAK_DataCenter.Instance().pokertypes[BAK_DataCenter.Instance().ber.pokerinfos[pokerNo].pokertype].rewardrate.ToString();            if (pokerNo == 0)                SetBossPokerType(pokertype);            else                SetPokerTypeByIndex(pokerNo, pokertype);            //ShowPokerType(true);        }        BAK_DataCenter.Instance().ber.roomstate = (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_OpenPokers;        isUpdateScalePokers = true;        pokersIndex = 1;        return true;    }    bool isUpdateScalePokers = false;    Vector3 scaleSpeed = new Vector3(-2.5f, 0.0f, 0.0f);    int pokersIndex;    void UpdateScalePokers(float time)    {        if (!isUpdateScalePokers)            return;        int index = pokersIndex % 5;        GameObject pokerBG = null;        if (index == 0)            pokerBG = gameroot_.transform.Find("Middle").Find("Chip_Point").                Find("poker_Zhuangjia").gameObject;        else            pokerBG = gameroot_.transform.Find("Middle").Find("Chip_Point").                Find("Button_" + index.ToString()).Find("poker").gameObject;        for (int pokerindex = 0; pokerindex < 5; pokerindex++)        {            string pokerName = "";            if (pokerindex > 0)                pokerName = " (" + pokerindex.ToString() + ")";            GameObject poker = pokerBG.transform.Find("Image_poker" + pokerName).gameObject;            poker.transform.localScale += scaleSpeed * time;            if (poker.transform.localScale.x <= 0.0f)            {                //RefreshPokers();                SetPokerByIndex(index, true);                scaleSpeed.x = 2.5f;            }            if (poker.transform.localScale.x >= 1.0f)            {                scaleSpeed.x = -2.5f;                                for (int tpokerindex = 0; tpokerindex < 5; tpokerindex++)                {                    string tpokerName = "";                    if (tpokerindex > 0)                        tpokerName = " (" + tpokerindex.ToString() + ")";                    GameObject tpoker = pokerBG.transform.Find("Image_poker" + tpokerName).gameObject;                    tpoker.transform.localScale = new Vector3(1.0f, 1.0f, 1.0f);                }                PlayPokerTypeAudioByIndex(BAK_DataCenter.Instance().ber.pokerinfos[(byte)index].pokertype);                ShowPokerTypeByIndex(true, index);                pokersIndex++;                if(pokersIndex >= 6)                {                    isUpdateScalePokers = false;                }                                }        }    }    void PlayPokerTypeAudioByIndex(int index)    {        int audiokey = 0;        if (index <= 10)            audiokey = 1008 + index;        else            audiokey = 1003 + index;        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata == null)            return;        AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[audiokey].audioName);    }    bool BackBecomeBoss(uint _msgType, UMessage msg)    {        byte bossstate = msg.ReadByte();        byte nState = msg.ReadByte();        if(nState == 0)        {            if (bossstate == 1)                bossstate_ = 2;            else if (bossstate == 2)                bossstate_ = 1;            else if (bossstate == 3)                bossstate_ = 4;            else if (bossstate == 4)                bossstate_ = 3;            ChangeBossButtonByIndex(bossstate_);        }        else        {            CCustomDialog.OpenCustomConfirmUIWithFormatParam(2408, BAK_DataCenter.Instance().blm.levelconfig[1].bossMoney);        }        return true;    }        void BossTip(bool isboss)    {        GameObject bosstip = gameroot_.transform.Find("Pop-up").Find("Tip_Dealer").gameObject;        bosstip.SetActive(isboss);    }    bool BackAskBossList(uint _msgType, UMessage msg)    {        BAK_DataCenter.Instance().ReadBossListInfoFromServer(msg);        ShowBossList();        return true;    }    void InitBossListEvents()    {        GameObject btnclose = gameroot_.transform.Find("Pop-up").            Find("DealerList").Find("Image_BG").Find("ButtonClose").gameObject;        XPointEvent.AutoAddListener(btnclose, CloseBossList, null);    }    void CloseBossList(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            GameObject bosslist = gameroot_.transform.Find("Pop-up").Find("DealerList").gameObject;            bosslist.SetActive(false);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void ShowBossList()    {        RefreshBossList();        GameObject bosslist = gameroot_.transform.Find("Pop-up").Find("DealerList").gameObject;        bosslist.SetActive(true);    }    void ClearChilds(GameObject obj)    {        int count = obj.transform.childCount;        for (int index = 0; index < count; index++)        {            GameMain.safeDeleteObj(obj.transform.GetChild(0).gameObject);        }    }    void RefreshBossList()    {        GameObject background = gameroot_.transform.Find("Pop-up").Find("DealerList").            Find("Image_BG").Find("Viewport_DealerList").Find("Content_DealerList").gameObject;        ClearChilds(background);        foreach(uint key in BAK_DataCenter.Instance().bbl.bossinfos.Keys)        {            LoadBossListItemResource(BAK_DataCenter.Instance().bbl.bossinfos[key]);        }    }    GameObject LoadBossListItemResource(BAKBossInfo bossinfo)    {        GameObject result = null;        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return result;            UnityEngine.Object obj0 = bundle.LoadAsset("DealerList");            result = (GameObject)GameMain.instantiate(obj0);            GameObject background = gameroot_.transform.Find("Pop-up").Find("DealerList").                Find("Image_BG").Find("Viewport_DealerList").Find("Content_DealerList").gameObject;            result.transform.SetParent(background.transform, false);            Image icon = result.transform.Find("touxiangkuang").Find("tongxiang").gameObject.GetComponent<Image>();            icon.sprite = GameMain.hall_.GetIcon(bossinfo.bossurl, bossinfo.bossid, (int)bossinfo.bossfaceid);            Text name = result.transform.Find("touxiangkuang").Find("name").gameObject.GetComponent<Text>();            name.text = bossinfo.bossname;            Text coin = result.transform.Find("jinbi").Find("jinbishu").gameObject.GetComponent<Text>();            coin.text = bossinfo.bossmoney.ToString();        }        return result;    }    void ChangeBossButtonByIndex(byte index)    {        Image button = gameroot_.transform.Find("Bottom").Find("Button_ZuoZhuang").gameObject.GetComponent<Image>();        button.sprite = bossbuttons_[index];    }    void LoadBullAllKillGameResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            UnityEngine.Object obj0 = bundle.LoadAsset("Niu5_MainUI");            gameroot_ = (GameObject)GameMain.instantiate(obj0);            GameObject background = GameObject.Find("Canvas/Root");            gameroot_.transform.SetParent(background.transform, false);            UnityEngine.Object obj1 = bundle.LoadAsset("Niu5_Result");            resultPanel_ = (GameObject)GameMain.instantiate(obj1);            resultPanel_.transform.SetParent(background.transform, false);            resultPanel_.SetActive(false);        }    }    void RefreshGamePlayerInfo()    {        GameObject playerBG = gameroot_.transform.Find("Bottom").            Find("PlayerInfo").gameObject;        Image icon = playerBG.transform.Find("Head").Find("HeadMask").            Find("ImageHead").gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(GameMain.hall_.GetPlayerData().GetPlayerIconURL(), GameMain.hall_.GetPlayerData().GetPlayerID(),            (int)GameMain.hall_.GetPlayerData().PlayerIconId);        Text playername = playerBG.transform.Find("TextName").gameObject.GetComponent<Text>();        playername.text = GameMain.hall_.GetPlayerData().GetPlayerName();        Text coin = playerBG.transform.Find("Image_coinframe").            Find("Text_Coin").gameObject.GetComponent<Text>();
        //coin.text = GameMain.hall_.GetPlayerData().GetCoin().ToString();
        coin.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();        SetPlayerCoin();    }    void SetPlayerCoin()    {        if (gameroot_ == null)            return;        GameObject playerBG = gameroot_.transform.Find("Bottom").            Find("PlayerInfo").gameObject;        Text coin = playerBG.transform.Find("Image_coinframe").            Find("Text_Coin").gameObject.GetComponent<Text>();        //coin.text = GameMain.hall_.GetPlayerData().GetCoin().ToString();        coin.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();    }    public void SetPlayerCoinByRedBag(long addmoney)    {        if (gameroot_ == null)            return;        GameObject playerBG = gameroot_.transform.Find("Bottom").            Find("PlayerInfo").gameObject;        Text coinTx = playerBG.transform.Find("Image_coinframe").            Find("Text_Coin").gameObject.GetComponent<Text>();        long coin;        long.TryParse(coinTx.text, out coin);        coin += addmoney;        coinTx.text = coin.ToString();    }    void InitBossList()    {        GameObject bosslist = gameroot_.transform.Find("Bottom").Find("Button_DelaerList").gameObject;        XPointEvent.AutoAddListener(bosslist, OnShowBossList, null);        GameObject ask4boss = gameroot_.transform.Find("Bottom").Find("Button_ZuoZhuang").gameObject;        XPointEvent.AutoAddListener(ask4boss, OnAsk4Boss, null);    }    void OnShowBossList(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {
            CustomAudio.GetInstance().PlayCustomAudio(1002);            UMessage ask4bosslist = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_CM_APPLYBOSSLIST);            ask4bosslist.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(ask4bosslist);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    byte bossstate_;    Dictionary<byte, Sprite> bossbuttons_;    void OnAsk4Boss(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            UMessage ask4boss = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_CM_APPLYBEBOSS);            ask4boss.Add(GameMain.hall_.GetPlayerId());            ask4boss.Add(bossstate_);            HallMain.SendMsgToRoomSer(ask4boss);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void InitBossBtnSprites()    {        bossbuttons_ = new Dictionary<byte, Sprite>();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            for(int index = 1; index < 5; index++)            {                Sprite button = bundle.LoadAsset<Sprite>("Bj_ZuoZhuan_" + index.ToString());                byte buttonindex = (byte)index;                bossbuttons_.Add(buttonindex, button);            }        }    }    void InitChipsToggle()    {        GameObject chipsBtnBG = gameroot_.transform.Find("Bottom").Find("ChouMa_new").gameObject;        for(int index = 0; index < 6; index++)        {            string buttonName = "Button";            if (index > 0)                buttonName += " (" + index.ToString() + ")";            GameObject chipBtn = chipsBtnBG.transform.Find(buttonName).gameObject;            byte buttonIndex = (byte)index;            XPointEvent.AutoAddListener(chipBtn, OnChipClick, buttonIndex);            Text chipNumber = chipsBtnBG.transform.Find(buttonName).Find("TextNum").gameObject.GetComponent<Text>();            if(BAK_DataCenter.Instance().chipsdatas[index] < 10000)                chipNumber.text = BAK_DataCenter.Instance().chipsdatas[index].ToString();            else                chipNumber.text = (BAK_DataCenter.Instance().chipsdatas[index] / 10000).ToString() + "万";        }        GameObject goonChip = gameroot_.transform.Find("Bottom").Find("Button_Xuya").gameObject;        XPointEvent.AutoAddListener(goonChip, OnGoOnChip, null);        Toggle isauto = gameroot_.transform.Find("Bottom").Find("Toggle_zidong").gameObject.GetComponent<Toggle>();        isauto.onValueChanged.AddListener(delegate (bool call) { isAutoGoon_ = call; });    }    void ShowButtonEffectByIndex(int showindex)    {        GameObject chipsBtnBG = gameroot_.transform.Find("Bottom").Find("ChouMa_new").gameObject;        for (int index = 0; index < 6; index++)        {            string buttonName = "Button";            if (index > 0)                buttonName += " (" + index.ToString() + ")";            GameObject btnline = chipsBtnBG.transform.Find(buttonName).Find("ImageLine").gameObject;            if (index == showindex)                btnline.SetActive(true);            else                btnline.SetActive(false);        }    }    void OnChipClick(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            byte index = (byte)button;            currentChip_ = BAK_DataCenter.Instance().chipsdatas[(int)index];            witchChip_ = index;            ShowButtonEffectByIndex((int)index);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void OnGoOnChip(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            Toggle isauto = gameroot_.transform.Find("Bottom").Find("Toggle_zidong").gameObject.GetComponent<Toggle>();            isauto.isOn = false;            GoOnChip();            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void GoOnChip()    {        foreach (int key in LastChips_.Keys)        {            UMessage chipmessage = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_CM_CHIPIN);            chipmessage.Add(GameMain.hall_.GetPlayerId());            chipmessage.Add(LastChips_[key].selfchip);            chipmessage.Add((byte)key);            chipmessage.Add(witchChip_);            chipmessage.Add((byte)2);            HallMain.SendMsgToRoomSer(chipmessage);        }    }    void IfSelfInVip()    {        foreach (byte key in BAK_DataCenter.Instance().ber.vipSeatInfos.Keys)        {            if(BAK_DataCenter.Instance().ber.vipSeatInfos[key].playerid == GameMain.hall_.GetPlayerId())                SetSeatCoinByIndex(BAK_DataCenter.Instance().ber.vipSeatInfos[key].seatNo, true);        }    }    bool BackChip(uint _msgType, UMessage msg)    {        byte issuccess = msg.ReadByte();        if(issuccess == 0)        {            byte index = msg.ReadByte();            CurrentChips_[index].chipIndex = index;            GameMain.hall_.GetPlayerData().SetDiamond((uint)(msg.ReadLong()));            CurrentChips_[index].totalchip = msg.ReadLong();            CurrentChips_[index].selfchip = msg.ReadLong();            long currentChip = msg.ReadLong();            byte thisChip = msg.ReadByte();            byte chipnumber = msg.ReadByte();            SetChipNumberByIndex(index, CurrentChips_[index].totalchip);            SetSelfChipNumberByIndex(index, CurrentChips_[index].selfchip);            if(chipnumber == 1)                CreateFlyChip(index, thisChip, 0);            else            {                for (int chipindex = BAK_DataCenter.Instance().chipsdatas.Count - 1; chipindex >= 0; chipindex--)                {                    chipnumber = CaculateChipTimes(currentChip, chipindex);                    for (byte cn = 0; cn < chipnumber; cn++)                        CreateFlyChip(index, chipindex, 0);                    currentChip = currentChip % BAK_DataCenter.Instance().chipsdatas[chipindex];                }            }            SetPlayerCoin();            IfSelfInVip();        }        else        {            switch(issuccess)            {                case 5:                    CCustomDialog.OpenCustomConfirmUI(2406);                    break;                case 7:                    CCustomDialog.OpenCustomConfirmUI(2407);                    break;                case 8:                    CCustomDialog.OpenCustomConfirmUI(2418);                    break;                case 11:                    break;                case 12:
                    //CCustomDialog.OpenCustomConfirmUI(2415);
                    CRollTextUI.Instance.AddVerticalRollText(2415);                    break;                case 13:
                    //CCustomDialog.OpenCustomConfirmUI(2414);
                    CRollTextUI.Instance.AddVerticalRollText(2414);                    break;                case 14:                    CCustomDialog.OpenCustomConfirmUI(2407);                    break;            }        }                return true;    }    byte CaculateChipTimes(long selfchip, int index)    {        byte result = 0;        result = (byte)(selfchip / BAK_DataCenter.Instance().chipsdatas[index]);        return result;    }    bool BackPublishChip(uint _msgType, UMessage msg)    {        byte index = msg.ReadByte();        CurrentChips_[index].totalchip = msg.ReadLong();        byte vip = msg.ReadByte();        long vipLeftCoin = msg.ReadLong();        long currentchipcoin = msg.ReadLong();        byte thisChip = msg.ReadByte();        byte chipnumber = msg.ReadByte();        SetChipNumberByIndex(index, CurrentChips_[index].totalchip);        if (vip == 111)        {            if(chipnumber == 1)                CreateFlyChip(index, thisChip, 5);            else            {                for (int chipindex = BAK_DataCenter.Instance().chipsdatas.Count - 1; chipindex >= 0; chipindex--)                {                    chipnumber = CaculateChipTimes(currentchipcoin, chipindex);                    for (byte cn = 0; cn < chipnumber; cn++)                        CreateFlyChip(index, chipindex, 5);                    currentchipcoin = currentchipcoin % BAK_DataCenter.Instance().chipsdatas[chipindex];                }            }        }        else        {            if (chipnumber == 1)                    CreateFlyChip(index, thisChip, vip);                else            {                for (int chipindex = BAK_DataCenter.Instance().chipsdatas.Count - 1; chipindex >= 0; chipindex--)                {                    chipnumber = CaculateChipTimes(currentchipcoin, chipindex);                    for (byte cn = 0; cn < chipnumber; cn++)                        CreateFlyChip(index, chipindex, vip);                    currentchipcoin = currentchipcoin % BAK_DataCenter.Instance().chipsdatas[chipindex];                }            }            SetSeatCoinByIndex(index);        }        return true;    }    void SetBossInfo()    {        GameObject bossBG = gameroot_.transform.Find("Top").Find("DelaerInfo").gameObject;        if (BAK_DataCenter.Instance().ber.bossid == 0)        {            bossBG.SetActive(false);            return;        }        bossBG.SetActive(true);        Image bossIcon = bossBG.transform.Find("Head").Find("HeadMask").            Find("ImageHead").gameObject.GetComponent<Image>();        bossIcon.sprite = GameMain.hall_.GetIcon(BAK_DataCenter.Instance().ber.bossurl, BAK_DataCenter.Instance().ber.bossid, (int)BAK_DataCenter.Instance().ber.bossFaceId);        Text bossName = bossBG.transform.Find("TextNameZJ").Find("TextName").gameObject.GetComponent<Text>();        bossName.text = BAK_DataCenter.Instance().ber.bossName;        SetBossCoin();    }    void SetBossCoin(BAKResultMsg brm = null)    {        GameObject bossBG = gameroot_.transform.Find("Top").Find("DelaerInfo").gameObject;        Text bossCoin = bossBG.transform.Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        if (brm == null)            bossCoin.text = BAK_DataCenter.Instance().ber.bossCarryMoney.ToString();        else            bossCoin.text = brm.bossmoney.ToString();    }    Vector3 setpanelspeed = new Vector3(0.0f, 10.0f, 0.0f);    bool isshowsetpanel = false;    bool isupdatesetpanel = false;    void InitSetPanelEvents()    {        Slider music = gameroot_.transform.Find("Pop-up").Find("Set").Find("ImageBG").Find("Slider_Music").gameObject.GetComponent<Slider>();        music.onValueChanged.AddListener(delegate (float value) { AudioManager.Instance.MusicVolume = value; });        Slider sound = gameroot_.transform.Find("Pop-up").Find("Set").Find("ImageBG").Find("Slider_Sound").gameObject.GetComponent<Slider>();        sound.onValueChanged.AddListener(delegate (float value) { AudioManager.Instance.SoundVolume = value; });        GameObject setok = gameroot_.transform.Find("Pop-up").Find("Set").Find("ImageBG").Find("ButtonOk").gameObject;        XPointEvent.AutoAddListener(setok, OnCloseAudioSet, null);    }    void InitSetPanel()    {        GameObject menuBtn = gameroot_.transform.Find("Top").Find("ButtonExpand").gameObject;        XPointEvent.AutoAddListener(menuBtn, OnClickMenuBtn, null);        GameObject setok = gameroot_.transform.Find("Top").Find("ButtonBG/UiRootBG_Button").gameObject;        XPointEvent.AutoAddListener(setok, OnCloseSetPanel, null);        isshowsetpanel = false;        isupdatesetpanel = false;        GameObject setBtn = gameroot_.transform.Find("Top").Find("ButtonBG").Find("ButtonGroupMask").            Find("ButtonGroup").Find("Button_Set").gameObject;        XPointEvent.AutoAddListener(setBtn, OnClickSetBtn, null);        GameObject exitBtn = gameroot_.transform.Find("Top").Find("ButtonBG").Find("ButtonGroupMask").            Find("ButtonGroup").Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(exitBtn, OnClickExitBtn, null);        InitSetPanelEvents();    }    void OnClickMenuBtn(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            isshowsetpanel = true;            isupdatesetpanel = true;            ShowSetPanel();            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void OnClickSetBtn(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            gameroot_.transform.Find("Pop-up").Find("Set").gameObject.SetActive(true);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void OnCloseAudioSet(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            gameroot_.transform.Find("Pop-up").Find("Set").gameObject.SetActive(false);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void OnCloseSetPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            isshowsetpanel = false;            isupdatesetpanel = true;            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void CloseSetPanel()    {        GameObject setpanel = gameroot_.transform.Find("Top").Find("ButtonBG").gameObject;        setpanel.SetActive(false);    }    void ShowSetPanel()    {        GameObject setpanel = gameroot_.transform.Find("Top").Find("ButtonBG").gameObject;        setpanel.SetActive(true);    }    void OnClickExitBtn(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            UMessage exitmsg =  new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_CM_APPLYLEAVEROOM);            exitmsg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(exitmsg);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    bool BackExit(uint _msgType, UMessage msg)    {        byte state = msg.ReadByte();        if(state == 0)        {            CCustomDialog.OpenCustomConfirmUI(2206);        }        else        {            Exit();
        }        return true;    }    public void Exit()
    {
        if (pickroot_ != null)
            pickroot_.SetActive(true);
        gameroot_.SetActive(false);
        isshowsetpanel = false;
        isupdatesetpanel = true;
        CloseResultPanel();
        ClearChipObjects();
        CCustomDialog.CloseCustomWaitUI();
        //RefreshPickPlayerInfo();

        GameMain.safeDeleteObj(FlyPokers.Instance().flyObj);
        isgaming = false;
        witchChip_ = 0;
        currentChip_ = BAK_DataCenter.Instance().chipsdatas[0];

        GameMain.hall_.SwitchToHallScene();

        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);
        if (gamedata == null)
            return;
        AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);
        //FlyPokers.instance_ = null;
    }    void RefreshPickPlayerInfo()    {        Image icon = pickroot_.transform.Find("Bottom").Find("PlayerInfoBG").            Find("Image_HeadFram").Find("Image_Mask").Find("Image_Head").            gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(GameMain.hall_.GetPlayerData().GetPlayerIconURL(), GameMain.hall_.GetPlayerId(),             (int)GameMain.hall_.GetPlayerData().PlayerIconId);        Text playername = pickroot_.transform.Find("Bottom").Find("PlayerInfoBG").            Find("TextName").gameObject.GetComponent<Text>();        playername.text = GameMain.hall_.GetPlayerData().GetPlayerName();        Text diamond = pickroot_.transform.Find("Bottom").Find("Image_DiamondFrame").            Find("Text_Diamond").gameObject.GetComponent<Text>();        diamond.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();        //SetPickPlayerMoney();    }    void SetPickPlayerMoney()    {        Text coin = pickroot_.transform.Find("Bottom").Find("Image_coinframe").            Find("Text_Coin").gameObject.GetComponent<Text>();
        //coin.text = GameMain.hall_.GetPlayerData().GetCoin().ToString();
        coin.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();    }    bool BackPlayerNumber(uint _msgType, UMessage msg)    {        BAK_DataCenter.Instance().ber.playerNumber = msg.ReadInt();        RefreshPlayerNumber();        return true;    }    bool BackResult(uint _msgType, UMessage msg)    {        BAKResultMsg brm = new BAKResultMsg();        brm.ReadResultMsg(msg);        ShowResultPanel(brm);        return true;    }    void ShowResultPanel(BAKResultMsg brm)    {        SetResultPokerType(brm);        SetResultSortInfo(brm);        resultPanel_.SetActive(true);        ClearChipObjects();        SetPlayerCoin();        SetBossCoin(brm);        IfSelfInVip();        if (brm.selfChangemoney > 0)        {            isstarttips = true;            //animate_result.gameObject.SetActive(true);            //animate_result.animation.Play("chuchang");            animate_result.SetActive(true);        }    }    void ClearChipObjects()    {        for(int index = 0; index < flychips_.Count; index++)        {            GameMain.safeDeleteObj(flychips_[index].flyObj);            flychips_[index] = null;        }        flychips_.Clear();    }    void SetResultPokerType(BAKResultMsg brm)    {        int nWin = 0;        GameObject pokerTypeBG = resultPanel_.transform.Find("ImageBG").            Find("ImageBG_paixing").Find("Result_paixing").gameObject;        for(int index = 0; index < brm.resultlength + 1; index++)        {            string name = "";            if (index == 0)                name = "paixing_zhuang";            else                name = "paixing_" + index.ToString();            GameObject pokersBG = pokerTypeBG.transform.Find(name).Find("poker").gameObject;            for (byte pindex = 0; pindex < 5; pindex++)            {                string pokerName = "";                if (pindex == 0)                    pokerName = "Image_poker";                else                    pokerName = "Image_poker (" + pindex.ToString() + ")";                Image poker = pokersBG.transform.Find(pokerName).gameObject.GetComponent<Image>();                poker.sprite = pokers_[BAK_DataCenter.Instance().ber.pokerinfos[(byte)index].pokers[pindex]];            }            Text pokertypeTx = pokerTypeBG.transform.Find(name).Find("poker").Find("Text_paixing").gameObject.GetComponent<Text>();            string pokertype = BAK_DataCenter.Instance().pokertypes[brm.gameresulttypes[index]].pokertype;            pokertype = pokertype + "x" + BAK_DataCenter.Instance().pokertypes[brm.gameresulttypes[index]].rewardrate.ToString();            pokertypeTx.text = pokertype;            Text result = pokerTypeBG.transform.Find(name).Find("Text_Result").gameObject.GetComponent<Text>();            Gradient recordGradient = result.gameObject.GetComponent<Gradient>();            if (index == 0)            {                if (brm.bossChangeMoney < 0)                {                    result.text = "输";                    recordGradient.EndColor = Color.gray;                }                 if (brm.bossChangeMoney > 0)                {                    result.text = "赢";                    recordGradient.EndColor = Color.yellow;                }            }            else            {                bool isWin = brm.gameresults[index - 1] / 100 == 2;                if (!isWin)                {                    result.text = "输";                    recordGradient.EndColor = Color.gray;                }                else                {                    result.text = "赢";                    GameKind.AddFlag(index, ref nWin);                    recordGradient.EndColor = Color.yellow;                }            }        }        BAK_DataCenter.Instance().ber.records.Insert(0, (byte)nWin);        if (BAK_DataCenter.Instance().ber.records.Count > 10)            BAK_DataCenter.Instance().ber.records.Remove(BAK_DataCenter.Instance().ber.records[BAK_DataCenter.Instance().ber.records.Count - 1]);        Text selfGetMoney = resultPanel_.transform.Find("ImageBG").            Find("ImageBG_paixing").Find("Image_sum").            Find("Text_sum").gameObject.GetComponent<Text>();        string selfChangeMoneyText = "";        if(brm.selfChangemoney >= 1000000 || brm.selfChangemoney <= -1000000)            selfChangeMoneyText = (brm.selfChangemoney / 10000).ToString() + "万";        else            selfChangeMoneyText = brm.selfChangemoney.ToString();        if (brm.selfChangemoney < 0)            selfGetMoney.text = selfChangeMoneyText;        else        {            selfGetMoney.text = "+" + selfChangeMoneyText;            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1006].audioName);        }    }    void SetResultSortInfo(BAKResultMsg brm)    {        GameObject background = resultPanel_.transform.Find("ImageBG").            Find("ImageBG_zong").Find("Result_zong_Viewport").            Find("Result_zong_Content").gameObject;        ClearChilds(background);        for (int index = 0; index < brm.bsr.Count; index++)        {            BAKSortResult data = brm.bsr[index];            GameObject sortMember = LoadResultSortResource(data);            Text sortid = sortMember.transform.Find("Text_paihang").gameObject.GetComponent<Text>();            sortid.text = (index + 1).ToString();            Image icon = sortMember.transform.Find("head").Find("tongxiang").gameObject.GetComponent<Image>();            icon.sprite = GameMain.hall_.GetIcon(data.url, data.playerid, (int)data.faceid);            Text name = sortMember.transform.Find("Text_name").gameObject.GetComponent<Text>();            name.text = data.name;            Text coin = sortMember.transform.Find("Text_Jiangjin").gameObject.GetComponent<Text>();            if (data.money >= 1000000 || data.money <= -1000000)                coin.text = (data.money / 10000).ToString() + "万";            else                coin.text = data.money.ToString();        }        Text bossGetMoney = resultPanel_.transform.Find("ImageBG")            .Find("ImageBG_zong").Find("Image_DelaerInfo").            Find("Text_sum").gameObject.GetComponent<Text>();        if (brm.bossChangeMoney >= 1000000 || brm.bossChangeMoney <= -1000000)            bossGetMoney.text = (brm.bossChangeMoney / 10000).ToString() + "万";        else            bossGetMoney.text = brm.bossChangeMoney.ToString();        Text bossName = resultPanel_.transform.Find("ImageBG")            .Find("ImageBG_zong").Find("Image_DelaerInfo").            Find("Text_name").gameObject.GetComponent<Text>();        bossName.text = brm.bossName;    }    void CloseResultPanel()    {        resultPanel_.SetActive(false);        if(CurrentChips_ != null && LastChips_ != null)        {            foreach (byte key in CurrentChips_.Keys)            {                LastChips_[key].selfchip = CurrentChips_[key].selfchip;                CurrentChips_[key].selfchip = 0;                CurrentChips_[key].totalchip = 0;            }        }        ShowPokerType(false);        RefreshRecordPanel();        CloseAllAnimator();    }    void CloseAllAnimator()    {        for (int index = 0; index < animate_rewards.Count; index++)            animate_rewards[index].gameObject.SetActive(false);    }    void UpdateSetPanel(float time)    {        if (!isupdatesetpanel)            return;        GameObject setpanel = gameroot_.transform.Find("Top").Find("ButtonBG").            Find("ButtonGroupMask").Find("ButtonGroup").gameObject;        if (isshowsetpanel)        {            setpanelspeed.y = -10.0f;            setpanel.transform.Translate(setpanelspeed * time);            if (setpanel.transform.localPosition.y <= -75.0f)            {                isupdatesetpanel = false;            }        }        else        {            setpanelspeed.y = 10.0f;            setpanel.transform.Translate(setpanelspeed * time);            if (setpanel.transform.localPosition.y >= 75.0f)            {                isupdatesetpanel = false;                CloseSetPanel();            }        }    }    void InitChipButtonEvents()    {        GameObject chipDistrict = gameroot_.transform.Find("Middle").Find("Chip_Point").gameObject;        for(int index = 1; index < 5; index++)        {            GameObject xian = chipDistrict.transform.Find("Button_" + index.ToString()).gameObject;            byte xianIndex = (byte)index;            XPointEvent.AutoAddListener(xian, OnChip, xianIndex);        }    }    byte witchChip_;    void OnChip(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            UMessage chipmessage = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_CM_CHIPIN);            chipmessage.Add(GameMain.hall_.GetPlayerId());            chipmessage.Add(currentChip_);            chipmessage.Add((byte)button);            chipmessage.Add(witchChip_);            chipmessage.Add((byte)1);            HallMain.SendMsgToRoomSer(chipmessage);            Toggle isauto = gameroot_.transform.Find("Bottom").Find("Toggle_zidong").gameObject.GetComponent<Toggle>();            isauto.isOn = false;            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    FlyChips CreateFlyChip(int tposition, int mindex, int sposition, int getwinmoney = -1)    {        FlyChips chip = new FlyChips();        Vector3 startPosition = new Vector3();        if (sposition == 0)            startPosition = gameroot_.transform.Find("Bottom").Find("ChouMa").position;        else if (sposition < 5)            startPosition = gameroot_.transform.Find("Middle").Find("Seat").Find("Seat_" + sposition.ToString()).position;        else if (sposition == 5)            startPosition = gameroot_.transform.Find("Middle").Find("Seat").Find("Seat_Otherplayers").position;        else if (sposition == 6)            startPosition = gameroot_.transform.Find("Top").Find("DelaerInfo").position;        chip.SetChipStartPosition(startPosition);        chip.targetPosition = CaculateTargetPosition(tposition);        chip.SetChipMaterial(mindex);        chip.chiptarget = (byte)tposition;        if (getwinmoney >= 0)            chip.chipsource = (byte)getwinmoney;        else            chip.chipsource = (byte)sposition;        flychips_.Add(chip);        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata == null)            return chip;        AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1007].audioName);        return chip;    }    void SetChipNumberByIndex(int index, long chip)    {        GameObject chipDistrict = gameroot_.transform.Find("Middle").Find("Chip_Point").gameObject;        Text chipnumber = chipDistrict.transform.Find("Button_" + index.ToString()).            Find("Text_chipnum").gameObject.GetComponent<Text>();        chipnumber.text = chip.ToString();    }    void SetSelfChipNumberByIndex(int index, long chip)    {        GameObject chipDistrict = gameroot_.transform.Find("Middle").Find("Chip_Point").gameObject;        Text selfchipnumber = chipDistrict.transform.Find("Button_" + index.ToString()).            Find("Text_chipnum_ziji").gameObject.GetComponent<Text>();        selfchipnumber.text = chip.ToString();    }    void ShowRewardByIndex(int index, bool isshow)    {        GameObject chipDistrict = gameroot_.transform.Find("Middle").Find("Chip_Point").gameObject;        GameObject rc = chipDistrict.transform.Find("Button_" + index.ToString()).Find("outline_Zhongjiang").gameObject;        rc.SetActive(isshow);    }    void ShowLimitChipByIndex(int index, bool isshow)    {        GameObject chipDistrict = gameroot_.transform.Find("Middle").Find("Chip_Point").gameObject;        GameObject lcc = chipDistrict.transform.Find("Button_" + index.ToString()).Find("outline_Xiazhu").gameObject;        lcc.SetActive(isshow);    }    Vector3 CaculateTargetPosition(int index)    {        Vector3 result = new Vector3();        string district = "Button_" + index.ToString();        GameObject targetObj = gameroot_.transform.Find("Middle").Find("Chip_Point").            Find(district).Find("Chip_Point").gameObject;        Vector3 targetPosition = targetObj.transform.position;                int rdx = rd.Next(-850, 850);        float rrdx = (float)rdx / 1000.0f;        float x = targetPosition.x + rrdx;        int rdy = rd.Next(-410, 410);        float rrdy = (float)rdy / 1000.0f;        float y = targetPosition.y + rrdy;        result.x = x;        result.y = y;        result.z = 95.1f;        return result;    }    byte[] mTexasCards = {    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,	//方块	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,	//梅花	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D,	//红桃	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D,	//黑桃};    void InitPokers()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            for(byte round = 1; round <= 4; round++)            {                string cardName = "";                switch (round)                {                    case 1:                        cardName = "block";                        break;                    case 2:                        cardName = "club";                        break;                    case 3:                        cardName = "heart";                        break;                    case 4:                        cardName = "spade";                        break;                }                                for (byte index = 1; index <= 13; index++)                {                    Sprite pokerSprite = bundle.LoadAsset<Sprite>(cardName + index.ToString());                    pokers_.Add((byte)(index + (round - 1) * 16), pokerSprite);                }            }            Sprite backSprite = bundle.LoadAsset<Sprite>("puke_back");            pokers_.Add(0, backSprite);        }    }    void ShowBackPokerByIndexes(int position, int index)    {        if (position >= 5)            position -= 5;        if(position == 0)        {            GameObject pokerBG = gameroot_.transform.Find("Middle").                Find("Chip_Point").Find("poker_Zhuangjia").gameObject;            string pokerName = "";            if (index > 0)                pokerName = " (" + index.ToString() + ")";            GameObject poker = pokerBG.transform.Find("Image_poker" + pokerName).gameObject;            Image pokerback = poker.GetComponent<Image>();            poker.SetActive(true);            pokerback.sprite = pokers_[0];        }        else        {            GameObject pokerBG = gameroot_.transform.Find("Middle").                Find("Chip_Point").Find("Button_" + position.ToString()).Find("poker").gameObject;            string pokerName = "";            if (index > 0)                pokerName = " (" + index.ToString() + ")";            GameObject poker = pokerBG.transform.Find("Image_poker" + pokerName).gameObject;            Image pokerback = poker.GetComponent<Image>();            poker.SetActive(true);            pokerback.sprite = pokers_[0];        }        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata == null)            return;        AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1003].audioName);    }    void SetPokerByIndex(int pokersindex, bool isshow)    {        if (pokersindex == 0)        {            SetBossPoker(isshow);            return;        }        GameObject pokerBG = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("Button_" + pokersindex.ToString()).Find("poker").gameObject;        if (isshow)        {            for (int index = 0; index < 5; index++)            {                string pokerName = "";                if (index > 0)                    pokerName = " (" + index.ToString() + ")";                if (BAK_DataCenter.Instance().ber.roomstate < (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_DealPokers)                {                    pokerBG.transform.Find("Image_poker" + pokerName).gameObject.SetActive(false);                    continue;                }                else                {                    pokerBG.transform.Find("Image_poker" + pokerName).gameObject.SetActive(true);                }                    Image poker = pokerBG.transform.Find("Image_poker" + pokerName).gameObject.GetComponent<Image>();                if(BAK_DataCenter.Instance().ber.pokerinfos[(byte)pokersindex].pokers.Count > index)                    poker.sprite = pokers_[BAK_DataCenter.Instance().ber.pokerinfos[(byte)pokersindex].pokers[index]];            }        }        else        {            for (int index = 0; index < 5; index++)            {                string pokerName = "";                if (index > 0)                    pokerName = " (" + index.ToString() + ")";                if (BAK_DataCenter.Instance().ber.roomstate < (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_DealPokers)                {                    pokerBG.transform.Find("Image_poker" + pokerName).gameObject.SetActive(false);                    continue;                }                else                {                    pokerBG.transform.Find("Image_poker" + pokerName).gameObject.SetActive(true);                }                Image poker = pokerBG.transform.Find("Image_poker" + pokerName).gameObject.GetComponent<Image>();                if (BAK_DataCenter.Instance().ber.pokerinfos[(byte)pokersindex].pokers.Count > index)                    poker.sprite = pokers_[0];            }        }    }    void SetPokerTypeByIndex( int index, string type )    {        GameObject pokerBG = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("Button_" + index.ToString()).gameObject;        Text pokertype = pokerBG.transform.Find("poker").Find("Text_paixing").gameObject.GetComponent<Text>();        pokertype.text = type;    }    void SetBossPokerType(string type)    {        GameObject pokerBG = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("poker_Zhuangjia").gameObject;        Text pokertype = pokerBG.transform.Find("Text_paixing").gameObject.GetComponent<Text>();        pokertype.text = type;    }    void ShowPokerType(bool isshow)    {        for(int index = 1; index < 5; index++)        {            ShowPokerTypeByIndex(isshow, index);        }        ShowBossPokerType(isshow);    }    void ShowPokerTypeByIndex(bool isshow, int index)    {        if (index == 0)        {            ShowBossPokerType(isshow);            return;        }        GameObject pokerBG = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("Button_" + index.ToString()).gameObject;        GameObject pokertype = pokerBG.transform.Find("poker").Find("Text_paixing").gameObject;        pokertype.SetActive(isshow);    }    void ShowBossPokerType(bool isshow)    {        GameObject pokerBG = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("poker_Zhuangjia").gameObject;        GameObject pokertype = pokerBG.transform.Find("Text_paixing").gameObject;        pokertype.SetActive(isshow);    }    void SetBossPoker(bool isshow)    {        GameObject pokerBG = gameroot_.transform.Find("Middle").            Find("Chip_Point").Find("poker_Zhuangjia").gameObject;        if (isshow)        {            for (int index = 0; index < 5; index++)            {                string pokerName = "";                if (index > 0)                    pokerName = " (" + index.ToString() + ")";                if (BAK_DataCenter.Instance().ber.roomstate < (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_DealPokers)                {                    pokerBG.transform.Find("Image_poker" + pokerName).gameObject.SetActive(false);                    continue;                }                else                {                    pokerBG.transform.Find("Image_poker" + pokerName).gameObject.SetActive(true);                }                Image poker = pokerBG.transform.Find("Image_poker" + pokerName).gameObject.GetComponent<Image>();                poker.sprite = pokers_[BAK_DataCenter.Instance().ber.pokerinfos[0].pokers[index]];            }        }        else        {            for(int index = 0; index < 5; index++)            {                string pokerName = "";                if (index > 0)                    pokerName = " (" + index.ToString() + ")";                if (BAK_DataCenter.Instance().ber.roomstate < (byte)GameCity.AllKillRoomState_Enum.AllKillRoomState_DealPokers)                {                    pokerBG.transform.Find("Image_poker" + pokerName).gameObject.SetActive(false);                    continue;                }                else                {                    pokerBG.transform.Find("Image_poker" + pokerName).gameObject.SetActive(true);                }                Image poker = pokerBG.transform.Find("Image_poker" + pokerName).gameObject.GetComponent<Image>();                poker.sprite = pokers_[0];            }        }    }    void InitSeats()    {        for(int index = 1; index <= 4; index++)        {            GameObject seat = gameroot_.transform.Find("Middle").Find("Seat").                Find("Seat_" + index.ToString()).Find("Button_Sit").gameObject;            int sitindex = index;            XPointEvent.AutoAddListener(seat, OnSitClick, sitindex);        }    }    void SetSeatInfoByIndex( int index )    {        GameObject seat = gameroot_.transform.Find("Middle").Find("Seat").            Find("Seat_" + index.ToString()).Find("Head").gameObject;        if (BAK_DataCenter.Instance().ber.vipSeatInfos[(byte)(index)].playerid == 0)            seat.SetActive(false);        else            seat.SetActive(true);        Image icon = seat.transform.Find("HeadMask").Find("ImageHead").gameObject.GetComponent<Image>();            icon.sprite = GameMain.hall_.GetIcon(BAK_DataCenter.Instance().ber.vipSeatInfos[(byte)(index)].url,                BAK_DataCenter.Instance().ber.vipSeatInfos[(byte)(index)].playerid,                (int)BAK_DataCenter.Instance().ber.vipSeatInfos[(byte)(index)].faceid);        Text name = seat.transform.Find("TextName").gameObject.GetComponent<Text>();        name.text = BAK_DataCenter.Instance().ber.vipSeatInfos[(byte)(index)].name;        SetSeatCoinByIndex(index);    }    void SetSeatCoinByIndex(int index, bool isself = false)    {        GameObject seat = gameroot_.transform.Find("Middle").Find("Seat").            Find("Seat_" + index.ToString()).Find("Head").gameObject;        Text coin = seat.transform.Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        if(isself)        {            if (BAK_DataCenter.Instance().ber.vipSeatInfos.ContainsKey((byte)index))                coin.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();
            //coin.text = GameMain.hall_.GetPlayerData().GetCoin().ToString();
        }        else        {            if (BAK_DataCenter.Instance().ber.vipSeatInfos.ContainsKey((byte)index))
                coin.text = BAK_DataCenter.Instance().ber.vipSeatInfos[(byte)index].money.ToString();        }    }    void OnSitClick(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            int index = (int)button;            UMessage sitdown = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLKILL_CM_APPLYSITVIP);            sitdown.Add(GameMain.hall_.GetPlayerId());            sitdown.Add((byte)1);            sitdown.Add((byte)index);            HallMain.SendMsgToRoomSer(sitdown);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    bool BackSitDown(uint _msgType, UMessage msg)    {        uint playerid = msg.ReadUInt();        byte issit = msg.ReadByte();        if(issit == 1)        {            byte issitsuccess = msg.ReadByte();            if(issitsuccess == 0)            {                byte sitNo = msg.ReadByte();                if(BAK_DataCenter.Instance().ber.vipSeatInfos.ContainsKey(sitNo))                {                    BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].seatNo = sitNo;                    BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].playerid = playerid;                    BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].faceid = msg.ReadUInt();                    BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].url = msg.ReadString();                    BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].money = msg.ReadLong();                    BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].name = msg.ReadString();                }                SetSeatInfoByIndex(sitNo);            }            else            {                if(issitsuccess == 1)                    CCustomDialog.OpenCustomConfirmUI(2404);                if (issitsuccess == 2)                    CCustomDialog.OpenCustomConfirmUI(2402);                if (issitsuccess == 3)                    CCustomDialog.OpenCustomConfirmUIWithFormatParam(2401, BAK_DataCenter.Instance().blm.levelconfig[1].vipSeatMoney);                if (issitsuccess == 4)                    CCustomDialog.OpenCustomConfirmUI(2403);            }        }        else        {            byte issitsuccess = msg.ReadByte();            if (issitsuccess == 0)            {                byte sitNo = msg.ReadByte();                BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].seatNo = sitNo;                BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].playerid = 0;                BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].faceid = 0;                BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].url = "";                BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].money = 0;                BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].name = "";                SetSeatInfoByIndex(sitNo);            }        }        return true;    }    bool BackForceStandUp(uint _msgType, UMessage msg)    {        uint playerid = msg.ReadUInt();        byte sitNo = msg.ReadByte();        string name = msg.ReadString();        BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].playerid = 0;        BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].money = 0;        BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].faceid = 0;        BAK_DataCenter.Instance().ber.vipSeatInfos[sitNo].name = "";        SetSeatInfoByIndex(sitNo);        return true;    }    void SetTime(float time)    {        Text timeObj = gameroot_.transform.Find("Middle").Find("CountdownBG").            Find("TextTime").gameObject.GetComponent<Text>();        timeObj.text = ((int)time).ToString();    }    void InitRecordPanelEvents()    {        GameObject record = gameroot_.transform.Find("Middle").            Find("Button_Record").gameObject;        XPointEvent.AutoAddListener(record, OnShowRecord, null);        GameObject closeRecord = gameroot_.transform.Find("Pop-up").            Find("Record").Find("Record_BG/UiRootBG_Button").gameObject;        XPointEvent.AutoAddListener(closeRecord, OnCloseRecord, null);    }    void OnShowRecord(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            isShowRecord = true;            isUpdateRecord = true;            GameObject recordPanel = gameroot_.transform.Find("Pop-up").Find("Record").gameObject;            recordPanel.SetActive(true);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void RefreshRecordPanel()    {        GameObject background = gameroot_.transform.Find("Pop-up").            Find("Record").Find("Record_BG").Find("ImageMask").Find("ImageBG").            Find("Record_Viewport").Find("Record_Content").gameObject;        ClearChilds(background);        for (int index = 0; index < BAK_DataCenter.Instance().ber.records.Count; index++)        {            GameObject record = LoadRecordResource();            for (int position = 1; position < 5; position++)            {                bool isWin = GameKind.HasFlag(position, BAK_DataCenter.Instance().ber.records[index]);                Text recordTx = record.transform.Find("Text_" + position.ToString()).                    Find("Text").gameObject.GetComponent<Text>();                Gradient recordGradient = recordTx.gameObject.GetComponent<Gradient>();                if (isWin)                {                    recordTx.text = "赢";                    recordGradient.EndColor = Color.yellow;                }                else                {                    recordTx.text = "输";                    recordGradient.EndColor = Color.gray;                }            }        }    }    GameObject LoadRecordResource()    {        GameObject result = null;        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return null;            GameObject background = gameroot_.transform.Find("Pop-up").                Find("Record").Find("Record_BG").Find("ImageMask").Find("ImageBG").                Find("Record_Viewport").Find("Record_Content").gameObject;            UnityEngine.Object obj1 = bundle.LoadAsset("Record_popup");            result = (GameObject)GameMain.instantiate(obj1);            result.transform.SetParent(background.transform, false);        }        return result;    }    void OnCloseRecord(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            isShowRecord = false;            isUpdateRecord = true;            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    bool isShowRecord = false;    bool isUpdateRecord = false;    Vector3 recordSpeed = new Vector3(10.0f, 0.0f, 0.0f);    void UpdateRecordPanel(float time)    {        if (!isUpdateRecord)            return;        GameObject recordpanel = gameroot_.transform.Find("Pop-up").            Find("Record").Find("Record_BG").Find("ImageMask").            Find("ImageBG").gameObject;        if (isShowRecord)        {            recordSpeed.x = 10.0f;            recordpanel.transform.Translate(recordSpeed * time);            if(recordpanel.transform.localPosition.x >= 0)            {                recordpanel.transform.localPosition = new Vector3(0.0f, recordpanel.transform.localPosition.y, recordpanel.transform.localPosition.z);                isUpdateRecord = false;            }        }        else        {            recordSpeed.x = -10.0f;            recordpanel.transform.Translate(recordSpeed * time);            if (recordpanel.transform.localPosition.x <= -270.0f)            {                GameObject recordPanel = gameroot_.transform.Find("Pop-up").Find("Record").gameObject;                recordPanel.SetActive(false);                isUpdateRecord = false;            }         }    }    bool isShowRule = false;    bool isUpdateRule= false;    Vector3 ruleSpeed = new Vector3(10.0f, 0.0f, 0.0f);    void InitRulePanel()    {        GameObject rule = gameroot_.transform.Find("Middle").            Find("Button_Rule").gameObject;        XPointEvent.AutoAddListener(rule, OnShowRule, null);        GameObject closeRule = gameroot_.transform.Find("Pop-up").            Find("Rule").Find("Rule_BG/UiRootBG_Button").gameObject;        XPointEvent.AutoAddListener(closeRule, OnCloseRule, null);    }    void OnShowRule(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            isShowRule = true;            isUpdateRule = true;            GameObject rulepanel = gameroot_.transform.Find("Pop-up").Find("Rule").gameObject;            rulepanel.SetActive(true);            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void OnCloseRule(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            isShowRule = false;            isUpdateRule = true;            GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);            if (gamedata == null)                return;            AudioManager.Instance.PlaySound(gamedata.ResourceABName, BAK_DataCenter.Instance().audiodatas[1002].audioName);        }    }    void UpdateRulePanel(float time)    {        if (!isUpdateRule)            return;        GameObject rulepanel = gameroot_.transform.Find("Pop-up").            Find("Rule").Find("Rule_BG").Find("ImageMask").            Find("ImageBG").gameObject;        if (isShowRule)        {            ruleSpeed.x = 10.0f;            rulepanel.transform.Translate(ruleSpeed * time);            if (rulepanel.transform.localPosition.x >= 0)            {                rulepanel.transform.localPosition = new Vector3(0.0f, rulepanel.transform.localPosition.y, rulepanel.transform.localPosition.z);                isUpdateRule = false;            }        }        else        {            ruleSpeed.x = -10.0f;            rulepanel.transform.Translate(ruleSpeed * time);            if (rulepanel.transform.localPosition.x <= -270.0f)            {                GameObject rulePanel = gameroot_.transform.Find("Pop-up").Find("Rule").gameObject;                rulePanel.SetActive(false);                isUpdateRule = false;            }        }    }    bool isstarttips = false;    float currenttime = 0.0f;    float showtime = 1.0f;    void ShowStartTips(float time)    {        if (!isstarttips)        {            animate_start.gameObject.SetActive(false);            animate_alllose.gameObject.SetActive(false);            animate_allkill.gameObject.SetActive(false);            animate_result.gameObject.SetActive(false);            return;        }        currenttime += time;        if(currenttime >= showtime)        {            isstarttips = false;            currenttime = 0.0f;        }    }    GameObject LoadResultSortResource(BAKSortResult data)    {        GameObject result = null;        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return null;            GameObject background = resultPanel_.transform.Find("ImageBG").                Find("ImageBG_zong").Find("Result_zong_Viewport").                Find("Result_zong_Content").gameObject;            UnityEngine.Object obj1 = bundle.LoadAsset("Result_zong");            result = (GameObject)GameMain.instantiate(obj1);            result.transform.SetParent(background.transform, false);        }        return result;    }    UnityArmatureComponent animate_start;    UnityArmatureComponent animate_alllose;    UnityArmatureComponent animate_allkill;    List<UnityArmatureComponent> animate_rewards;    GameObject animate_result;    void LoadAnimateResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_BullAllKill);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            GameObject background = gameroot_.transform.Find("Pop-up").                Find("Tips_GameStart").gameObject;            Object obj_start = (GameObject)bundle.LoadAsset("Anime_gamestart");            GameObject gobj_start = (GameObject)GameMain.instantiate(obj_start);            animate_start = gobj_start.GetComponent<UnityArmatureComponent>();            gobj_start.transform.SetParent(background.transform, false);            gobj_start.gameObject.SetActive(false);            Object obj_alllose= (GameObject)bundle.LoadAsset("Anime_Result_tongpei");            GameObject gobj_alllose = (GameObject)GameMain.instantiate(obj_alllose);            animate_alllose = gobj_alllose.GetComponent<UnityArmatureComponent>();            gobj_alllose.transform.SetParent(background.transform, false);            gobj_alllose.gameObject.SetActive(false);            Object obj_allkill = (GameObject)bundle.LoadAsset("Anime_Result_tongsha");            GameObject gobj_allkill = (GameObject)GameMain.instantiate(obj_allkill);            animate_allkill = gobj_allkill.GetComponent<UnityArmatureComponent>();            gobj_allkill.transform.SetParent(background.transform, false);            gobj_allkill.gameObject.SetActive(false);            AssetBundle hallbundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);            if (hallbundle == null)                return;            GameObject resultBG = resultPanel_.transform.Find("ImageBG").                Find("ImageBG_paixing").Find("Image_sum").gameObject;            Object obj_result = (GameObject)hallbundle.LoadAsset("Coin_Effect");            GameObject gobj_result = (GameObject)GameMain.instantiate(obj_result);            animate_result = gobj_result;            gobj_result.transform.SetParent(resultBG.transform, false);            gobj_result.gameObject.SetActive(false);            GameObject rewardBG = gameroot_.transform.Find("Middle").Find("Chip_Point").gameObject;            animate_rewards = new List<UnityArmatureComponent>();            for (int index = 1; index < 5; index++)            {                GameObject currBG = rewardBG.transform.Find("Button_" + index.ToString()).gameObject;                Object obj_reward = (GameObject)bundle.LoadAsset("Anime_ZhongJiang");                GameObject gobj_reward = (GameObject)GameMain.instantiate(obj_reward);                UnityArmatureComponent animate_reward = gobj_reward.GetComponent<UnityArmatureComponent>();                gobj_reward.gameObject.transform.SetParent(currBG.transform, false);                gobj_reward.gameObject.SetActive(false);                animate_rewards.Add(animate_reward);            }        }    }}