using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using UnityEngine.EventSystems;using USocket.Messages;using System;using DragonBones;using XLua;[LuaCallCSharp]class AnimatorData{    public AnimatorData()    {        isCall = false;        currenttime = 0.0f;    }    public static float lasttime = 1.5f;    public float currenttime;    public bool isCall;    public GameObject animate;}[LuaCallCSharp]class Line{    public Line()    {        iconIDs = new List<byte>();    }    public List<byte> iconIDs;}[LuaCallCSharp]class Row{    public Row()    {        iconIDs = new List<byte>();    }    public List<byte> iconIDs;}[Hotfix]public class LB_StartGame{    GameObject root_;    GameObject pickPanel_;    int currentRulePage;    List<Sprite> winMoneyNumberSprites;    public long unitChip;    List<Sprite> iconSprites;    LB_IconData lbDataMgr;    public int level_;    public bool isGaming;    public bool isSlot;    List<Line> lines_;    List<GameObject> rotateObjects_;    List<Row> rows_;    System.Random rd;    Dictionary<int, List<GameObject>> rollingObjs;    List<float> rollingSpeeds;    float upRollingSpeed;    float rollingTime;    float currentRollingTime;    public USlotGameResult sgr_;    public USlotCardResult scr;    float topY;    float appendSpeed;    int currentStopIndex;    long winMoney;    long currentRollMoney;    int autoTimes_;    bool isGameOver_;    float gameOverTime_;    float currentGameOverTime_;    bool selfDefine;    public LB_ChipsLimitData chipLimitList;    List<long> unitChips;    int currentChipIndex;    public bool isKickOut;    bool isShowLine;    float showlineTime;    float currentShowLineTime;    LB_DoubleCard dc;    GameObject cardroot_;    GameObject bellroot_;    // Use this for initialization    public void Start (GameObject root, GameObject pickPanel, int level)    {        root_ = root;        pickPanel_ = pickPanel;        level_ = level;        DownBundle();        ReadIconCsv();        ReadLimitCsv();        InitData();        InitIconSprites();        initUI();        CloseTips();        InitRuleEvents();        InitWinNumberSprite();        InitHistroyEvents();        ResetHistroyUI();        ResetIcons();        InitRolling();        SetWinMoney();        InitLevelInfo();        SetStartTypeUI(0);        ResetAnimates();        OpenLinesButton(9);    }    public void reset()    {        InitData();        InitIconSprites();        initUI();        CloseTips();        InitRuleEvents();        InitWinNumberSprite();        InitHistroyEvents();        ResetHistroyUI();        ResetIcons();        InitRolling();        SetWinMoney();        InitLevelInfo();        SetStartTypeUI(0);        ResetAnimates();        OpenLinesButton(9);        ButtonsActive(true);        ResetGame();    }    void InitRolling()    {        rollingObjs = new Dictionary<int, List<GameObject>>();        for (int index = 0; index < 5; index++)        {            InitRollingByID(index);        }    }    void InitRollingByID( int id )    {        Row row = rows_[id];        //List<GameObject> member = new List<GameObject>();        GameObject addobj = new GameObject("addinrow:" + id.ToString());        Image addicon = addobj.AddComponent<Image>();        addicon.sprite = iconSprites[rd.Next(0, 9)];        GameObject iconbg = root_.transform.Find("Middle").Find("ImageBG").Find("Icon").gameObject;        topY = iconbg.transform.GetChild(row.iconIDs[0]).localPosition.y;        addicon.transform.SetParent(iconbg.transform,false);        addicon.transform.localPosition = new Vector3(iconbg.transform.GetChild(row.iconIDs[0]).localPosition.x,                                                    iconbg.transform.GetChild(row.iconIDs[0]).localPosition.y + 116.25f,                                                    iconbg.transform.GetChild(row.iconIDs[0]).localPosition.z);                List<GameObject> rowObjs = new List<GameObject>();        for (int index = 0; index < 3; index++)            rowObjs.Add(iconbg.transform.GetChild(row.iconIDs[index]).gameObject);        rowObjs.Add(addobj);        rollingObjs.Add(id, rowObjs);    }    void Rolling(int stopIndex)    {        for(int index = 0; index < rollingObjs.Count; index++)        {            if (index <= stopIndex)                continue;            for(int i = 0; i < rollingObjs[index].Count; i++)            {                rollingObjs[index][i].transform.localPosition = new Vector3(rollingObjs[index][i].transform.localPosition.x,                    rollingObjs[index][i].transform.localPosition.y - rollingSpeeds[index] * Time.deltaTime,                    rollingObjs[index][i].transform.localPosition.z);                if (rollingObjs[index][i].transform.localPosition.y <= -232.5f)                {                    rollingObjs[index][i].transform.localPosition = new Vector3(rollingObjs[index][i].transform.localPosition.x,                    rollingObjs[index][i].transform.localPosition.y + 465,                    rollingObjs[index][i].transform.localPosition.z);                    Image newIcon = rollingObjs[index][i].GetComponent<Image>();                    newIcon.sprite = iconSprites[rd.Next(0, 9)];                }            }        }    }    void UpRollingByID(int index)    {        for (int i = 0; i < rollingObjs[index].Count; i++)        {            rollingObjs[index][i].transform.localPosition = new Vector3(rollingObjs[index][i].transform.localPosition.x,                rollingObjs[index][i].transform.localPosition.y + Time.deltaTime * upRollingSpeed,                rollingObjs[index][i].transform.localPosition.z);            if (rollingObjs[index][i].transform.localPosition.y >= 232.5f)            {                rollingObjs[index][i].transform.localPosition = new Vector3(rollingObjs[index][i].transform.localPosition.x,                rollingObjs[index][i].transform.localPosition.y - 465,                rollingObjs[index][i].transform.localPosition.z);                ResetIcon(i);            }        }    }    float kicktime = 6.0f;    float currentkicktime = 0.0f;    // Update is called once per frame    public void Update()    {        if (isGaming)            Gaming();        if (isSlot)        {            currentRollingTime += Time.deltaTime;            if (currentRollingTime >= rollingTime)                StopRolling();            else                Rolling(-1);        }        if (winMoney > 0)        {            long rollmoney = winMoney / 25;            if (rollmoney > 0)                currentRollMoney += rollmoney;            else                currentRollMoney += 1;            ShowResult(currentRollMoney);            if(currentRollMoney >= winMoney)            {                //GameMain.hall_.GetPlayerData().PlayerCoin += winMoney;                //SetUIPlayerMoney();                currentRollMoney = 0;                winMoney = 0;            }        }        if (isGameOver_)        {            currentGameOverTime_ += Time.deltaTime;            if(currentGameOverTime_ >= gameOverTime_)            {                currentGameOverTime_ = 0.0f;                isGameOver_ = false;                autoTimes_ -= 1;                SetStartTypeUI(autoTimes_);                if (selfDefine)                {                    if(GameMain.hall_.GetPlayerData().GetDiamond() < LB_DataCenter.Instance().autoData.maxMoney                        && GameMain.hall_.GetPlayerData().GetDiamond() > LB_DataCenter.Instance().autoData.minMoney)                    {                        autoTimes_ += 1;                    }                    SetStartTypeUI(-1);                }                if (autoTimes_ > 0)                {                    StartByTimes(autoTimes_);                    CloseTips();                }                if(sgr_.cardNum > 0)                {                    ShowCardPanel();                }            }        }        if (isKickOut)        {            currentkicktime += Time.deltaTime;            if (currentkicktime >= kicktime)            {                CCustomDialog.OpenCustomConfirmUI(2004);                Exit();                isKickOut = false;                currentkicktime = 0.0f;            }        }        if (isShowLine)        {            currentShowLineTime += Time.deltaTime;            if(currentShowLineTime >= showlineTime)            {                currentShowLineTime = 0.0f;                isShowLine = false;                CloseLines();            }        }        if (dc != null)            dc.Update();        UpdateAnimates(Time.deltaTime);    }    void CorrectPosition()    {        for(int index = 0; index < rollingObjs[currentStopIndex].Count; index++)        {            rollingObjs[currentStopIndex][index].transform.localPosition = new Vector3(rollingObjs[currentStopIndex][index].transform.localPosition.x,                topY - index * topY,                rollingObjs[currentStopIndex][index].transform.localPosition.z);        }        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata != null)            AudioManager.Instance.PlaySound(gamedata.ResourceABName, "Slots_BG_TingZhi");    }    void StopRolling()    {        bool isStop = false;        if (currentStopIndex >= rollingSpeeds.Count)            return;        if (rollingSpeeds[currentStopIndex] <= 500.0f)        {            isStop = true;            //if (rollingObjs[currentStopIndex][0].transform.localPosition.y < topY)            //    UpRollingByID(currentStopIndex);            if (rollingObjs[currentStopIndex][0].transform.localPosition.y != topY)            {                rollingSpeeds[currentStopIndex] = 500.0f;                if (rollingObjs[currentStopIndex][0].transform.localPosition.y - topY <= 20.0f)                    CorrectPosition();                else                    Rolling(currentStopIndex - 1);            }            else            {                currentStopIndex += 1;                if (currentStopIndex == 5)                {                    if (sgr_ != null)                        ShowWinEffect(sgr_);                    else                        return;                    isSlot = false;                    currentRollingTime = 0.0f;                    rollingSpeeds = new List<float>() { 2400.0f, 2400.0f, 2400.0f, 2400.0f, 2400.0f };                    upRollingSpeed = 500.0f;                    currentStopIndex = 0;                    ResetHistroyUI();                    SetWinMoney();                    if (autoTimes_ <= 1 && !selfDefine)                    {                        ButtonsActive(true);                        GameObject StartBtn = root_.transform.Find("Bottom").Find("ButtonStart").gameObject;                        StartBtn.SetActive(true);                        GameObject StopBtn = root_.transform.Find("Bottom").Find("ButtonStop").gameObject;                        StopBtn.SetActive(false);                    }                    GameMain.ShowTicketResult(sgr_.currentlottery);                    if (sgr_.getCoin > 0)                    {                        winMoney = sgr_.getCoin;                                                //DoubleButton(true);                    }                    isGameOver_ = true;                    //ResetIcons();                    return;                }            }        }        if (!isStop)        {            Rolling(currentStopIndex - 1);            rollingSpeeds[currentStopIndex] -= appendSpeed * Time.deltaTime;            if (rollingSpeeds[currentStopIndex] <= 1000.0f)                ResetIcon(currentStopIndex);        }        else        {            Rolling(currentStopIndex);        }    }    void Gaming()    {        for(int index = 0; index < rotateObjects_.Count; index++)        {            rotateObjects_[index].transform.Rotate(new Vector3(0.0f, 0.0f, 1.0f), 1.0f);        }     }    void ReadLimitCsv()    {        chipLimitList = new LB_ChipsLimitData();        chipLimitList.LoadGameDataFile();    }    void ReadIconCsv()    {        lbDataMgr = new LB_IconData();        lbDataMgr.LoadGameDataFile();    }    void InitData()    {        rd = new System.Random(6);        rollingSpeeds = new List<float>() { 2400.0f, 2400.0f, 2400.0f, 2400.0f, 2400.0f };        upRollingSpeed = 500.0f;        appendSpeed = 8000.0f;        rollingTime = 1.5f;        currentStopIndex = 0;        currentRollingTime = 0.0f;        winMoney = 0;        currentRollMoney = 0;        autoTimes_ = 1;        isGameOver_ = false;        currentGameOverTime_ = 0.0f;        gameOverTime_ = 2.0f;        isSlot = false;        isGaming = false;        selfDefine = false;        isKickOut = false;        isShowLine = false;        showlineTime = 2.0f;        currentShowLineTime = 0.0f;        unitChip = chipLimitList.GetLimitData(level_).min;        ChipsLimitData uintChipData = chipLimitList.GetLimitData(level_);        LB_DataCenter.Instance().chipsData.lineNumber = 1;        unitChips = new List<long>() { uintChipData.min, uintChipData.two, uintChipData.three,                                                    uintChipData.four, uintChipData.five };                                                    //uintChipData.six,                                                    //uintChipData.seven, uintChipData.eight, uintChipData.nine,                                                    //uintChipData.max};        currentChipIndex = 0;        byte[,] linedata = new byte[,]{ { 5, 6, 7, 8, 9 },                                         { 0, 1, 2, 3, 4 },                                        { 10, 11, 12, 13, 14 },                                        { 0, 6, 12, 8, 4 },                                         { 10, 6, 2, 8, 14 },                                         { 0, 1, 7, 3, 4 }  ,                                         { 10, 11, 7, 13, 14 },                                        { 5, 11, 12, 13, 9 },                                        { 5, 1, 2, 3, 9 } };        lines_ = new List<Line>();        for (int index = 0; index < 9; index++)        {            Line line = new Line();            for (int i = 0; i < 5; i++)                line.iconIDs.Add(linedata[index,i]);            lines_.Add(line);        }        rows_ = new List<Row>();        byte[,] rowdata = new byte[,] { { 0, 5, 10 },        { 1 ,6, 11 }, { 2, 7, 12 }, { 3, 8, 13 }, { 4, 9, 14 } };        for(int index = 0; index < 5; index++)        {            Row row = new Row();            for (int i = 0; i < 3; i++)                row.iconIDs.Add(rowdata[index, i]);            rows_.Add(row);        }        rotateObjects_ = new List<GameObject>();    }    void InitIconSprites()    {        iconSprites = new List<Sprite>();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata == null)            return;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        for (int index = 1; index < lbDataMgr.GetDataLength() + 1; index++)        {            Sprite sprite = bundle.LoadAsset<Sprite>(lbDataMgr.GetIconData((byte)index).iconName);            iconSprites.Add(sprite);        }    }    void ResetIcon(int index)    {        GameObject iconPanel = root_.transform.Find("Middle").Find("ImageBG").Find("Icon").gameObject;        for (int ri = 0; ri < 3; ri++)        {            Image icon = iconPanel.transform.GetChild(rows_[index].iconIDs[ri]).gameObject.GetComponent<Image>();            if (rows_[index].iconIDs[ri] >= LB_DataCenter.Instance().icons.iconsList.Count)                return;            if (LB_DataCenter.Instance().icons.iconsList[rows_[index].iconIDs[ri]] >= iconSprites.Count)                return;            icon.sprite = iconSprites[LB_DataCenter.Instance().icons.iconsList[rows_[index].iconIDs[ri]]];        }    }    public void ResetIcons()    {        GameObject iconPanel = root_.transform.Find("Middle").Find("ImageBG").Find("Icon").gameObject;        for(int index = 0; index < iconPanel.transform.childCount; index++)        {            iconPanel.transform.GetChild(index).eulerAngles = Vector3.zero;            Image icon = iconPanel.transform.GetChild(index).gameObject.GetComponent<Image>();            if (index >= LB_DataCenter.Instance().icons.iconsList.Count)                return;            if (LB_DataCenter.Instance().icons.iconsList[index] >= iconSprites.Count)                return;            icon.sprite = iconSprites[LB_DataCenter.Instance().icons.iconsList[index]];        }    }    void CloseLinesButton()    {        GameObject leftLine = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonLine").Find("left").gameObject;        for (int index = 1; index < 10; index++)        {            GameObject lineBtnImg = leftLine.transform.Find("ButtonLine_" + index.ToString()).Find("ImageShine").gameObject;            lineBtnImg.SetActive(false);        }        GameObject rightLine = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonLine").Find("right").gameObject;        for (int index = 1; index < 10; index++)        {            GameObject lineBtnImg = rightLine.transform.Find("ButtonLine_" + index.ToString()).Find("ImageShine").gameObject;            lineBtnImg.SetActive(false);        }    }    void OpenLinesButton(int number)    {        GameObject leftLine = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonLine").Find("left").gameObject;        for (int index = 1; index < number + 1; index++)        {            GameObject lineBtnImg = leftLine.transform.Find("ButtonLine_" + index.ToString()).Find("ImageShine").gameObject;            lineBtnImg.SetActive(true);        }        GameObject rightLine = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonLine").Find("right").gameObject;        for (int index = 1; index < number + 1; index++)        {            GameObject lineBtnImg = rightLine.transform.Find("ButtonLine_" + index.ToString()).Find("ImageShine").gameObject;            lineBtnImg.SetActive(true);        }        SetLineNumber(number);    }    void SetUILineNumber(int number)    {        for (int index = 1; index < 10; index++)        {            LineByID(index, false);            CloseLinesButton();        }        for (int index = 1; index <= number + 1; index++)        {            LineByID(index, true);        }        GameObject leftLine = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonLine").Find("left").gameObject;        for (int index = 1; index < number + 2; index++)        {            GameObject lineBtnImg = leftLine.transform.Find("ButtonLine_" + index.ToString()).Find("ImageShine").gameObject;            lineBtnImg.SetActive(true);        }        GameObject rightLine = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonLine").Find("right").gameObject;        for (int index = 1; index < number + 2; index++)        {            GameObject lineBtnImg = rightLine.transform.Find("ButtonLine_" + index.ToString()).Find("ImageShine").gameObject;            lineBtnImg.SetActive(true);        }        isShowLine = true;        currentShowLineTime = 0.0f;    }    void SetLineNumber(int number)    {        Text lineNumber = root_.transform.Find("Bottom").Find("Line").            Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();        LB_DataCenter.Instance().chipsData.lineNumber = (byte)number;        lineNumber.text = LB_DataCenter.Instance().chipsData.lineNumber.ToString();        Text maxChipTx = root_.transform.Find("Bottom").            Find("Max").Find("ImageTextBG").Find("TextZongyazhu").            Find("TextNum").gameObject.GetComponent<Text>();        long maxMoney = unitChip * LB_DataCenter.Instance().chipsData.lineNumber;        maxChipTx.text = maxMoney.ToString();        //GameMain.hall_.GetPlayerData().PlayerCoin -= maxMoney;        //SetUIPlayerMoney();        currentShowLineTime = 0.0f;    }    void initLineUI()    {        CloseLinesButton();        OpenLinesButton(LB_DataCenter.Instance().chipsData.lineNumber);        GameObject leftLine = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonLine").Find("left").gameObject;        for (int index = 1; index < 10; index++)        {            GameObject lineBtn = leftLine.transform.Find("ButtonLine_" + index.ToString()).gameObject;            int temp = index;            XPointEvent.AutoAddListener(lineBtn, OnShowLine, temp);        }        GameObject rightLine = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonLine").Find("right").gameObject;        for (int index = 1; index < 10; index++)        {            GameObject lineBtn = rightLine.transform.Find("ButtonLine_" + index.ToString()).gameObject;            int temp = index;            XPointEvent.AutoAddListener(lineBtn, OnShowLine, temp);        }    }    void CloseLines()    {        GameObject linesObj = root_.transform.Find("Middle").Find("ImageBG").Find("Line").gameObject;        for(int index = 0; index < linesObj.transform.childCount; index++)        {            linesObj.transform.GetChild(index).gameObject.SetActive(false);        }    }    void LineByID(int id, bool isShow)    {        GameObject linesObj = root_.transform.Find("Middle").Find("ImageBG").Find("Line").gameObject;        GameObject line = linesObj.transform.Find("ImageLine_" + id.ToString()).gameObject;        line.SetActive(isShow);    }    void OnShowLine(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            for (int index = 1; index < 10; index++)            {                LineByID(index, false);                CloseLinesButton();            }            for (int index = 1; index <= (int)button; index++)            {                LineByID(index, true);            }            OpenLinesButton((int)button);            isShowLine = true;        }    }    public void SetUIPlayerMoney()    {        Text coin = root_.transform.Find("Middle").Find("ImageBG").            Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        string content = "";        long playercoin = GameMain.hall_.GetPlayerData().GetDiamond();        if (playercoin > 1000000)            content = (playercoin / 10000).ToString() + "万";        else if (playercoin > 100000000)            content = (playercoin / 100000000).ToString() + "亿";        else            content = playercoin.ToString();        coin.text = content;        //coin.text = GameMain.hall_.GetPlayerData().PlayerCoin.ToString();    }    public void InitLevelInfo()    {        Text unitchipTx = root_.transform.Find("Bottom").Find("Duzhu").            Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();        unitchipTx.text = chipLimitList.GetLimitData(level_).min.ToString(); ;        Text maxChipTx = root_.transform.Find("Bottom").            Find("Max").Find("ImageTextBG").Find("TextZongyazhu").            Find("TextNum").gameObject.GetComponent<Text>();        long maxMoney = unitChip * LB_DataCenter.Instance().chipsData.lineNumber;        maxChipTx.text = maxMoney.ToString();    }    void initUI()    {        initLineUI();        SetUIPlayerMoney();        //Text coin = root_.transform.FindChild("Middle").FindChild("ImageBG").        //    FindChild("Image_coinframe").FindChild("Text_Coin").gameObject.GetComponent<Text>();        //coin.text = GameMain.hall_.GetPlayerData().PlayerCoin.ToString();        GameObject returnBtn = root_.transform.Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn, Back2PickPanel, null);        GameObject ruleBtn = root_.transform.Find("Bottom").Find("ButtonRule").gameObject;        XPointEvent.AutoAddListener(ruleBtn, OnShowRule, null);        GameObject lineAddBtn = root_.transform.Find("Bottom").Find("Line").Find("ButtonAdd ").gameObject;        XPointEvent.AutoAddListener(lineAddBtn, AddLine, null);        GameObject lineSubBtn = root_.transform.Find("Bottom").Find("Line").Find("ButtonSubtract").gameObject;        XPointEvent.AutoAddListener(lineSubBtn, SubLine, null);        GameObject chipAddBtn = root_.transform.Find("Bottom").Find("Duzhu").Find("ButtonAdd ").gameObject;        XPointEvent.AutoAddListener(chipAddBtn, AddChip, null);        GameObject chipSubBtn = root_.transform.Find("Bottom").Find("Duzhu").Find("ButtonSubtract").gameObject;        XPointEvent.AutoAddListener(chipSubBtn, SubChip, null);        GameObject maxChipBtn = root_.transform.Find("Bottom").Find("Max").Find("ButtonMax").gameObject;        XPointEvent.AutoAddListener(maxChipBtn, MaxChip, null);        GameObject autoBtn = root_.transform.Find("Bottom").Find("Zidong").Find("ButtonZidong").gameObject;        XPointEvent.AutoAddListener(autoBtn, OnShowAutoPanel, null);        GameObject autoBtn10 = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Putong").Find("Button10").gameObject;        XPointEvent.AutoAddListener(autoBtn10, OnGameStartByTimes, 10);        GameObject autoBtn20 = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Putong").Find("Button20").gameObject;        XPointEvent.AutoAddListener(autoBtn20, OnGameStartByTimes, 20);        GameObject autoBtn50 = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Putong").Find("Button50").gameObject;        XPointEvent.AutoAddListener(autoBtn50, OnGameStartByTimes, 50);        GameObject autoBtn100 = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Putong").Find("Button100").gameObject;        XPointEvent.AutoAddListener(autoBtn100, OnGameStartByTimes, 100);        GameObject superSet = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Putong").Find("ButtonGaoji").gameObject;        XPointEvent.AutoAddListener(superSet, OnSuperSet, null);        GameObject superSetPanel = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Gaoji").gameObject;        InputField minStopMoneyDD = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Gaoji").Find("Least").Find("InputField").            gameObject.GetComponent<InputField>();        minStopMoneyDD.onValueChanged.AddListener(delegate (string content) { OnChangeAutoMinStop(content); });        InputField maxStopMoneyDD = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Gaoji").Find("Max").Find("InputField").            gameObject.GetComponent<InputField>();        maxStopMoneyDD.onValueChanged.AddListener(delegate(string content) { OnChangeAutoMaxStop(content); });        Toggle chargeCoin = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Gaoji").Find("ToggleCoin").gameObject.GetComponent<Toggle>();        chargeCoin.onValueChanged.AddListener(delegate (bool call) { OnIsChargeCoin(call); });        Toggle isTipToggle = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Gaoji").Find("ToggleTonggao").gameObject.GetComponent<Toggle>();        isTipToggle.onValueChanged.AddListener(delegate (bool call) { OnIsTips(call); });        GameObject SuperStartBtn = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Gaoji").Find("ButtonStart").gameObject;        XPointEvent.AutoAddListener(SuperStartBtn, OnGameStartByTimes, -1);        GameObject StartBtn = root_.transform.Find("Bottom").Find("ButtonStart").gameObject;        XPointEvent.AutoAddListener(StartBtn, OnGameStartByTimes, 1);        GameObject StopBtn = root_.transform.Find("Bottom").Find("ButtonStop").gameObject;        XPointEvent.AutoAddListener(StopBtn, OnGameStop, null);        Text lineNumber = root_.transform.Find("Bottom").Find("Line").            Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();        lineNumber.text = "1";        GameObject doubleBtn2 = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonFanbei").gameObject;        doubleBtn2.SetActive(false);        GameObject doubleBtn = root_.transform.Find("ButtonFanbei").gameObject;        doubleBtn.SetActive(false);        XPointEvent.AutoAddListener(doubleBtn, OnDouble, null);        GameObject AudioSetObj = root_.transform.Find("Bottom").Find("ButtonSet").gameObject;        XPointEvent.AutoAddListener(AudioSetObj, OnShowSlotSet, null);    }    void ButtonsActive(bool active)    {        Button lineAddBtn = root_.transform.Find("Bottom").Find("Line").Find("ButtonAdd ").gameObject.GetComponent<Button>();        Image lineAddImg = root_.transform.Find("Bottom").Find("Line").Find("ButtonAdd ").gameObject.GetComponent<Image>();        lineAddBtn.interactable = active;        lineAddImg.raycastTarget = active;        Button lineSubBtn = root_.transform.Find("Bottom").Find("Line").Find("ButtonSubtract").gameObject.GetComponent<Button>();        Image lineSubImg = root_.transform.Find("Bottom").Find("Line").Find("ButtonSubtract").gameObject.GetComponent<Image>();        lineSubBtn.interactable = active;        lineSubImg.raycastTarget = active;        Button chipAddBtn = root_.transform.Find("Bottom").Find("Duzhu").Find("ButtonAdd ").gameObject.GetComponent<Button>();        Image chipAddImg = root_.transform.Find("Bottom").Find("Duzhu").Find("ButtonAdd ").gameObject.GetComponent<Image>();        chipAddImg.raycastTarget = active;        chipAddBtn.interactable = active;        Button chipSubBtn = root_.transform.Find("Bottom").Find("Duzhu").Find("ButtonSubtract").gameObject.GetComponent<Button>();        Image chipSubImg = root_.transform.Find("Bottom").Find("Duzhu").Find("ButtonSubtract").gameObject.GetComponent<Image>();        chipSubBtn.interactable = active;        chipSubImg.raycastTarget = active;        Button maxChipBtn = root_.transform.Find("Bottom").Find("Max").Find("ButtonMax").gameObject.GetComponent<Button>();        Image maxChipImg = root_.transform.Find("Bottom").Find("Max").Find("ButtonMax").gameObject.GetComponent<Image>();        maxChipBtn.interactable = active;        maxChipImg.raycastTarget = active;        Button autoBtn = root_.transform.Find("Bottom").Find("Zidong").Find("ButtonZidong").gameObject.GetComponent<Button>();        Image autoImg = root_.transform.Find("Bottom").Find("Zidong").Find("ButtonZidong").gameObject.GetComponent<Image>();        autoBtn.interactable = active;        autoImg.raycastTarget = active;        Button StartBtn = root_.transform.Find("Bottom").Find("ButtonStart").gameObject.GetComponent<Button>();        Image StartImg = root_.transform.Find("Bottom").Find("ButtonStart").gameObject.GetComponent<Image>();        StartBtn.interactable = active;        StartImg.raycastTarget = active;        Button returnBtn = root_.transform.Find("ButtonReturn").gameObject.GetComponent<Button>();        Image returnImg = root_.transform.Find("ButtonReturn").gameObject.GetComponent<Image>();        returnBtn.interactable = active;        returnImg.raycastTarget = active;    }    void DoubleButton(bool active)    {        GameObject doubleBtn = root_.transform.Find("Middle").Find("ImageBG").Find("ButtonFanbei").gameObject;        doubleBtn.SetActive(active);    }    void OnDouble(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            ShowCardPanel();            //GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            //if (gamedata2 != null)            //    AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            //UMessage doubleMsg = new UMessage((uint)GameCity.EMSG_ENUM.CrazyCityMsg_LABA_TOTAL);            //doubleMsg.Add((uint)GameCity.SlotSecondMsg.LabaMsg_CM_DOUBLEREWORD);            //doubleMsg.Add(GameMain.hall_.GetPlayerData().GetPlayerID());            //HallMain.SendMsgToRoomSer(doubleMsg);            DoubleButton(false);        }    }    public void ResetGame()    {        autoTimes_ = 0;        selfDefine = false;        ButtonsActive(true);        SetStartTypeUI(0);        //Button returnBtn = root_.transform.FindChild("ButtonReturn").gameObject.GetComponent<Button>();        //Image returnImg = root_.transform.FindChild("ButtonReturn").gameObject.GetComponent<Image>();        //returnBtn.interactable = false;        //returnImg.raycastTarget = false;        GameObject StartBtn = root_.transform.Find("Bottom").Find("ButtonStart").gameObject;        StartBtn.SetActive(true);        GameObject StopBtn = root_.transform.Find("Bottom").Find("ButtonStop").gameObject;        StopBtn.SetActive(false);    }    void OnGameStop(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            //for (int index = 0; index < rollingSpeeds.Count; index++)            //{            //    if (rollingSpeeds[index] <= 500.0f)            //        continue;            //    rollingSpeeds[index] = 0.0f;            //    CorrectPosition();            //    if(currentStopIndex < 4)            //        currentStopIndex++;            //}            //ResetIcons();            autoTimes_ = 0;            selfDefine = false;            ButtonsActive(true);            SetStartTypeUI(0);            Button returnBtn = root_.transform.Find("ButtonReturn").gameObject.GetComponent<Button>();            Image returnImg = root_.transform.Find("ButtonReturn").gameObject.GetComponent<Image>();            returnBtn.interactable = true;            returnImg.raycastTarget = true;            if(isGameOver_)            {                GameObject StartBtn = root_.transform.Find("Bottom").Find("ButtonStart").gameObject;                StartBtn.SetActive(true);                GameObject StopBtn = root_.transform.Find("Bottom").Find("ButtonStop").gameObject;                StopBtn.SetActive(false);            }        }    }    void OnIsTips(bool call)    {        LB_DataCenter.Instance().autoData.isStopTips = call;    }    void OnIsChargeCoin(bool call)    {        LB_DataCenter.Instance().autoData.isChargeMoney = call;    }    void OnChangeAutoMaxStop(string money)    {        long result = 0;        if(Int64.TryParse(money, out result))        {            if(result >= 0)                LB_DataCenter.Instance().autoData.maxMoney = result;        }    }    void OnChangeAutoMinStop(string money)    {        long result = 0;        if (Int64.TryParse(money, out result))        {            if (result >= 0)                LB_DataCenter.Instance().autoData.minMoney = result;        }    }    void SuperSet(bool isShow)    {        GameObject superSetPanel = root_.transform.Find("Bottom").Find("Zidong").            Find("Menu").Find("Gaoji").gameObject;        superSetPanel.SetActive(isShow);    }    void OnSuperSet(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            SuperSet(true);        }    }    void StartByTimes(int times)    {        if (unitChip == 0)        {            CCustomDialog.OpenCustomConfirmUI(2000);            return;        }        CloseAutoPanel();        ButtonsActive(false);        DoubleButton(false);        if(selfDefine)            SetStartTypeUI(-1);        else            SetStartTypeUI(times);        //GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        //if (gamedata != null)        //    AudioManager.Instance.PlaySound(gamedata.ResourceABName, "Slots_BG_XuanZhuan");        GameObject StartBtn = root_.transform.Find("Bottom").Find("ButtonStart").gameObject;        StartBtn.SetActive(false);        GameObject StopBtn = root_.transform.Find("Bottom").Find("ButtonStop").gameObject;        StopBtn.SetActive(true);        autoTimes_ = times;        UMessage stateMsg = new UMessage((uint)GameCity.SlotSecondMsg.LabaMsg_CM_GAMESTATE);        USlotGameState sgs = new USlotGameState();        sgs.nline = LB_DataCenter.Instance().chipsData.lineNumber;        sgs.isFree = false;        sgs.userID = GameMain.hall_.GetPlayerData().GetPlayerID();        sgs.chipIn = unitChip;        sgs.SetSendData(stateMsg);        HallMain.SendMsgToRoomSer(stateMsg);        //isGaming = true;        for (int index = 0; index < rotateObjects_.Count; index++)        {            rotateObjects_[index].transform.rotation = new Quaternion();        }        rotateObjects_.Clear();        for (int index = 1; index < 10; index++)        {            LineByID(index, false);        }        //long maxMoney = unitChip * LB_DataCenter.Instance().chipsData.lineNumber;        //GameMain.hall_.GetPlayerData().PlayerCoin -= maxMoney;        //SetUIPlayerMoney();        //isSlot = true;    }    void OnGameStartByTimes(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            if (unitChip == 0)            {                CCustomDialog.OpenCustomConfirmUI(2000);                return;            }            DoubleButton(false);            //GameData gamedata1 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            //if (gamedata1 != null)            //    AudioManager.Instance.PlaySound(gamedata1.ResourceABName, "Slots_BG_XuanZhuan");            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button_start");            CloseAutoPanel();            ButtonsActive(false);            if (selfDefine)                SetStartTypeUI(-1);            else                SetStartTypeUI((int)button, (int)button > 1 || (int)button < 0);            if ((int)button > 1 || (int)button < 0)            {                GameObject StartBtn = root_.transform.Find("Bottom").Find("ButtonStart").gameObject;                StartBtn.SetActive(false);                GameObject StopBtn = root_.transform.Find("Bottom").Find("ButtonStop").gameObject;                StopBtn.SetActive(true);            }            if ((int)button > 0)                autoTimes_ = (int)button;            else            {                autoTimes_ = 1;                selfDefine = true;            }            UMessage stateMsg = new UMessage((uint)GameCity.SlotSecondMsg.LabaMsg_CM_GAMESTATE);            USlotGameState sgs = new USlotGameState();            sgs.nline = LB_DataCenter.Instance().chipsData.lineNumber;            sgs.isFree = false;            sgs.userID = GameMain.hall_.GetPlayerData().GetPlayerID();            sgs.chipIn = unitChip;            sgs.SetSendData(stateMsg);            HallMain.SendMsgToRoomSer(stateMsg);            //isGaming = true;            for(int index = 0; index < rotateObjects_.Count; index++)            {                rotateObjects_[index].transform.rotation = new Quaternion();            }            rotateObjects_.Clear();            for (int index = 1; index < 10; index++)            {                LineByID(index, false);            }            //long maxMoney = unitChip * LB_DataCenter.Instance().chipsData.lineNumber;            //GameMain.hall_.GetPlayerData().PlayerCoin -= maxMoney;            //SetUIPlayerMoney();            //isSlot = true;        }    }    void OnShowAutoPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            AutoPanel(true);        }    }    void AutoPanel(bool active)    {        GameObject menu = root_.transform.Find("Bottom").Find("Zidong").Find("Menu").gameObject;        menu.SetActive(!menu.activeSelf);        SuperSet(false);    }    void CloseAutoPanel()    {        GameObject menu = root_.transform.Find("Bottom").Find("Zidong").Find("Menu").gameObject;        menu.SetActive(false);        SuperSet(false);    }    void MaxChip(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            LB_DataCenter.Instance().chipsData.lineNumber = 9;            Text lineNumber = root_.transform.Find("Bottom").Find("Line").                 Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();            lineNumber.text = LB_DataCenter.Instance().chipsData.lineNumber.ToString();            Text maxChipTx = root_.transform.Find("Bottom").                Find("Max").Find("ImageTextBG").Find("TextZongyazhu").                Find("TextNum").gameObject.GetComponent<Text>();            long max = 0;            if (GameMain.hall_.GetPlayerData().GetDiamond() > chipLimitList.GetLimitData(level_).max * 9)            {                max = chipLimitList.GetLimitData(level_).max * 9;                currentChipIndex = 4;            }            else            {                max = GameMain.hall_.GetPlayerData().GetDiamond();                currentChipIndex = 0;            }            maxChipTx.text = max.ToString();            Text unitchipTx = root_.transform.Find("Bottom").Find("Duzhu").                Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();            long unitMoney = max / 9;                        unitChip = max / 9;            if (unitChip == 0)            {                CCustomDialog.OpenCustomConfirmUI(2000);                return;            }            unitchipTx.text = unitMoney.ToString();            for (int index = 1; index < 10; index++)            {                LineByID(index, false);                CloseLinesButton();            }            for (int index = 1; index <= 9; index++)            {                LineByID(index, true);            }            OpenLinesButton(9);            isShowLine = true;        }    }    void AddChip(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button_xiazhu");            currentChipIndex += 1;            if (currentChipIndex < unitChips.Count)                unitChip = unitChips[currentChipIndex];            else            {                currentChipIndex -= 1;                return;            }            if (unitChip * LB_DataCenter.Instance().chipsData.lineNumber > GameMain.hall_.GetPlayerData().GetDiamond())
            {
                currentChipIndex -= 1;
                unitChip = unitChips[currentChipIndex];
                return;
            }            LB_DataCenter.Instance().chipsData.unitMoney = unitChip;            Text unitchipTx = root_.transform.Find("Bottom").Find("Duzhu").                Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();            unitchipTx.text = unitChip.ToString();            Text maxChipTx = root_.transform.Find("Bottom").                Find("Max").Find("ImageTextBG").Find("TextZongyazhu").                Find("TextNum").gameObject.GetComponent<Text>();            long maxMoney = unitChip * LB_DataCenter.Instance().chipsData.lineNumber;            maxChipTx.text = maxMoney.ToString();            //GameMain.hall_.GetPlayerData().PlayerCoin -= maxMoney;            //SetUIPlayerMoney();        }    }    void SubChip(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button_xiazhu");            currentChipIndex -= 1;            if (currentChipIndex >= 0)                unitChip = unitChips[currentChipIndex];            else            {                currentChipIndex += 1;                return;            }            if (unitChip * LB_DataCenter.Instance().chipsData.lineNumber > GameMain.hall_.GetPlayerData().GetDiamond())                return;            LB_DataCenter.Instance().chipsData.unitMoney = unitChip;            Text unitchipTx = root_.transform.Find("Bottom").Find("Duzhu").                Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();            unitchipTx.text = unitChip.ToString();            Text maxChipTx = root_.transform.Find("Bottom").                Find("Max").Find("ImageTextBG").Find("TextZongyazhu").                Find("TextNum").gameObject.GetComponent<Text>();            long maxMoney = unitChip * LB_DataCenter.Instance().chipsData.lineNumber;            maxChipTx.text = maxMoney.ToString();            //GameMain.hall_.GetPlayerData().PlayerCoin -= maxMoney;            //SetUIPlayerMoney();        }    }    void AddLine(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            if (LB_DataCenter.Instance().chipsData.lineNumber >= 9)                return;            if (unitChip * LB_DataCenter.Instance().chipsData.lineNumber > GameMain.hall_.GetPlayerData().GetDiamond())                return;            LB_DataCenter.Instance().chipsData.lineNumber += 1;            Text lineNumber = root_.transform.Find("Bottom").Find("Line").                Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();            lineNumber.text = LB_DataCenter.Instance().chipsData.lineNumber.ToString();            Text maxChipTx = root_.transform.Find("Bottom").                Find("Max").Find("ImageTextBG").Find("TextZongyazhu").                Find("TextNum").gameObject.GetComponent<Text>();            long maxMoney = unitChip * LB_DataCenter.Instance().chipsData.lineNumber;            maxChipTx.text = maxMoney.ToString();            //GameMain.hall_.GetPlayerData().PlayerCoin -= maxMoney;            //SetUIPlayerMoney();            SetUILineNumber(LB_DataCenter.Instance().chipsData.lineNumber - 1);        }    }    void SubLine(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            if (LB_DataCenter.Instance().chipsData.lineNumber <= 1)                return;            if (unitChip * LB_DataCenter.Instance().chipsData.lineNumber > GameMain.hall_.GetPlayerData().GetDiamond())                return;            LB_DataCenter.Instance().chipsData.lineNumber -= 1;            Text lineNumber = root_.transform.Find("Bottom").Find("Line").                Find("ImageTextBG").Find("TextNum").gameObject.GetComponent<Text>();            lineNumber.text = LB_DataCenter.Instance().chipsData.lineNumber.ToString();            Text maxChipTx = root_.transform.Find("Bottom").                Find("Max").Find("ImageTextBG").Find("TextZongyazhu").                Find("TextNum").gameObject.GetComponent<Text>();            long maxMoney = unitChip * LB_DataCenter.Instance().chipsData.lineNumber;            maxChipTx.text = maxMoney.ToString();            //GameMain.hall_.GetPlayerData().PlayerCoin -= maxMoney;            //SetUIPlayerMoney();            SetUILineNumber(LB_DataCenter.Instance().chipsData.lineNumber - 1);        }    }    void InitRuleEvents()    {        GameObject ruleBG = root_.transform.Find("Pop-up").Find("RuleBG").gameObject;        GameObject tipBtn = root_.transform.Find("Pop-up").gameObject;        XPointEvent.AutoAddListener(tipBtn, OnCloseTips, null);        for (int index = 0; index < 4; index++)        {            string toggleName;            if (index == 0)                toggleName = "Toggle";            else                toggleName = "Toggle (" + index.ToString() + ")";            Toggle page = ruleBG.transform.Find("Tab").Find(toggleName).                gameObject.GetComponent<Toggle>();            int temp = index + 1;            page.onValueChanged.AddListener(delegate (bool call) { SwitchRulePage( temp ); });        }        GameObject leftbtn = ruleBG.transform.Find("ButtonLeft").gameObject;        XPointEvent.AutoAddListener(leftbtn, PreRulePage, null);        GameObject rightbtn = ruleBG.transform.Find("ButtonRight").gameObject;        XPointEvent.AutoAddListener(rightbtn, NextRulePage, null);        currentRulePage = 1;    }    void ShowRule()    {        GameObject tipBG = root_.transform.Find("Pop-up").gameObject;        tipBG.SetActive(true);        GameObject ruleBG = root_.transform.Find("Pop-up").Find("RuleBG").gameObject;        ruleBG.SetActive(true);    }    void PreRulePage(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            if (currentRulePage == 1)                currentRulePage = 4;            else                currentRulePage -= 1;            //SwitchRulePage(currentRulePage);            GameObject tab = root_.transform.Find("Pop-up").Find("RuleBG").Find("Tab").gameObject;            Toggle ct = tab.transform.GetChild(currentRulePage - 1).GetComponent<Toggle>();            ct.isOn = true;        }    }    void NextRulePage(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            if (currentRulePage == 4)                currentRulePage = 1;            else                currentRulePage += 1;            //SwitchRulePage(currentRulePage);            GameObject tab = root_.transform.Find("Pop-up").Find("RuleBG").Find("Tab").gameObject;            Toggle ct = tab.transform.GetChild(currentRulePage - 1).GetComponent<Toggle>();            ct.isOn = true;        }    }    void SwitchRulePage( int index )    {        currentRulePage = index;        for (int i = 1; i < 5; i++)        {            if (i == index )                continue;            GameObject otherPage = root_.transform.Find("Pop-up").Find("RuleBG").Find("Rule_" + i.ToString()).gameObject;            otherPage.SetActive(false);        }        GameObject page = root_.transform.Find("Pop-up").Find("RuleBG").Find("Rule_" + index.ToString()).gameObject;        page.SetActive(true);    }    void OnCloseTips(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            CloseTips();        }    }    void CloseTips()    {        GameObject bg = root_.transform.Find("Pop-up").gameObject;        bg.SetActive(false);        GameObject ruleBG = root_.transform.Find("Pop-up").Find("RuleBG").gameObject;        ruleBG.SetActive(false);        GameObject win = root_.transform.Find("Pop-up").Find("Win").gameObject;        win.SetActive(false);        if (GameMain.hall_.isGetRelief)            GameMain.hall_.ShowRelief();    }    void OnShowRule(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            ShowRule();        }    }    public void Exit()    {        GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata2 != null)            AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");        root_.SetActive(false);        if(pickPanel_ != null)            pickPanel_.SetActive(true);        //GameMain.hall_.GameBaseObj.ResetGameUI();        AudioManager.Instance.StopSound();        isGaming = false;
        SendLeaveRoomMsg();
        GameMain.hall_.SwitchToHallScene();    }    void SendLeaveRoomMsg()
    {
        UMessage leaveMsg = new UMessage((uint)GameCity.SlotSecondMsg.LabaMsg_CM_LEAVEROOM);
        leaveMsg.Add(GameMain.hall_.GetPlayerData().GetPlayerID());
        HallMain.SendMsgToRoomSer(leaveMsg);
    }    void Back2PickPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            root_.SetActive(false);            if(pickPanel_ != null)                pickPanel_.SetActive(true);            //GameMain.hall_.GameBaseObj.ResetGameUI();            AudioManager.Instance.StopSound();            isGaming = false;            SendLeaveRoomMsg();            GameMain.hall_.SwitchToHallScene();        }    }    void InitWinNumberSprite()    {        winMoneyNumberSprites = new List<Sprite>();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            for (int index = 0; index < 10; index++)            {                Sprite tempSprite = bundle.LoadAsset<Sprite>("word_sz_" + index.ToString());                winMoneyNumberSprites.Add(tempSprite);            }        }    }    void ClearChilds(GameObject obj)    {        int count = obj.transform.childCount;        for (int index = 0; index < count; index++)        {            GameMain.safeDeleteObj(obj.transform.GetChild(0).gameObject);        }    }    void ShowResult(long money)    {        CloseTips();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata != null)            AudioManager.Instance.PlaySound(gamedata.ResourceABName, "Slots_BG_ZhongJiang");        GameObject bg = root_.transform.Find("Pop-up").gameObject;        bg.SetActive(true);        GameObject win = root_.transform.Find("Pop-up").Find("Win").gameObject;        win.SetActive(true);        GameObject winMoneyBG = root_.transform.Find("Pop-up").Find("Win").Find("TextBG").Find("ImageNum").gameObject;                string moneyString = money.ToString();        ClearChilds(winMoneyBG);        //List<GameObject> bitObject = new List<GameObject>();        for (int index = 0; index < moneyString.Length; index++)        {            string subbit = moneyString.Substring(index, 1);            GameObject subNum = new GameObject(index.ToString());            Image subTx = subNum.AddComponent<Image>();            subTx.sprite = winMoneyNumberSprites[Convert.ToInt32(subbit)];            subNum.transform.SetParent(winMoneyBG.transform,false);        }        GameObject doubleBtn = root_.transform.Find("ButtonFanbei").gameObject;        //doubleBtn.SetActive(true);    }    void InitHistroyEvents()    {        GameObject histroyRoot = root_.transform.Find("Middle").Find("Record").gameObject;        GameObject openBtn = histroyRoot.transform.Find("ButtonOpen").gameObject;        XPointEvent.AutoAddListener(openBtn, OpenHistroyPanel, null);        GameObject closeBtn = histroyRoot.transform.Find("RecordBG").Find("ButtonClose").gameObject;        XPointEvent.AutoAddListener(closeBtn, CloseHistroyPanel, null);    }    void OpenHistroyPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            HistroyPanel(true);            ResetHistroyUI();        }    }    public void ResetHistroyUI()    {        GameObject ui = root_.transform.Find("Middle").Find("Record").Find("RecordBG").gameObject;        Text lineNumber = ui.transform.Find("TextLine").Find("TextNum").gameObject.GetComponent<Text>();        lineNumber.text = LB_DataCenter.Instance().histroyData.wLinesNumber.ToString();        Text money = ui.transform.Find("TextShouyi").Find("TextNum").gameObject.GetComponent<Text>();        money.text = LB_DataCenter.Instance().histroyData.wMoney.ToString();    }    void CloseHistroyPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            HistroyPanel(false);        }    }    void HistroyPanel(bool open)    {        GameObject histroyPanel = root_.transform.Find("Middle").Find("Record").Find("RecordBG").gameObject;        histroyPanel.SetActive(open);        GameObject histroyRoot = root_.transform.Find("Middle").Find("Record").gameObject;        GameObject openBtn = histroyRoot.transform.Find("ButtonOpen").gameObject;        openBtn.SetActive(!open);    }    public void SetWinMoney()    {        Text winMoneyTx = root_.transform.Find("Bottom").            Find("Max").Find("ImageTextBG").Find("TextWin").            Find("TextNum").gameObject.GetComponent<Text>();        winMoneyTx.text = LB_DataCenter.Instance().chipsData.winMoney.ToString();    }    void SetStartTypeUI(int times, bool isAuto = true)    {        Text typeTx = root_.transform.Find("Middle").Find("ImageBG").            Find("TipsBG").Find("TextNum").gameObject.GetComponent<Text>();        GameObject typeobj = root_.transform.Find("Middle").Find("ImageBG").Find("TipsBG").gameObject;        if ( times < 2 && times > 0 && !isAuto)        {            typeobj.SetActive(false);            return;        }        else            typeobj.SetActive(true);        if (times > 0)            typeTx.text = times.ToString() + "次";        else        {            typeTx.text = "自定义";            typeobj.SetActive(false);        }    }    public void ShowWinEffect(USlotGameResult sgr)    {        rotateObjects_.Clear();        GameObject iconPanel = root_.transform.Find("Middle").Find("ImageBG").Find("Icon").gameObject;        for (int index = 0; index < sgr.windata.Count; index++)        {            int wLineId = sgr.windata[index].lineid - 1;            LineByID(sgr.windata[index].lineid, true);            //Debug.Log("win line id:" + sgr.windata[index].lineid);            if (wLineId >= lines_.Count)                continue;            if (sgr.windata[index].lof == 1)            {                for (int i = 0; i < sgr.windata[index].number; i++)                {                    GameObject icon = iconPanel.transform.GetChild(lines_[wLineId].iconIDs[i]).gameObject;                    rotateObjects_.Add(icon);                }            }            if (sgr.windata[index].lof == 2)            {                for (int i = 4; i >= 5 - sgr.windata[index].number; i--)                {                    GameObject icon = iconPanel.transform.GetChild(lines_[wLineId].iconIDs[i]).gameObject;                    rotateObjects_.Add(icon);                }            }        }        SetUIPlayerMoney();    }    void DownBundle()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata != null)        {            //CResVersionCompareUpdate.CompareABVersionAndUpdate(gamedata.ResourceABName);            //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            UnityEngine.Object obj0 = bundle.LoadAsset("Slots_Game_Fanbei");            cardroot_ = (GameObject)GameMain.instantiate(obj0);            GameObject background = GameObject.Find("Canvas/Root");            cardroot_.transform.SetParent(background.transform, false);            cardroot_.SetActive(false);            UnityEngine.Object obj1 = bundle.LoadAsset("Slots_Game_Choujiang");            bellroot_ = (GameObject)GameMain.instantiate(obj1);            bellroot_.transform.SetParent(background.transform, false);            bellroot_.SetActive(false);            initBellEvents();        }    }    public void SetCardData()    {        if (dc == null)        {            dc = new LB_DoubleCard();            dc.Start(cardroot_, sgr_, scr);        }        else        {            dc.scr_ = scr;            dc.sgr_ = sgr_;        }    }    public void ShowCardResult()    {        dc.ShowResult();    }    void ShowCardPanel()    {                if (dc == null)        {            DownBundle();            dc = new LB_DoubleCard();            dc.Start(cardroot_, sgr_, scr);        }        dc.ShowCardPanel();    }    void CloseCardPanel()    {        dc.CloseCardPanel();    }    List<AnimatorData> animates_;    void initBellEvents()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata == null)            return;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        if (animates_ == null)            animates_ = new List<AnimatorData>();        animates_.Clear();        for (int index = 0; index < 9; index++)        {            string buttonName = "";            if (index == 0)                buttonName = "Button_Choujiang";            else                buttonName = "Button_Choujiang (" + index.ToString() + ")";            GameObject bellButton = bellroot_.transform.Find("ImageBG").Find("Button").Find(buttonName).gameObject;            AnimatorData ad = new AnimatorData();            UnityEngine.Object animateObj = (GameObject)bundle.LoadAsset("Anime_FanPai");            ad.animate = (GameObject)GameMain.instantiate(animateObj);            ad.animate.transform.SetParent(bellButton.transform, false);            animates_.Add(ad);            int temp = index;            XPointEvent.AutoAddListener(bellButton, onBellCard, temp);        }        GameObject btnReturn = bellroot_.transform.Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(btnReturn, onCloseBell, null);    }    void onCloseBell(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if(eventtype == EventTriggerType.PointerUp)        {            ResetAnimates();            CloseBellCardPanel();        }    }    void onBellCard(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            SetTargetMoneyById(1, 100);            int index = (int)button;            UnityArmatureComponent cardAnimate = animates_[index].animate.GetComponent<UnityArmatureComponent>();            cardAnimate.animation.Play("newAnimation");            animates_[index].isCall = true;        }    }    void UpdateAnimates(float time)    {        for(int index = 0; index < animates_.Count; index++)        {            if(animates_[index].isCall)            {                animates_[index].currenttime += time;                if(animates_[index].currenttime >= AnimatorData.lasttime)                {                    animates_[index].currenttime = 0.0f;                    animates_[index].isCall = false;                    animates_[index].animate.SetActive(false);                }            }        }    }    void ResetAnimates()    {        if (animates_ == null)            return;        for (int index = 0; index < animates_.Count; index++)        {            animates_[index].animate.SetActive(true);        }    }    public void ShowBellCardPanel()    {        if (animates_ == null)            initBellEvents();        bellroot_.SetActive(true);    }    void CloseBellCardPanel()    {        bellroot_.SetActive(false);    }    void OpenLeftBells()    {        for (int index = 0; index < animates_.Count; index++)        {            if (animates_[index].animate.activeSelf)            {                animates_[index].isCall = true;                UnityArmatureComponent cardAnimate = animates_[index].animate.GetComponent<UnityArmatureComponent>();                cardAnimate.animation.Play("newAnimation");            }        }    }    void SetTargetMoneyById(int index, long money)    {        string jpName = "";        if (index == 0)            jpName = "Image_jiangpin";        else            jpName = "Image_jiangpin (" + index.ToString() + ")";        GameObject jpObj = bellroot_.transform.Find("ImageBG").Find("Jiangpin").Find(jpName).gameObject;        Text moneyTx = jpObj.transform.Find("Text").gameObject.GetComponent<Text>();        moneyTx.text = money.ToString();    }    GameObject AudioSet;    void LoadAudioSetObject()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object obj0 = bundle.LoadAsset("Slots_Set");        AudioSet = (GameObject)GameMain.instantiate(obj0);        GameObject background = GameObject.Find("Canvas/Root");        AudioSet.transform.SetParent(background.transform, false);        AudioSet.SetActive(false);        Slider music = AudioSet.transform.Find("Set").Find("Slider_Music").gameObject.GetComponent<Slider>();        Slider sound = AudioSet.transform.Find("Set").Find("Slider_Sound").gameObject.GetComponent<Slider>();        GameObject closeBtn = AudioSet.transform.Find("Set").Find("ButtonClose").gameObject;        XPointEvent.AutoAddListener(closeBtn, CloseAudioSet, null);        music.onValueChanged.AddListener(delegate (float value) { ChangeMusicVolume(value); });        sound.onValueChanged.AddListener(delegate (float value) { ChangeSoundVolume(value); });    }    void ChangeMusicVolume(float value)    {        AudioManager.Instance.MusicVolume = value;    }    void ChangeSoundVolume(float value)    {        AudioManager.Instance.SoundVolume = value;    }    void OnShowSlotSet(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            if (AudioSet == null)                LoadAudioSetObject();            AudioSet.SetActive(true);        }    }    void CloseAudioSet(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            if (AudioSet == null)                LoadAudioSetObject();            AudioSet.SetActive(false);        }    }}