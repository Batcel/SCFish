using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using USocket.Messages;using UnityEngine.EventSystems;using DragonBones;using XLua;[Hotfix]public class CGame_LaBa : CGameBase{    GameObject pickroot_;    GameObject gameroot_;    LB_StartGame game_;    bool isgame_;    public USlotBackLogin sbl;    public CGame_LaBa() :base(GameKind_Enum.GameKind_LaBa)    {        pickroot_ = null;        gameroot_ = null;        game_ = null;        isgame_ = false;        sbl = null;        InitSlotMsg();    }    // Use this for initialization    public override void Initialization()    {        base.Initialization();        DownBundle();        //LoadPickUI();        //init();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata != null)            AudioManager.Instance.PlayBGMusic(gamedata.ResourceABName, "Slots_BG");        PickOne();    }		// Update is called once per frame	public override void ProcessTick()    {        base.ProcessTick();        if (isgame_)            game_.Update();	}    void DownBundle()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata != null)        {            //CResVersionCompareUpdate.CompareABVersionAndUpdate(gamedata.ResourceABName);            //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            UnityEngine.Object obj0 = bundle.LoadAsset("Slots_Game");            gameroot_ = (GameObject)GameMain.instantiate(obj0);            GameObject background = GameObject.Find("Canvas/Root");            gameroot_.transform.SetParent(background.transform, false);            //gameroot_.SetActive(false);        }    }    void LoadPickUI()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            UnityEngine.Object obj0 = bundle.LoadAsset("Slots_Lobby");            pickroot_ = (GameObject)GameMain.instantiate(obj0);            GameObject background = GameObject.Find("Canvas/Root");            pickroot_.transform.SetParent(background.transform, false);        }    }    public override void ResetGameUI()    {        if (pickroot_ == null)            return;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        Image icon = pickroot_.transform.Find("Top").Find("Image_HeadFram").Find("Image_Mask").            Find("Image_Head").gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(GameMain.hall_.GetPlayerData().GetPlayerIconURL(),            GameMain.hall_.GetPlayerId(), (int)GameMain.hall_.GetPlayerData().PlayerIconId);        Text name = pickroot_.transform.Find("Top").Find("ImageBG").Find("TextName").gameObject.GetComponent<Text>();        name.text = GameMain.hall_.GetPlayerData().GetPlayerName();        Image vipImg = pickroot_.transform.Find("Top").Find("ImageBG").Find("Image_Vip").            Find("Vip_Text").Find("Num").gameObject.GetComponent<Image>();        vipImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_sz_vip_" + GameMain.hall_.GetPlayerData().GetVipLevel().ToString());        Image vipTypeImg = pickroot_.transform.Find("Top").Find("ImageBG").Find("Image_Vip").gameObject.GetComponent<Image>();        if (GameMain.hall_.GetPlayerData().GetVipLevel() == 0)            vipTypeImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_hui");        else            vipTypeImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_jin");        Text money = pickroot_.transform.Find("Top").Find("ImageBG").Find("Image_coinframe").            Find("Text_Coin").gameObject.GetComponent<Text>();        money.text = GameMain.hall_.GetPlayerData().GetCoin().ToString();        Text diamond = pickroot_.transform.Find("Top").Find("ImageBG").Find("Image_DiamondFrame").            Find("Text_Diamond").gameObject.GetComponent<Text>();        diamond.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();    }    public override void RefreshGamePlayerCoin(uint AddMoney)    {        base.RefreshGamePlayerCoin(AddMoney);        Text money = pickroot_.transform.Find("Top").Find("ImageBG").Find("Image_coinframe").           Find("Text_Coin").gameObject.GetComponent<Text>();        long coin;        long.TryParse(money.text, out coin);        coin += AddMoney;        money.text = coin.ToString();        Text coinTx = gameroot_.transform.Find("Middle").Find("ImageBG").            Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        long.TryParse(coinTx.text, out coin);        coin += AddMoney;        coinTx.text = coin.ToString();    }    void Back2Hall(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            GameMain.hall_.SwitchToHallScene();        }    }    void init()    {        ResetGameUI();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        GameObject returnBtn = pickroot_.transform.Find("Top").Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn, Back2Hall, null);        Object xinshouObj = (GameObject)bundle.LoadAsset("Anime_LbIcon_xinshou");        GameObject xinshou = (GameObject)GameMain.instantiate(xinshouObj);        xinshou.transform.SetParent(pickroot_.transform.Find("Middle").Find("Button_1Xinshou"), false);        Object gaoshouObj = (GameObject)bundle.LoadAsset("Anime_LbIcon_gaoshou");        GameObject gaoshou = (GameObject)GameMain.instantiate(gaoshouObj);        gaoshou.transform.SetParent(pickroot_.transform.Find("Middle").Find("Button_2Gaoshou"), false);        Object zhuanjiaObj = (GameObject)bundle.LoadAsset("Anime_LbIcon_zhuanjia");        GameObject zhuanjia = (GameObject)GameMain.instantiate(zhuanjiaObj);        zhuanjia.transform.SetParent(pickroot_.transform.Find("Middle").Find("Button_3Zhuangjia"), false);        GameObject xinshouBtn = pickroot_.transform.Find("Middle").Find("Button_1Xinshou").gameObject;        XPointEvent.AutoAddListener(xinshouBtn, Go2Xinshouchang, xinshou);        GameObject gaoshouBtn = pickroot_.transform.Find("Middle").Find("Button_2Gaoshou").gameObject;        XPointEvent.AutoAddListener(gaoshouBtn, Go2Gaoshouchang, gaoshou);        GameObject zhuanjiaBtn = pickroot_.transform.Find("Middle").Find("Button_3Zhuangjia").gameObject;        XPointEvent.AutoAddListener(zhuanjiaBtn, Go2Zhuanjiachang, zhuanjia);        GameObject zongshiBtn = pickroot_.transform.Find("Middle").Find("Button_4Zongshi").gameObject;        XPointEvent.AutoAddListener(zongshiBtn, Go2Zongshichang, null);        isgame_ = false;    }    bool BackSlotChooseLevel(uint msgType, UMessage msg)    {        Debug.Log("slot game state");        byte nb = msg.ReadByte();        if (nb == 0)        {            //ShowLBTips("金币不足,无法进入");            CCustomDialog.OpenCustomConfirmUI(2000);            return false;        }        //pickroot_.SetActive(false);        gameroot_.SetActive(true);        return true;    }    bool BackSlotGameState(uint msgType, UMessage msg)    {        USlotGameResult sgr = new USlotGameResult();        sgr.ReadData(msg);        if (!sgr.isStart)        {            //ShowLBTips("金币不足");            CCustomDialog.OpenCustomConfirmUI(2000);            game_.ResetGame();            return false;        }        else        {            game_.isGaming = true;            game_.isSlot = true;            GameData gamedata1 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata1 != null)                AudioManager.Instance.PlaySound(gamedata1.ResourceABName, "Slots_BG_XuanZhuan");        }        for (int index = 0; index < sgr.icons.Count; index++)            LB_DataCenter.Instance().icons.iconsList[index] = (byte)(sgr.icons[index] - 1);        LB_DataCenter.Instance().histroyData.wLinesNumber = sgr.nLinenum;        LB_DataCenter.Instance().histroyData.wMoney = sgr.nWinCoin;        LB_DataCenter.Instance().chipsData.winMoney = sgr.getCoin;        //GameMain.hall_.GetPlayerData().SetCoin(sgr.playerCoin);        game_.sgr_ = sgr;        return true;    }    bool BackSlotDoubleReward(uint msgType, UMessage msg)    {        LB_DataCenter.Instance().chipsData.winMoney = msg.ReadLong() * 2;        GameMain.hall_.GetPlayerData().SetCoin(msg.ReadLong());        game_.SetWinMoney();        game_.SetUIPlayerMoney();        return true;    }    bool BackSlotKickOut(uint msgType, UMessage msg)    {        game_.isKickOut = true;
        //ShowLBTips("金币不足，将强制退出房间");

        LB_DataCenter.Instance().isKickOut = true;        return true;    }    public void InitSlotMsg()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.SlotSecondMsg.LabaMsg_SM_CHOOSElEVEL, BackSlotChooseLevel);          //选场        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.SlotSecondMsg.LabaMsg_SM_GAMESTATE, BackSlotGameState);              //游戏开始        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.SlotSecondMsg.LabaMsg_SM_DOUBLEREWORD, BackSlotDoubleReward);        //奖励翻倍         CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.SlotSecondMsg.LabaMsg_SM_KICKOUTROOM, BackSlotKickOut);              //踢出房间    }    void PickGameMessage(byte level)    {        UMessage chooseLevel = new UMessage((uint)GameCity.SlotSecondMsg.LabaMsg_CM_CHOOSElEVEL);        USlotPickGame spg = new USlotPickGame();        spg.userID = GameMain.hall_.GetPlayerId();        spg.level = level;        spg.SetSendData(chooseLevel);        //if (HallMain.gametcpclient.IsSocketConnected)        //{            HallMain.SendMsgToRoomSer(chooseLevel);        //}    }    void OnExit(object value)
    {
        UMessage leaveMsg = new UMessage((uint)GameCity.SlotSecondMsg.LabaMsg_CM_LEAVEROOM);
        leaveMsg.Add(GameMain.hall_.GetPlayerData().GetPlayerID());
        HallMain.SendMsgToRoomSer(leaveMsg);

        GameMain.hall_.SwitchToHallScene();
    }    void PickOne()
    {
        GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);
        if (gamedata2 != null)
            AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");
        //先进入该场条件是否达到
        List<int> coinlimitlist = LB_DataCenter.Instance().LevelJoinCoinLimit.ins;
        if (coinlimitlist.Count > 0 && GameMain.hall_.GetPlayerData().GetDiamond() < coinlimitlist[0])
        {
            CCustomDialog.OpenCustomConfirmUIWithFormatParamFunc(2003, OnExit, coinlimitlist[0]);
            
            return;
        }

        if (game_ == null)
        {
            game_ = new LB_StartGame();
            game_.Start(gameroot_, pickroot_, 1);
        }
        else
        {
            game_.level_ = 1;
            game_.reset();
        }
        isgame_ = true;
        game_.InitLevelInfo();

        PickGameMessage(1);
    }    void Go2Xinshouchang(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            PickOne();        }        if (eventtype == EventTriggerType.PointerDown)        {            UnityArmatureComponent animate = ((GameObject)button).GetComponent<UnityArmatureComponent>();            animate.animation.Play("newAnimation");        }    }    void Go2Gaoshouchang(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            //先进入该场条件是否达到            List<int> coinlimitlist = LB_DataCenter.Instance().LevelJoinCoinLimit.ins;            if (coinlimitlist.Count > 1 && GameMain.hall_.GetPlayerData().GetCoin() < coinlimitlist[1])            {                CCustomDialog.OpenCustomConfirmUIWithFormatParam(2003, coinlimitlist[1]);                return;            }            if (game_ == null)            {                game_ = new LB_StartGame();                game_.Start(gameroot_, pickroot_, 2);            }            else            {                game_.level_ = 2;                game_.reset();            }            isgame_ = true;            game_.InitLevelInfo();            PickGameMessage(2);        }        if (eventtype == EventTriggerType.PointerDown)        {            UnityArmatureComponent animate = ((GameObject)button).GetComponent<UnityArmatureComponent>();            animate.animation.Play("newAnimation");        }    }    void Go2Zhuanjiachang(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            //先进入该场条件是否达到            List<int> coinlimitlist = LB_DataCenter.Instance().LevelJoinCoinLimit.ins;            if (coinlimitlist.Count > 2 && GameMain.hall_.GetPlayerData().GetCoin() < coinlimitlist[2])            {                CCustomDialog.OpenCustomConfirmUIWithFormatParam(2003, coinlimitlist[2]);                return;            }            if (game_ == null)            {                game_ = new LB_StartGame();                game_.Start(gameroot_, pickroot_, 3);            }            else            {                game_.level_ = 3;                game_.reset();            }            isgame_ = true;            game_.InitLevelInfo();            PickGameMessage(3);        }        if (eventtype == EventTriggerType.PointerDown)        {            UnityArmatureComponent animate = ((GameObject)button).GetComponent<UnityArmatureComponent>();            animate.animation.Play("newAnimation");        }    }    void Go2Zongshichang(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            GameData gamedata2 = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_LaBa);            if (gamedata2 != null)                AudioManager.Instance.PlaySound(gamedata2.ResourceABName, "Slots_button");            if (game_ == null)            {                game_ = new LB_StartGame();                game_.Start(gameroot_, pickroot_, 4);            }            else            {                game_.level_ = 4;                game_.reset();            }            isgame_ = true;            game_.InitLevelInfo();            PickGameMessage(4);        }    }

    public override void ReconnectSuccess()
    {
        base.ReconnectSuccess();

        CCustomDialog.OpenCustomConfirmUI(1018, (p) => game_.Exit());
    }}