using System.Collections;using System.Collections.Generic;using UnityEngine;using XLua;public class ChipsLimitData{    public long inLimit = 0;    public long outLimit = 0;    public long min = 0;    public long two = 0;    public long three = 0;    public long four = 0;    public long five = 0;    public long six = 0;    public long seven = 0;    public long eight = 0;    public long nine = 0;    public long max = 0;}[Hotfix]public class LB_ChipsLimitData{    private Dictionary<int, ChipsLimitData> limitDict;    //private List<string[]> allArrary;    public LB_ChipsLimitData()    {        limitDict = new Dictionary<int, ChipsLimitData>();    }    /// <summary>    /// 读取拉霸押注限制数据表    /// </summary>    public void LoadGameDataFile()    {        List<string[]> strList;        CReadCsvBase.ReaderCsvDataFromAB(GameDefine.CsvAssetbundleName, GameDefine.SlotChipFileName, out strList);        int columnCount = strList.Count;        for (int i = 2; i < columnCount; i++)        {            ChipsLimitData limitdata = new ChipsLimitData();            long.TryParse(strList[i][0], out limitdata.inLimit);            long.TryParse(strList[i][1], out limitdata.outLimit);            long.TryParse(strList[i][2], out limitdata.min);            long.TryParse(strList[i][3], out limitdata.two);            long.TryParse(strList[i][4], out limitdata.three);            long.TryParse(strList[i][5], out limitdata.four);            long.TryParse(strList[i][6], out limitdata.five);            //long.TryParse(strList[i][7], out limitdata.six);            //long.TryParse(strList[i][8], out limitdata.seven);            //long.TryParse(strList[i][9], out limitdata.eight);            //long.TryParse(strList[i][10], out limitdata.nine);            long.TryParse(strList[i][6], out limitdata.max);            limitDict.Add(i - 1, limitdata);        }    }    /// <summary>    /// 获取拉霸图标数据    /// </summary>    /// <param name="itemId"></param>    /// <returns></returns>    public ChipsLimitData GetLimitData(int level)    {        if (limitDict.ContainsKey(level))            return limitDict[level];        return null;    }    public int GetDataLength()    {        return limitDict.Count;    }}public class LB_HistroyData{    public uint wLinesNumber = 0;    public long wMoney = 0;}public class LB_ChipsData{    public byte lineNumber = 1;    public long unitMoney = 0;    public long totalMoney = 0;    public long winMoney = 0;}public class LB_AutoData{    public long maxMoney = 0;    public long minMoney = 0;    public bool isChargeMoney = true;    public bool isStopTips = true;    public uint times = 0;}public class LB_Icons{    public LB_Icons()    {        iconsList = new List<byte>();        for (int index = 0; index < 15; index++)            iconsList.Add(0);    }    public List<byte> iconsList;}public class LB_DataCenter{    static LB_DataCenter instance;    public LB_HistroyData histroyData;    public LB_ChipsData chipsData;    public LB_AutoData autoData;    public LB_Icons icons;    public LB_ChipsLimitData limit;    public USlotBackLogin LevelJoinCoinLimit;    public bool isKickOut;    LB_DataCenter()    {        isKickOut = false;        histroyData = new LB_HistroyData();        chipsData = new LB_ChipsData();        autoData = new LB_AutoData();        icons = new LB_Icons();        limit = new LB_ChipsLimitData();        LevelJoinCoinLimit = new USlotBackLogin();    }    public static LB_DataCenter Instance()    {        if (instance == null)            instance = new LB_DataCenter();        return instance;    }}