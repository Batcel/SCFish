using DragonBones;using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.EventSystems;using UnityEngine.UI;using USocket.Messages;using DG.Tweening;using XLua;[Hotfix]public class FD_StartGame{    GameObject root_;    GameObject AnimalRotationAxis;    GameObject ColorRotationAxis;    GameObject ClockRotationAxis;    GameObject pickPanel_;    GameObject gamePanel_;    GameObject chipPanel_;    int TargetColorPosition;    public string TargetAnimalName;    public int targetColor;    float amimalSpeed_;    float clockSpeed_;    public float chipTime;    float rotateTime;    float currentRotateTime;    bool stopRotate;    bool endGame;    public List<byte> colorList_;    //List<byte> animalList_;    List<string> animalNames_;    Material red_;    Material yellow_;    Material green_;    Material middle_;    Dictionary<int, GameObject> chipObjects_;    Dictionary<int, uint> chipTypeDict_;    public uint currentChouMa_;    public Dictionary<int,ChipsData> CurrentChips_;    Dictionary<int, ChipsData> LastChips_;    GameObject stage;    GameObject fourStage;    GameObject target_;    Vector3 endspeed_;    bool startend_;    public bool begin_;    GameObject resultPanel_;    bool isresult_;    float resultTime_;    float crTime_;    long oneRoundTotalChip_;    public ForestDanceShowResult fdsr_;    public ForestDanceResult fdr_;    public ForestDanceStartGame fdsg_;    GameObject histroyPanel_;    UnityArmatureComponent resultArmature;    GameObject rewardArmature;    GameObject threeEffect;    List<GameObject> Animals_;    public int level;    System.Random rd = new System.Random(6);    public FD_StartGame()    {        chipObjects_ = new Dictionary<int, GameObject>();        colorList_ = new List<byte>();        //animalList_ = new List<byte>();        CurrentChips_ = new Dictionary<int, ChipsData>();        LastChips_ = new Dictionary<int, ChipsData>();        Animals_ = new List<GameObject>();        root_ = GameObject.Find("Game_Model");        stage = root_.transform.Find("Model_Stage").Find("Rotation_Stage").Find("A1_slwh_cj_f").Find("sign").gameObject;        fourStage = root_.transform.Find("A1_slwh_cj_r").gameObject;        LoadResource();        LoadThreeEffectPrefab();        LoadFlashEffectPrefab();        initLastChipData();        //LoadSceneEffect();        //currentChouMa_ = 100;        fdr_ = new ForestDanceResult();        fdsr_ = new ForestDanceShowResult();        fdsg_ = new ForestDanceStartGame();        fdrd_ = new ForestDanceRoomData();    }    public void Start(GameObject pickPanel)    {        AnimalRotationAxis = root_.transform.Find("Model_Animal").gameObject;        ColorRotationAxis = root_.transform.Find("Model_Colour").gameObject;        ClockRotationAxis = root_.transform.Find("Model_Stage").gameObject;        pickPanel_ = pickPanel;        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if(gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle != null)            {                red_ = bundle.LoadAsset<Material>("Color_1");                yellow_ = bundle.LoadAsset<Material>("Color_2");                green_ = bundle.LoadAsset<Material>("Color_3");                middle_ = bundle.LoadAsset<Material>("Color_4");            }        }        resetData();        InitUI();        initAnimalNames();        //initChipData();        ResetAnimalModel();        ResetSceneColor();        //ResetStartEffect();        InitZHXSprites();        InitSet();        InitFourAnimalList();        LoadGunMaterials();        InitHandselEffect();        InitCameraPoints();    }    bool isCount = false;    bool isPlayStartEffect = false;    float openResultTime = 1.0f;    float currentOpenResultTime = 0.0f;    bool resultState = false;    public void Update()    {        float time = Time.deltaTime;        chipTime -= time;        if (chipTime <= 3.0f && !isCount)        {            FD_AudioDataManager.GetInstance().PlayAudio(1001);            isCount = true;        }        if (chipTime <= 0.0f)        {            chipTime = 0.0f;        }        if (chipTime <= 0.0f && endGame)        {            chipTime = 0.0f;            endGame = false;        }        if(isOpenResult && !resultState)        {            currentOpenResultTime += time;            if(currentOpenResultTime >= openResultTime)            {                resultState = true;                currentOpenResultTime = 0.0f;                if ((GameCity.ForestMode_Enum)fdr_.model == GameCity.ForestMode_Enum.ForestMode_Three)                {                    threeEffect.SetActive(true);                    InitThreeEffect();                    return;                }                if ((GameCity.ForestMode_Enum)fdr_.model == GameCity.ForestMode_Enum.ForestMode_GiveGun)                {                    InitGiveGun();                    return;                }            }        }        StartDance(time);        ChipTimeUpdate();        PlayEndEffect(time);        if (refreshColor_)             InitColors(time);        //PlaySceneLight(time);        ChangeSceneColor(time);        Jump2FourStage();        UpFourStage(time);        PlayThreeEffect();        //MoveCamera2End();        //MoveCamera2Start();        ShowStartChip(time);    }    bool isShowStartChip = false;    float startChipTime = 2.0f;    float currentStartChipTime = 0.0f;    void ShowStartChip(float time)    {        if(isShowStartChip)        {            GameObject startTips = gamePanel_.transform.Find("Bet").Find("ImageTips").gameObject;            startTips.SetActive(true);            currentStartChipTime += time;            if(currentStartChipTime >= startChipTime)            {                isShowStartChip = false;                currentStartChipTime = 0.0f;                CloseStartChip();            }        }    }    void Resulting(bool isShow)    {        GameObject waittext = gamePanel_.transform.Find("Bottom").Find("ImagTextWaiting").gameObject;        waittext.SetActive( isShow );    }    void CloseStartChip()    {        GameObject startTips = gamePanel_.transform.Find("Bet").Find("ImageTips").gameObject;        startTips.SetActive(false);    }    void LoadThreeEffectPrefab()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Effect_DaSanYuan");        threeEffect = (GameObject)GameMain.instantiate(obj0);        threeEffect.transform.SetParent(root_.transform.Find("Scene_Effect"),false);        threeEffect.SetActive(false);    }    GameObject flashEffect;    void LoadFlashEffectPrefab()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Effect_Shandian_All");        flashEffect = (GameObject)GameMain.instantiate(obj0);        flashEffect.transform.SetParent(root_.transform.Find("Scene_Effect"));        flashEffect.SetActive(false);    }    void ResetStartEffect()    {        if(flashEffect != null)            flashEffect.SetActive(false);        if (threeEffect != null)            threeEffect.SetActive(false);        if (fourStage != null)            fourStage.SetActive(false);    }    void PlayStartEffect(GameCity.ForestMode_Enum modetype)    {        if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Normal)        {            FD_AudioDataManager.GetInstance().PlayAudio(1002, false);            return;        }        if (modetype == GameCity.ForestMode_Enum.ForestMode_Flash)        {            FD_AudioDataManager.GetInstance().PlayAudio(1040, false);            FD_AudioDataManager.GetInstance().PlayAudio(1035);            flashEffect.SetActive(true);            return;        }        if(modetype == GameCity.ForestMode_Enum.ForestMode_Handsel)        {            FD_AudioDataManager.GetInstance().PlayAudio(1041, false);            FD_AudioDataManager.GetInstance().PlayAudio(1034);            StartHandselEffect();            return;        }        if(modetype == GameCity.ForestMode_Enum.ForestMode_Three)        {            FD_AudioDataManager.GetInstance().PlayAudio(1004, false);            OpenResultStage();            //threeEffect.SetActive(true);            //InitThreeEffect();            return;        }        if(modetype == GameCity.ForestMode_Enum.ForestMode_Four)        {            FD_AudioDataManager.GetInstance().PlayAudio(1003, false);            fourStage.SetActive(true);            InitFourPoints();            return;        }                if(modetype == GameCity.ForestMode_Enum.ForestMode_GiveGun)        {            FD_AudioDataManager.GetInstance().PlayAudio(1005, false);            FD_AudioDataManager.GetInstance().PlayAudio(1036);            guntimes_ = fdr_.sign;            OpenResultStage();            //InitGiveGun();            return;        }    }    void StopStartEffect()    {    }    float guntime_ = 2.0f;    float currentGunTime = 0.0f;    bool isGunNext = false;    void StartDance(float time)    {        if (begin_)        {            chipPanel_.SetActive(false);            if (!isPlayStartEffect)            {                isPlayStartEffect = true;                PlayStartEffect((GameCity.ForestMode_Enum)fdr_.model);            }            if (!endGame)            {                if(fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_GiveGun)                {                    if (!isGunNext)                    {                        currentGunTime += time;                        if (currentGunTime >= guntime_)                        {                            currentGunTime = 0.0f;                            isGunNext = true;                            amimalSpeed_ = 200.0f;                            clockSpeed_ = 200.0f;                        }                        return;                    }                }                if (chipTime <= 0.0f)                {                    chipTime = 0.0f;                    if (!stopRotate)                    {                        if (currentRotateTime >= rotateTime)                            StopRotate(time);                        else                            currentRotateTime += time;                    }                    if (!endGame)                    {                        Rotating(time);                    }                }            }        }        if(zhxSpeed == 15.0f)        {            SwitchZHX(time);        }    }    void ChipTimeUpdate()    {        if (gamePanel_ == null)            return;        Text timeTx = gamePanel_.transform.Find("CountdownBG").Find("TextNum").gameObject.GetComponent<Text>();        timeTx.text = ((int)chipTime).ToString();    }    public void resetData()    {        if (TargetColorPosition == -1)        {            resetChipInfo();            return;        }        TargetColorPosition = -1;        //chipTime = 30.0f;        amimalSpeed_ = 200.0f;        clockSpeed_ = 200.0f;        rotateTime = 0.0f;        currentRotateTime = 0.0f;        stopRotate = false;        endGame = true;        //currentChouMa_ = 100;        startend_ = false;        isJumpFour_ = false;        isUpFour_ = false;        begin_ = false;        isPlayStartEffect = false;        isresult_ = false;        resultTime_ = 10.0f;        crTime_ = 0.0f;        oneRoundTotalChip_ = 0;        isChangeSceneColor = false;        startThree_ = false;        isSwitchAnimal = false;        effectIndex_ = 0;        if (threeEffect != null)            threeEffect.SetActive(false);        //InitColors();        //initChipData();        if (fdr_ != null)        {            if (chipPanel_ != null)            {                chipPanel_.SetActive(true);                AutoChip();            }        }        if (BetTypes != null)            ResetBetType();        UpdatePlayerCoin(GameMain.hall_.GetPlayerData().GetDiamond());        isShowStartChip = true;    }    void resetChipInfo()    {        if (chipTypeDict_ == null)            chipTypeDict_ = new Dictionary<int, uint>();        chipTypeDict_.Clear();        switch (level)        {            case 1:                chipTypeDict_.Add(1, FD_AudioDataManager.GetInstance().chipList[0].gradeone);                chipTypeDict_.Add(2, FD_AudioDataManager.GetInstance().chipList[0].gradetwo);                chipTypeDict_.Add(3, FD_AudioDataManager.GetInstance().chipList[0].gradethree);                chipTypeDict_.Add(4, FD_AudioDataManager.GetInstance().chipList[0].gradefour);                chipTypeDict_.Add(5, FD_AudioDataManager.GetInstance().chipList[0].gradefive);                break;            case 2:                chipTypeDict_.Add(1, FD_AudioDataManager.GetInstance().chipList[1].gradeone);                chipTypeDict_.Add(2, FD_AudioDataManager.GetInstance().chipList[1].gradetwo);                chipTypeDict_.Add(3, FD_AudioDataManager.GetInstance().chipList[1].gradethree);                chipTypeDict_.Add(4, FD_AudioDataManager.GetInstance().chipList[1].gradefour);                chipTypeDict_.Add(5, FD_AudioDataManager.GetInstance().chipList[1].gradefive);                break;            case 3:                chipTypeDict_.Add(1, FD_AudioDataManager.GetInstance().chipList[2].gradeone);                chipTypeDict_.Add(2, FD_AudioDataManager.GetInstance().chipList[2].gradetwo);                chipTypeDict_.Add(3, FD_AudioDataManager.GetInstance().chipList[2].gradethree);                chipTypeDict_.Add(4, FD_AudioDataManager.GetInstance().chipList[2].gradefour);                chipTypeDict_.Add(5, FD_AudioDataManager.GetInstance().chipList[2].gradefive);                break;        }        ResetChipsNumber();        Toggle btnIsAuto = gamePanel_.transform.Find("Bet").Find("ImageBG").            Find("ButtonBG").Find("ButtonGoOn").Find("ToggleZidong").gameObject.GetComponent<Toggle>();        isAutoChip = btnIsAuto.isOn;    }    void ResetChipsNumber()    {        GameObject chipBG = gamePanel_.transform.Find("Bet").Find("ImageBG").Find("Chip").gameObject;        for (int index = 0; index < 5; index++)        {            string cpname = "";            if (index == 0)                cpname = "Toggle";            else                cpname = "Toggle (" + index.ToString() + ")";            Text chipsTx = chipBG.transform.Find(cpname).Find("TextNum").gameObject.GetComponent<Text>();            uint chipbutton = chipTypeDict_[index + 1];            if (chipbutton >= 10000)                chipsTx.text = (chipbutton / 10000) + "万";            else                chipsTx.text = chipbutton.ToString();        }    }    void Rotating(float time)    {        ClockRotating(time);        AnimalRotating(time);        SwitchZHX(time);    }    void StopRotate(float time)    {        if (clockSpeed_ > 30.0f)        {            if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Handsel)                clockSpeed_ -= 60.0f * time;            else                clockSpeed_ -= 30.0f * time;        }        if (amimalSpeed_ > 30.0f)        {            if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Handsel)                amimalSpeed_ -= 60.0f * time;            else                amimalSpeed_ -= 30.0f * time;        }         if (clockSpeed_ > 30.0f)            return;        if (TargetColorPosition == GetCurrentClockPosition())        {            clockSpeed_ = 0.0f;            //ClockRotationAxis.transform.rotation = Quaternion.Euler(new Vector3(0.0f, 15 * TargetColorPosition, 0.0f));        }        else        {            if (TargetColorPosition == -1)              {                if (targetColor <= 0)                {                    if (fdr_ != null)                    {                        if(fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Three)                        {                            switch (fdr_.sign)                            {                                case 1:                                    TargetAnimalName = "Lion";                                    break;                                case 2:                                    TargetAnimalName = "Panda";                                    break;                                case 3:                                    TargetAnimalName = "Monkey";                                    break;                                case 4:                                    TargetAnimalName = "Rabbit";                                    break;                                default:                                    break;                            }                            System.Random rd = new System.Random(6);                            targetColor = rd.Next(1, 3);                        }                        if(fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Four)                            targetColor = fdr_.sign;                    }                }                List<int> targetColorList = new List<int>();                for (int index = 0; index < colorList_.Count; index++)                {                    if (colorList_[index] == targetColor)                        targetColorList.Add(index);                }                                if (targetColorList.Count == 0)                {                    Debug.Log("no target color");                    return;                }                int tindex = rd.Next(0, targetColorList.Count - 1);                TargetColorPosition = targetColorList[tindex];            }        }        if (amimalSpeed_ > 30.0f)            return;        if (clockSpeed_ != 0.0f)            return;        int animalNameIndex = GetCurrentNameByTargetPosition(TargetColorPosition);        //Debug.Log(animalNames_[animalNameIndex]);        if (animalNameIndex >= 0)        {            if (animalNames_[animalNameIndex].StartsWith(TargetAnimalName))            {                if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Handsel)                {                    if(animalNames_[animalNameIndex] == "Lion_1" ||                        animalNames_[animalNameIndex] == "Rabbit_3" ||                        animalNames_[animalNameIndex] == "Panda_2" ||                        animalNames_[animalNameIndex] == "Monkey_5")                    {                        amimalSpeed_ = 0.0f;                        OpenResultStage();                    }                }                else                {                    amimalSpeed_ = 0.0f;                    OpenResultStage();                    //AnimalRotationAxis.transform.rotation = Quaternion.Euler(new Vector3(0.0f, animalNameIndex * 15.0f, 0.0f));                }            }        }        if (clockSpeed_ == 0.0f && amimalSpeed_ == 0.0f)        {            //TargetColorPosition = -1;            stopRotate = false;            begin_ = false;            currentRotateTime = 0.0f;            endGame = true;            target_ = root_.transform.Find("Model_Animal").                Find(animalNames_[animalNameIndex]).Find("A2_slwh_Animal").gameObject;            foreach (int key in CurrentChips_.Keys)            {                LastChips_[key].selfchip = 0;                CurrentChips_[key].totalchip = 0;                long tempchip = CurrentChips_[key].selfchip;                if (tempchip == 0)                    continue;                LastChips_[key].selfchip = tempchip;                if (fdr_.model != (byte)GameCity.ForestMode_Enum.ForestMode_GiveGun)                {                    CurrentChips_[key].selfchip = 0;                }                else                {                    if (guntimes_ - 1 <= 0)                        CurrentChips_[key].selfchip = 0;                }            }            Updatehandle();            if (fdr_.model != (byte)GameCity.ForestMode_Enum.ForestMode_Three &&                fdr_.model != (byte)GameCity.ForestMode_Enum.ForestMode_Four)            {                if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Handsel)                {                    amimalSpeed_ = 200.0f;                    clockSpeed_ = 200.0f;                    PlayHandselEffect();                }                else if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_GiveGun)                {                    guntimes_ -= 1;                    ChangeGunTimesMaterial();                    if (guntimes_ <= 0)                    {                        isresult_ = true;                        PlayAudioByAnimalAndColor();                        return;                    }                    ParseResult(fdr_.signs[guntimes_ - 1]);                    begin_ = true;                    chipTime = 0.0f;                    endGame = false;                    isGunNext = false;                }                else                {                    amimalSpeed_ = 200.0f;                    clockSpeed_ = 200.0f;                    InitEndEffect();                    PlayAnimationByName(target_, "Show", true);                }                PlayAudioByAnimalAndColor();            }            else            {                MoveCamera2End();                if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Three)                {                    PlayThreeAudio();                                        startThree_ = false;                    switch (TargetAnimalName)                    {                        case "Lion":                            {                                Animals_[0].SetActive(true);                                CloseOtherAnimalsByIndex(0);                                break;                            }                        case "Rabbit":                            {                                Animals_[1].SetActive(true);                                CloseOtherAnimalsByIndex(1);                                break;                            }                        case "Panda":                            {                                Animals_[2].SetActive(true);                                CloseOtherAnimalsByIndex(2);                                break;                            }                        case "Monkey":                            {                                Animals_[3].SetActive(true);                                CloseOtherAnimalsByIndex(3);                                break;                            }                    }                }                else if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Four)                    PlayFourAudio();            }            isChangeSceneColor = true;        }    }      public void NewJoinHandle(string text)    {        Text handleTx = gamePanel_.transform.Find("Top").            Find("JackpotBG").Find("TextNum").gameObject.GetComponent<Text>();        handleTx.text = text;    }    void Updatehandle()    {        if (fdr_ == null)            return;        Text handleTx = gamePanel_.transform.Find("Top").            Find("JackpotBG").Find("TextNum").gameObject.GetComponent<Text>();        handleTx.text = fdr_.handle.ToString();    }    void ResetAnimalModel()    {        for (int index = 0; index < animalNames_.Count; index++)        {            GameObject animal = root_.transform.Find("Model_Animal").                Find(animalNames_[index]).Find("A2_slwh_Animal").gameObject;            animal.transform.localPosition = new Vector3(15.0f, 28.0f, 0.0f);            animal.transform.localEulerAngles = new Vector3(0.0f, -90.0f, 0.0f);            PlayAnimationByName(animal, "Show", false);            animal.SetActive(false);            animal.SetActive(true);        }        if (handsels_ != null)        {            for (int index = 0; index < handsels_.Count; index++)            {                handsels_[index].transform.localPosition = new Vector3(15.0f, 28.0f, 0.0f);                handsels_[index].transform.localEulerAngles = new Vector3(0.0f, -90.0f, 0.0f);                PlayAnimationByName(handsels_[index], "Show", false);                handsels_[index].SetActive(false);            }        }        if (fdr_ == null)            return;        if(fdr_.model != (byte)GameCity.ForestMode_Enum.ForestMode_GiveGun)            CloseResultState();    }    int GetCurrentClockPosition()    {        int result = (int)(ClockRotationAxis.transform.rotation.eulerAngles.y / 15.0f);        return result + 1;    }    int GetCurrentNameByTargetPosition( int position )    {        int nameIndex = -1;        float angle = position * 15.0f;        float animalAngle = angle - AnimalRotationAxis.transform.rotation.eulerAngles.y;        int animalindex = (int)(animalAngle / 15.0f);        int deltaAngle = (int)animalAngle % 15;        if (animalindex >= 0 && (deltaAngle > 12 || deltaAngle < 3))        {            //Debug.Log("delta:" + deltaAngle.ToString() + " index :" + animalindex.ToString());            if (deltaAngle < 3)                nameIndex = animalindex;            else            {                nameIndex = animalindex + 1;            }                            if (nameIndex > 23)                nameIndex = 0;        }        else if(animalindex < 0 && (deltaAngle > -3 || deltaAngle < -12))        {            //Debug.Log("delta:" + deltaAngle.ToString() + " index :" + animalindex.ToString());            if (deltaAngle > -3)                nameIndex = 24 + animalindex;            else            {                nameIndex = 23 + animalindex;            }            if (nameIndex > 23)                nameIndex = 0;        }        return nameIndex;    }    Image ZHXIMG_;    Image tempZHXIMG_;    List<Sprite> zhxsprites_;    int zhxindex = 0;    void InitZHXSprites()    {        if (tempZHXIMG_ == null)        {            GameObject tempZHXIMGObj = new GameObject("tempZHX");            tempZHXIMGObj.transform.SetParent(gamePanel_.transform.Find("Top").Find("ZhuangHeXianBG").Find("ImageTextMask"), false);            tempZHXIMG_ = tempZHXIMGObj.AddComponent<Image>();            tempZHXIMG_.rectTransform.sizeDelta = new Vector2(35.0f, 34.0f);        }        zhxsprites_ = new List<Sprite>();        ZHXIMG_ = gamePanel_.transform.Find("Top").Find("ZhuangHeXianBG").            Find("ImageTextMask").Find("ImageText").gameObject.GetComponent<Image>();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        ZHXIMG_.transform.localPosition = new Vector3(0.0f, 0.0f, 0.0f);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        zhxsprites_.Add(bundle.LoadAsset<Sprite>("sl_word_z_z3"));        zhxsprites_.Add(bundle.LoadAsset<Sprite>("sl_word_z_h2"));        zhxsprites_.Add(bundle.LoadAsset<Sprite>("sl_word_z_x2"));        tempZHXIMG_.transform.localPosition = new Vector3(0.0f, 34.0f, 0.0f);        //System.Random rd = new System.Random();        if (zhxindex > 2)            zhxindex = 0;        tempZHXIMG_.sprite = zhxsprites_[zhxindex];    }    float zhxSpeed = 30.0f;    float czhxtime = 0.0f;    bool istemp;    float stopspeed = 50.0f;    void SwitchZHX(float time)    {         if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_GiveGun)        {            if (guntimes_ < fdr_.signs.Count)                return;        }                czhxtime += time;        if (clockSpeed_ >= stopspeed && zhxSpeed != 15.0f)            zhxSpeed = clockSpeed_;                //ZHXIMG_.transform.Translate(new Vector3(0.0f, -zhxSpeed * time, 0.0f));        //tempZHXIMG_.transform.Translate(new Vector3(0.0f, -zhxSpeed * time, 0.0f));        ZHXIMG_.transform.localPosition = new Vector3(0.0f, ZHXIMG_.transform.localPosition.y - zhxSpeed * time, 0.0f);        tempZHXIMG_.transform.localPosition = new Vector3(0.0f, tempZHXIMG_.transform.localPosition.y - zhxSpeed * time, 0.0f);        if (zhxSpeed == 15.0f)        {            if(istemp)            {                if (tempZHXIMG_.transform.localPosition.y >= 0.0f && tempZHXIMG_.transform.localPosition.y < 3.0f)                {                    zhxSpeed = 0.0f;                    switch (fdr_.osign)                    {                        case 1:                            FD_AudioDataManager.GetInstance().PlayAudio(1008);                            break;                        case 2:                            FD_AudioDataManager.GetInstance().PlayAudio(1009);                            break;                        case 3:                            FD_AudioDataManager.GetInstance().PlayAudio(1010);                            break;                        default:                            break;                    }                    tempZHXIMG_.transform.localPosition = new Vector3(0.0f, 0.0f, 0.0f);                    ZHXIMG_.transform.localPosition = new Vector3(0.0f, 34.0f, 0.0f);                }            }            else if (ZHXIMG_.transform.localPosition.y >= 0.0f && ZHXIMG_.transform.localPosition.y < 3.0f)            {                zhxSpeed = 0.0f;                switch (fdr_.osign)                {                    case 1:                        FD_AudioDataManager.GetInstance().PlayAudio(1008);                        break;                    case 2:                        FD_AudioDataManager.GetInstance().PlayAudio(1009);                        break;                    case 3:                        FD_AudioDataManager.GetInstance().PlayAudio(1010);                        break;                    default:                        break;                }                ZHXIMG_.transform.localPosition = new Vector3(0.0f, 0.0f, 0.0f);                tempZHXIMG_.transform.localPosition = new Vector3(0.0f, 34.0f, 0.0f);            }            return;        }        if (ZHXIMG_.transform.localPosition.y <= -34.0f)        {            ZHXIMG_.transform.localPosition = new Vector3(0.0f, 68.0f + ZHXIMG_.transform.localPosition.y, 0.0f);            //System.Random rd = new System.Random();            if (NearlyEqual(zhxSpeed, stopspeed, 6.0f))            {                zhxindex++;                if (zhxindex > 2)                    zhxindex = 0;                if (zhxindex == fdr_.osign - 1)                {                    zhxSpeed = 15.0f;                    istemp = false;                }            }            else            {                //zhxindex = rd.Next(0, 3);                zhxindex++;                if (zhxindex > 2)                    zhxindex = 0;            }            ZHXIMG_.sprite = zhxsprites_[zhxindex];        }        if(tempZHXIMG_.transform.localPosition.y <= -34.0f)        {            tempZHXIMG_.transform.localPosition = new Vector3(0.0f, 68.0f + tempZHXIMG_.transform.localPosition.y, 0.0f);            //System.Random rd = new System.Random();            //zhxindex = rd.Next(0, 3);            if (NearlyEqual(zhxSpeed, stopspeed, 6.0f))            {                zhxindex++;                if (zhxindex > 2)                    zhxindex = 0;                if (zhxindex == fdr_.osign - 1)                {                    zhxSpeed = 15.0f;                    istemp = true;                }            }            else            {                zhxindex++;                if (zhxindex > 2)                    zhxindex = 0;            }            tempZHXIMG_.sprite = zhxsprites_[zhxindex];        }    }    void AnimalRotating(float time)    {        AnimalRotationAxis.transform.Rotate(new Vector3(0.0f, amimalSpeed_ * time, 0.0f));    }    void ClockRotating(float time)    {        ClockRotationAxis.transform.Rotate(new Vector3(0.0f, -clockSpeed_ * time, 0.0f));    }    public bool refreshColor_ = false;    float colorTime = 0.03f;    float currentColorTime = 0.0f;    int colorIndex = 0;    bool isColorInited = false;    public void InitColors(float time)    {        if (!isColorInited)        {            isColorInited = true;            FD_AudioDataManager.GetInstance().PlayAudio(1039);        }        string name = "";        if (colorIndex == 0)            name = "Colour";        else            name = "Colour (" + colorIndex.ToString() + ")";        GameObject colorObj = ColorRotationAxis.transform.Find(name).Find("A1_slwh_Sekuai").gameObject;        MeshRenderer mesh = colorObj.GetComponent<MeshRenderer>();        mesh.material = middle_;        currentColorTime += time;        if (currentColorTime >= colorTime)        {            switch (colorList_[colorIndex])            {                case 1:                    mesh.material = red_;                    break;                case 2:                    mesh.material = green_;                    break;                case 3:                    mesh.material = yellow_;                    break;                default:                    break;            }            colorIndex++;            currentColorTime = 0.0f;            if (colorIndex == 24)            {                refreshColor_ = false;                currentColorTime = 0.0f;                colorIndex = 0;                isColorInited = false;            }        }    }    public void LeaveRoom()    {        if(pickPanel_ != null)            pickPanel_.SetActive(true);        gamePanel_.SetActive(false);        if (resultPanel_ != null)            resultPanel_.SetActive(false);    }    void Exit(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            UMessage exitMsg = new UMessage((uint)GameCity.Forest_enum.ForestMsg_CM_LEAVEROOM);            //exitMsg.Add((uint)GameCity.Forest_enum.ForestMsg_CM_LEAVEROOM);            exitMsg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(exitMsg);            FD_AudioDataManager.GetInstance().PlayAudio(1037);        }    }    public void UpdatePlayerCoin(long coin)    {        Text coinTx = gamePanel_.transform.Find("Bottom").Find("PlayerInfoBG").            Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        coinTx.text = coin.ToString();    }    public void RefreshPlayerAddMoney(uint addmoney)    {        Text coinTx = gamePanel_.transform.Find("Bottom").Find("PlayerInfoBG").            Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        long coin;        long.TryParse(coinTx.text, out coin);        coin += addmoney;        coinTx.text = coin.ToString();    }    void InitUI()    {        gamePanel_.SetActive(true);        GameObject returnBtn = gamePanel_.transform.Find("Top").Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn, Exit, null);        Image icon = gamePanel_.transform.Find("Bottom").Find("PlayerInfoBG").            Find("Image_HeadFram").Find("Image_Mask").Find("Image_Head").gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(GameMain.hall_.GetPlayerData().GetPlayerIconURL(),                 GameMain.hall_.GetPlayerId(), (int)GameMain.hall_.GetPlayerData().PlayerIconId);        Text coin = gamePanel_.transform.Find("Bottom").Find("PlayerInfoBG").            Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        coin.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();        Text name = gamePanel_.transform.Find("Bottom").Find("PlayerInfoBG").Find("TextName").gameObject.GetComponent<Text>();        name.text = GameMain.hall_.GetPlayerData().GetPlayerName();        Text rewardTx = gamePanel_.transform.Find("Top").Find("JackpotBG").            Find("TextNum").gameObject.GetComponent<Text>();        rewardTx.text = "0";        Text timeTx = gamePanel_.transform.Find("CountdownBG").Find("TextNum").gameObject.GetComponent<Text>();        timeTx.text = ((int)chipTime).ToString(); ;        GameObject recordBtn = gamePanel_.transform.Find("Bottom").Find("ButtonRecord").gameObject;        XPointEvent.AutoAddListener(recordBtn, OnHistroy, null);        GameObject setBtn = gamePanel_.transform.Find("CountdownBG").Find("ButtonSet").gameObject;        XPointEvent.AutoAddListener(setBtn, OnSet, null);        GameObject ruleBtn = gamePanel_.transform.Find("CountdownBG").Find("ButtonRule").gameObject;        XPointEvent.AutoAddListener(ruleBtn, OnRule, null);        GameObject chipBtn = gamePanel_.transform.Find("Bottom").Find("ButtonBet").gameObject;        XPointEvent.AutoAddListener(chipBtn, OnChip, null);        InitBetUI();        GameObject cancelBtn = gamePanel_.transform.Find("Bet").Find("ImageBG").            Find("ButtonBG").Find("ButtonCancel").gameObject;        XPointEvent.AutoAddListener(cancelBtn, CloseChip, null);        GameObject btnGoon = gamePanel_.transform.Find("Bet").Find("ImageBG").            Find("ButtonBG").Find("ButtonGoOn").gameObject;        XPointEvent.AutoAddListener(btnGoon, GoonChip, null);        Toggle btnIsAuto = gamePanel_.transform.Find("Bet").Find("ImageBG").            Find("ButtonBG").Find("ButtonGoOn").Find("ToggleZidong").gameObject.GetComponent<Toggle>();        btnIsAuto.onValueChanged.AddListener(delegate (bool call) { isAutoChip = call; });        GameObject popup = gamePanel_.transform.Find("Pop-up").gameObject;        XPointEvent.AutoAddListener(popup, CloseHistroyPanel, null);        InitChipType();    }    void InitBetUI()    {        chipPanel_ = gamePanel_.transform.Find("Bet").gameObject;        chipPanel_.SetActive(false);        List<string> names = new List<string>();        names.Add("Lion");        names.Add("Panda");        names.Add("Monkey");        names.Add("Rabbit");        chipObjects_.Clear();        int position = 11;        GameObject BG = chipPanel_.transform.Find("ImageBG").Find("BetButtonBG").gameObject;        for (int index = 0; index < names.Count; index++)        {            int currentrposition = position + index;            string chipname = "Button_" + names[index] + "_R";            GameObject chipr = BG.transform.Find(chipname).gameObject;            XPointEvent.AutoAddListener(chipr, OnChips, currentrposition);            chipObjects_.Add(currentrposition, chipr);            int currentgposition = position + index + 10;            chipname = "Button_" + names[index] + "_G";            GameObject chipg = BG.transform.Find(chipname).gameObject;            XPointEvent.AutoAddListener(chipg, OnChips, currentgposition);            chipObjects_.Add(currentgposition, chipg);            int currentyposition = position + index + 20;            chipname = "Button_" + names[index] + "_Y";            GameObject chipy = BG.transform.Find(chipname).gameObject;            XPointEvent.AutoAddListener(chipy, OnChips, currentyposition);            chipObjects_.Add(currentyposition, chipy);        }        GameObject xian = BG.transform.Find("Button_Xian_R").gameObject;        XPointEvent.AutoAddListener(xian, OnChips, 1);        chipObjects_.Add(1, xian);        GameObject he = BG.transform.Find("Button_He_G").gameObject;        XPointEvent.AutoAddListener(he, OnChips, 2);        chipObjects_.Add(2, he);        GameObject zhuang = BG.transform.Find("Button_Zhuang_Y").gameObject;        XPointEvent.AutoAddListener(zhuang, OnChips, 3);        chipObjects_.Add(3, zhuang);        //InitChipObjects();    }    public List<string> powers = new List<string>();    void ReadColorData(int colorid)    {        powers.Clear();        List<string[]> strList;        CReadCsvBase.ReaderCsvDataFromAB(GameDefine.CsvAssetbundleName, GameDefine.ForestDanceFileName, out strList);        int columnCount = strList.Count;        //for (int index = 0; index < 4; index++)        //{        //    for (int round = 0; round < 3; round++)        //        powers.Add(strList[colorid + 1][index + round * 4 + 1]);        //}        for (int index = 0; index < 12; index++)            powers.Add(strList[colorid + 1][index + 1]);    }    public void RestChipObjects(int colorid)    {        ReadColorData(colorid);        int index = 0;        foreach (int key in chipObjects_.Keys)        {            Text selfTx = chipObjects_[key].transform.Find("TextBetNum_Own").gameObject.GetComponent<Text>();            selfTx.text = "0";            Text totalTx = chipObjects_[key].transform.Find("TextBetNum_All").gameObject.GetComponent<Text>();            totalTx.text = "0";            if (key < 11)                continue;            Text power = chipObjects_[key].transform.Find("ImageBeiLv").Find("Text").gameObject.GetComponent<Text>();            power.text = powers[index];            index++;        }        FD_AudioDataManager.GetInstance().PlayAudio(1000, false);        isCount = false;    }    public void InitChipObjects()     {        foreach(int key in chipObjects_.Keys)        {            Text selfTx = chipObjects_[key].transform.Find("TextBetNum_Own").gameObject.GetComponent<Text>();            selfTx.text = CurrentChips_[key].selfchip.ToString();            Text totalTx = chipObjects_[key].transform.Find("TextBetNum_All").gameObject.GetComponent<Text>();            totalTx.text = CurrentChips_[key].totalchip.ToString();        }    }    bool isAutoChip = false;    void AutoChip()    {        if (!isAutoChip)            return;        bool isoverchiped = false;        FD_AudioDataManager.GetInstance().PlayAudio(1037);        foreach (int key in LastChips_.Keys)        {            if (LastChips_[key].selfchip == 0)            {                    continue;            }            UMessage chipMsg = new UMessage((uint)GameCity.Forest_enum.ForestMsg_CM_CHIPIN);            ForestDanceChip fdc = new ForestDanceChip();            fdc.sign = (byte)key;            fdc.userID = GameMain.hall_.GetPlayerId();            fdc.chipCoin = LastChips_[key].selfchip;            fdc.SetSendData(chipMsg);            HallMain.SendMsgToRoomSer(chipMsg);        }        if(isoverchiped)            CCustomDialog.OpenCustomConfirmUI(2017);    }    void SetSelfChipByPosition(int position, long selfmoney)    {        Text selfTx = chipObjects_[position].transform.Find("TextBetNum_Own").gameObject.GetComponent<Text>();        selfTx.text = selfmoney.ToString(); ;    }    void SetTotalChipByPosition(int position, long totalmoney)    {        Text totalTx = chipObjects_[position].transform.Find("TextBetNum_All").gameObject.GetComponent<Text>();        totalTx.text = totalmoney.ToString(); ;    }    void OnChips(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FD_AudioDataManager.GetInstance().PlayAudio(1038);            if (chipTime <= 0.0f)                return;            int index = (int)button;            long chipmoney = currentChouMa_;            if (CurrentChips_[index].selfchip == FD_AudioDataManager.GetInstance().forestbases[level])            {                CCustomDialog.OpenCustomConfirmUI(2017);                return;            }            if (CurrentChips_[index].selfchip + currentChouMa_ >= FD_AudioDataManager.GetInstance().forestbases[level])            {                chipmoney = FD_AudioDataManager.GetInstance().forestbases[level] - CurrentChips_[index].selfchip;            }            if (GameMain.hall_.GetPlayerData().GetDiamond() < currentChouMa_)            {                CCustomDialog.OpenCustomConfirmUI(2000);                return;            }                        UMessage chipMsg = new UMessage((uint)GameCity.Forest_enum.ForestMsg_CM_CHIPIN);            ForestDanceChip fdc = new ForestDanceChip();            fdc.sign = (byte)index;            fdc.userID = GameMain.hall_.GetPlayerId();            fdc.chipCoin = chipmoney;            fdc.SetSendData(chipMsg);                        Toggle btnIsAuto = gamePanel_.transform.Find("Bet").Find("ImageBG").                Find("ButtonBG").Find("ButtonGoOn").Find("ToggleZidong").gameObject.GetComponent<Toggle>();            if (btnIsAuto.isOn)            {                btnIsAuto.isOn = false;            }            HallMain.SendMsgToRoomSer(chipMsg);        }    }    public void BackChip(UMessage ms)    {        int index = ms.ReadByte();        long totalChip = ms.ReadLong();         long selfChip = ms.ReadLong();        long leftCoin = ms.ReadLong();        uint userid = ms.ReadUInt();        if (CurrentChips_.ContainsKey(index))        {            if (userid == GameMain.hall_.GetPlayerId())            {                long currentChip = selfChip - CurrentChips_[index].selfchip;                oneRoundTotalChip_ += currentChip;                UpdatePlayerCoin(leftCoin);                CurrentChips_[index].selfchip = selfChip;                Text selfTx = chipObjects_[index].transform.Find("TextBetNum_Own").gameObject.GetComponent<Text>();                selfTx.text = CurrentChips_[index].selfchip.ToString();            }            CurrentChips_[index].totalchip = totalChip;        }        Text totalTx = chipObjects_[index].transform.Find("TextBetNum_All").gameObject.GetComponent<Text>();        totalTx.text = CurrentChips_[index].totalchip.ToString();        RefreshRightChipPanel();    }    void ChipSuccess(int index)    {    }    void CloseChip(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FD_AudioDataManager.GetInstance().PlayAudio(1037);            chipPanel_.SetActive(false);        }    }    void GoonChip(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            bool isoverchiped = false;            FD_AudioDataManager.GetInstance().PlayAudio(1037);            foreach (int key in LastChips_.Keys)            {                if (LastChips_[key].selfchip == 0)                {                    continue;                }                if (CurrentChips_[key].selfchip + LastChips_[key].selfchip >=                     FD_AudioDataManager.GetInstance().forestbases[level])                {                    isoverchiped = true;                    continue;                }                UMessage chipMsg = new UMessage((uint)GameCity.Forest_enum.ForestMsg_CM_CHIPIN);                ForestDanceChip fdc = new ForestDanceChip();                fdc.sign = (byte)key;                fdc.userID = GameMain.hall_.GetPlayerId();                fdc.chipCoin = LastChips_[key].selfchip;                fdc.SetSendData(chipMsg);                HallMain.SendMsgToRoomSer(chipMsg);            }            if(isoverchiped)                CCustomDialog.OpenCustomConfirmUI(2017);        }    }    GameObject smallrecordPanel_;    //面板历史记录    public void InitSmallHistroy()    {        if (fdrd_ == null)            return;        smallrecordPanel_ = gamePanel_.transform.Find("Bottom").Find("RecordBG").Find("Content_RecordBG").gameObject;        ClearChilds(smallrecordPanel_);         for (int index = fdrd_.histroyinfo.Count - 1; index > fdrd_.histroyinfo.Count - 7; index--)        {            if (index < 0)                return;            LoadRecordResource(smallrecordPanel_, fdrd_.histroyinfo[index], "RecordIcon_Small");        }    }    //历史记录    void OnHistroy(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FD_AudioDataManager.GetInstance().PlayAudio(1037);            ShowHistroyPanel();        }    }    public ForestDanceRoomData fdrd_;    void RefreshRecord()    {        if (fdrd_ == null)            return;        if (fdr_ == null)            return;        ushort recordResult = 0;        if (fdr_.sign < 10)        {            recordResult = (ushort)(fdr_.sign + fdr_.sign * 100 + fdr_.model * 1000 + fdr_.osign * 10000);        }        else        {            recordResult = (ushort)(fdr_.sign + fdr_.power * 100 + fdr_.model * 1000 + fdr_.osign * 10000);        }        if(recordResult != 0)            fdrd_.histroyinfo.Add(recordResult);        InitHistroyPanel();        InitSmallHistroy();    }    void InitHistroyPanel()    {        if (fdrd_ == null)            return;        if (histroyPanel_ == null)            histroyPanel_ = gamePanel_.transform.Find("Pop-up").Find("Record").gameObject;        GameObject recordBG = histroyPanel_.transform.Find("ImageBG").            Find("Viewport_Record").Find("Content_Record").gameObject;        ClearChilds(recordBG);        if (fdrd_.histroyinfo.Count < 21)        {            for (int index = fdrd_.histroyinfo.Count - 1; index >= 0; index--)            {                LoadRecordResource(recordBG, fdrd_.histroyinfo[index], "RecordIcon_Big");            }        }        else        {            for (int index = fdrd_.histroyinfo.Count - 1; index >= fdrd_.histroyinfo.Count - 21; index--)            {                LoadRecordResource(recordBG, fdrd_.histroyinfo[index], "RecordIcon_Big");            }        }    }    //char nSign; 个位，十位	//char nSpecil; 百位 送枪的时候表示次数 闪电的时候 表示倍数	//char nType; 千位 正常 大三元 大四喜 送枪 闪电 彩金	//char nZhuang; 万位 1庄 2和 3闲    //unsigned short nResult = 0;    //nResult += m_iZhuangSign* 10000;	//nResult += m_iModeState* 1000;	//nResult += m_iSpecilSign* 100;	//nResult += m_iCurWinSign;    string ParseRecordSign(int sign, out int color, out int zhx, out int model, out int tOrp)    {        zhx = sign / 10000;        model = (sign % 10000) / 1000;        tOrp = (sign % 1000) / 100;        color = (sign % 100) / 10;           //1红2绿3黄        string result = "";        switch (sign % 10)        {            case 1:                result = "Lion";                break;            case 2:                result = "Panda";                break;            case 3:                result = "Monkey";                break;            case 4:                result = "Rabbit";                break;            default:                break;        }        return result;    }    void LoadRecordResource(GameObject recordBG, int sign, string resourceName)    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset(resourceName);        GameObject BigRecord = (GameObject)GameMain.instantiate(obj0);        Image icon = BigRecord.transform.Find("ImageHead_Icon").gameObject.GetComponent<Image>();        int color = 0, zhx = 0, model = 0, tOrp = 0;        string name = ParseRecordSign(sign, out color, out zhx, out model, out tOrp);        icon.sprite = bundle.LoadAsset<Sprite>("Animal_" + name);        //Image colorImg = icon.GetComponent<Image>();        switch (color)        {            case 1:                BigRecord.GetComponent<Image>().sprite = bundle.LoadAsset<Sprite>("sl_frame_dwtx_hong");                break;            case 2:                BigRecord.GetComponent<Image>().sprite = bundle.LoadAsset<Sprite>("sl_frame_dwtx_lv");                break;            case 3:                BigRecord.GetComponent<Image>().sprite = bundle.LoadAsset<Sprite>("sl_frame_dwtx_huang");                break;            default:                break;        }        BigRecord.transform.SetParent(recordBG.transform, false);        Image zhxImg = BigRecord.transform.Find("ImageZhuangHeXian").gameObject.GetComponent<Image>();        switch (zhx)        {            case 1:                zhxImg.sprite = bundle.LoadAsset<Sprite>("sl_word_z_z3");                break;            case 2:                zhxImg.sprite = bundle.LoadAsset<Sprite>("sl_word_z_h2");                break;            case 3:                zhxImg.sprite = bundle.LoadAsset<Sprite>("sl_word_z_x2");                break;            default:                break;        }        if (model == (int)GameCity.ForestMode_Enum.ForestMode_GiveGun)        {            BigRecord.GetComponent<Image>().sprite = bundle.LoadAsset<Sprite>("sl_frame_dwtx_dsy2");            BigRecord.transform.Find("ImageHead_Icon").gameObject.SetActive(false);            BigRecord.transform.Find("ImageHead_Text").gameObject.SetActive(true);            Image text = BigRecord.transform.Find("ImageHead_Text").gameObject.GetComponent<Image>();            text.sprite = bundle.LoadAsset<Sprite>("sl_word_sz_" + tOrp.ToString());        }        if (model == (int)GameCity.ForestMode_Enum.ForestMode_Flash)        {            GameObject si = BigRecord.transform.Find("SpecialIcon").gameObject;            si.SetActive(true);            Image flash = si.GetComponent<Image>();            flash.sprite = bundle.LoadAsset<Sprite>("sl_icon_FanBei");            Text fbtx = BigRecord.transform.Find("SpecialIcon").Find("ImageText").Find("TextNum").gameObject.GetComponent<Text>();            fbtx.text = tOrp.ToString();        }        if(model == (int)GameCity.ForestMode_Enum.ForestMode_Handsel)        {            GameObject si = BigRecord.transform.Find("SpecialIcon").gameObject;            si.SetActive(true);            Image flash = si.GetComponent<Image>();            flash.sprite = bundle.LoadAsset<Sprite>("sl_icon_CaiJin");            GameObject fbtx = BigRecord.transform.Find("SpecialIcon").Find("ImageText").Find("TextNum").gameObject;            //fbtx.text = tOrp.ToString();            GameObject it = si.transform.Find("ImageText").gameObject;            it.SetActive(false);            fbtx.SetActive(false);        }        if(model == (int)GameCity.ForestMode_Enum.ForestMode_Three)        {            BigRecord.GetComponent<Image>().sprite = bundle.LoadAsset<Sprite>("sl_frame_dwtx_dsy1");            icon.sprite = bundle.LoadAsset<Sprite>("Animal_" + name);        }        if(model == (int)GameCity.ForestMode_Enum.ForestMode_Four)        {            icon.sprite = bundle.LoadAsset<Sprite>("Animal_All");        }    }    void ShowHistroyPanel()    {        if (histroyPanel_ == null)            histroyPanel_ = gamePanel_.transform.Find("Pop-up").Find("Record").gameObject;                InitHistroyPanel();        gamePanel_.transform.Find("Pop-up").gameObject.SetActive(true);        histroyPanel_.SetActive(true);    }    void CloseHistroyPanel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FD_AudioDataManager.GetInstance().PlayAudio(1037);            if (histroyPanel_ == null)                histroyPanel_ = gamePanel_.transform.Find("Pop-up").Find("Record").gameObject;            gamePanel_.transform.Find("Pop-up").gameObject.SetActive(false);            GameObject setPanel = gamePanel_.transform.Find("Pop-up").Find("Set").gameObject;            setPanel.SetActive(false);            histroyPanel_.SetActive(false);        }    }    //规则    void OnRule(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FD_AudioDataManager.GetInstance().PlayAudio(1037);            ShowRule();        }    }    GameObject rulePanel;    void ShowRule()    {        if (rulePanel == null)            InitRuleEvents();        rulePanel.SetActive(true);    }    void OnCloseRule(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FD_AudioDataManager.GetInstance().PlayAudio(1037);            CloseRule();        }    }    void CloseRule()    {        rulePanel.SetActive(false);    }    void InitRuleEvents()    {        rulePanel = gamePanel_.transform.Find("Rule").gameObject;        GameObject closeBtn = rulePanel.transform.Find("ImageBG").Find("ButtonClose").gameObject;        XPointEvent.AutoAddListener(closeBtn, OnCloseRule, null);    }    //设置    void OnSet(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FD_AudioDataManager.GetInstance().PlayAudio(1037);            ShowSet();        }    }    void InitSet()    {        GameObject bg = gamePanel_.transform.Find("Pop-up").gameObject;        GameObject setPanel = gamePanel_.transform.Find("Pop-up").Find("Set").gameObject;        Slider music = setPanel.transform.Find("Slider_Music").gameObject.GetComponent<Slider>();        Slider sound = setPanel.transform.Find("Slider_Sound").gameObject.GetComponent<Slider>();        music.onValueChanged.AddListener(delegate (float value) { ChangeMusicVolume(value); });        sound.onValueChanged.AddListener(delegate (float value) { ChangeSoundVolume(value); });    }    void ChangeMusicVolume(float value)    {        AudioManager.Instance.MusicVolume = value;    }    void ChangeSoundVolume(float value)    {        AudioManager.Instance.SoundVolume = value;    }    void ShowSet()    {        gamePanel_.transform.Find("Pop-up").gameObject.SetActive(true);        gamePanel_.transform.Find("Pop-up").Find("Set").gameObject.SetActive(true);    }    //下注    void OnChip(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FD_AudioDataManager.GetInstance().PlayAudio(1037);            chipPanel_.SetActive(true);        }    }    void LoadResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Forest_MainUI");        gamePanel_ = (GameObject)GameMain.instantiate(obj0);        GameObject CanvasObj = GameObject.Find("Canvas/Root");        gamePanel_.transform.SetParent(CanvasObj.transform, false);    }    void LoadResultResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Forest_Result");        resultPanel_ = (GameObject)GameMain.instantiate(obj0);        GameObject CanvasObj = GameObject.Find("Canvas/Root");        resultPanel_.transform.SetParent(CanvasObj.transform, false);        resultPanel_.SetActive(true);        Object resultAnimateObj = (GameObject)bundle.LoadAsset("Anime_Result_kaijiang");        GameObject resultAnimate = (GameObject)GameMain.instantiate(resultAnimateObj);        resultAnimate.transform.SetParent(resultPanel_.transform.Find("ImageAnimation"), false);        resultArmature = resultAnimate.GetComponent<UnityArmatureComponent>();        AssetBundle hallbundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (hallbundle == null)            return;        Object rewardAnimateObj = (GameObject)hallbundle.LoadAsset("Coin_Effect");        GameObject rewardAnimate = (GameObject)GameMain.instantiate(rewardAnimateObj);        rewardAnimate.transform.SetParent(resultPanel_.transform.Find("ImageAnimation"), false);        rewardArmature = rewardAnimate;// rewardAnimate.GetComponent<UnityArmatureComponent>();        rewardArmature.SetActive(false);    }    void InitChipType()    {        GameObject TypeBg = gamePanel_.transform.Find("Bet").Find("ImageBG").Find("Chip").gameObject;        for (int index = 1; index < 6; index++)        {            string toggleName = "";            int temp = index;            if (index == 1)                toggleName = "Toggle";            else                toggleName = "Toggle (" + (index - 1).ToString() + ")";            Toggle t = TypeBg.transform.Find(toggleName).gameObject.GetComponent<Toggle>();            t.onValueChanged.AddListener(                delegate (bool check)                {                    onClickChipsType(temp);                });        }    }    void onClickChipsType(int index)    {        currentChouMa_ = chipTypeDict_[index];    }    void initAnimalNames()    {        animalNames_ = new List<string>();        animalNames_.Add("Lion_1");        animalNames_.Add("Monkey_1");        animalNames_.Add("Rabbit_1");        animalNames_.Add("Panda_1");        animalNames_.Add("Rabbit_2");        animalNames_.Add("Monkey_2");        animalNames_.Add("Rabbit_3");        animalNames_.Add("Lion_2");        animalNames_.Add("Rabbit_4");        animalNames_.Add("Monkey_3");        animalNames_.Add("Rabbit_5");        animalNames_.Add("Panda_2");        animalNames_.Add("Lion_3");          animalNames_.Add("Monkey_4");        animalNames_.Add("Rabbit_6");        animalNames_.Add("Panda_3");        animalNames_.Add("Rabbit_7");        animalNames_.Add("Monkey_5");        animalNames_.Add("Rabbit_8");        animalNames_.Add("Lion_4");        animalNames_.Add("Monkey_6");        animalNames_.Add("Rabbit_9");        animalNames_.Add("Monkey_7");        animalNames_.Add("Panda_4");    }    void initLastChipData()    {        int key = 11;        while (key < 36)        {            if (key % 10 > 5)                key += 5;            ChipsData data = new ChipsData();            if (key % 10 == 5)                data.chipIndex = key / 10;            else                data.chipIndex = key;            LastChips_.Add(data.chipIndex, data);            key++;        }    }    void InitEndEffect()    {        Vector3 route = stage.transform.position - target_.transform.position;        endspeed_ = route / 30.0f;        InitEffectPoints();        startend_ = true;    }    bool NearlyEqual(float a, float b, float distance = 3.0f)    {        return ( a - b >= -distance && a - b < distance);    }    List<Vector3> points_;    int effectIndex_ = 0;    void InitEffectPoints()    {        if(points_ == null)            points_ = new List<Vector3>();        points_.Clear();        for (int index = 0; index < 30; index++)        {            Vector3 currentPosition = target_.transform.position + endspeed_ * index;            int temp = index - 15;            if (temp < 0)                temp = -temp;            temp = 15 - temp;            currentPosition.y += temp * endspeed_.y * 5;            Vector3 point = currentPosition;            points_.Add(point);        }    }    void PlayEndEffect(float time)    {        if (isresult_)        {            crTime_ += time;            if (crTime_ >= resultTime_)            {                isresult_ = false;                crTime_ = 0.0f;                effectIndex_ = 0;                //ShowResult();            }            return;        }        if (!startend_)            return;        RoundTargetAnimalToCamera(time);        if (Vector3.Distance(target_.transform.position, stage.transform.position) <= 1.0f            || effectIndex_ >= points_.Count)        {            if (TargetAnimalName == "Lion")                FD_AudioDataManager.GetInstance().PlayAudio(1011);            if (TargetAnimalName == "Panda")                FD_AudioDataManager.GetInstance().PlayAudio(1015);            if (TargetAnimalName == "Monkey")                FD_AudioDataManager.GetInstance().PlayAudio(1019);            if (TargetAnimalName == "Rabbit")                FD_AudioDataManager.GetInstance().PlayAudio(1023);            target_.transform.position = stage.transform.position;            target_.transform.eulerAngles = new Vector3(target_.transform.eulerAngles.x,                                            camearObj_.transform.eulerAngles.y + 180.0f,                                            target_.transform.eulerAngles.z);            startend_ = false;            isresult_ = true;            animalRotationSpeed = 0.0f;            //iscamera2end_ = true;            MoveCamera2End();            return;        }        //target_.transform.Translate(endspeed_,Space.World);        target_.transform.position = points_[effectIndex_];        effectIndex_++;    }    float animalRotationSpeed = 0.0f;    void RoundTargetAnimalToCamera(float time)    {        float targetY = camearObj_.transform.eulerAngles.y + 180.0f;        float sourceY = target_.transform.eulerAngles.y;        if (sourceY < 0.0f)            sourceY += 360.0f;        if (animalRotationSpeed == 0.0f)            animalRotationSpeed = Mathf.Abs(sourceY - targetY);        float forward = XTurn(sourceY, targetY);        target_.transform.Rotate( new Vector3( 0.0f,time * animalRotationSpeed * forward, 0.0f ) );    }    float XTurn(float sY, float tY)    {        if (NearlyEqual(sY, tY, 0.1f))            return 0.0f;        float result = sY - tY;        if (result > 0.0f)            return -1.0f;        else            return 1.0f;    }    public void ParseResult(byte result)    {        targetColor = result / 10;//1红2绿3黄        switch(result % 10)        {            case 1:                TargetAnimalName = "Lion";                break;            case 2:                TargetAnimalName = "Panda";                break;            case 3:                TargetAnimalName = "Monkey";                break;            case 4:                TargetAnimalName = "Rabbit";                break;            default:                break;        }        //Debug.Log(targetColor + " " +TargetAnimalName);    }    void ClearChilds(GameObject obj)    {        int count = obj.transform.childCount;        for (int index = 0; index < count; index++)        {            GameMain.safeDeleteObj(obj.transform.GetChild(0).gameObject);        }    }    void AnimationComplete(string _type, EventObject eventObject)    {        switch (_type)        {            case EventObject.COMPLETE:                if (eventObject.animationState.name == "chuchang")                {                    resultArmature.animation.Play("idle");                }                break;       }    }    int gunIndex = 0;    public void InitResultPanel()    {        if (fdsr_ == null || fdr_ == null)            return;        resultArmature.animation.Play("chuchang");        resultArmature.AddEventListener(EventObject.COMPLETE, AnimationComplete);        UpdatePlayerCoin(fdsr_.carryMoney);        Text totalChipTx = resultPanel_.transform.Find("ImageEarningBG").            Find("Text_Expend").Find("TextNum").gameObject.GetComponent<Text>();        if (oneRoundTotalChip_ >= 1000000 || oneRoundTotalChip_ <= -1000000)            totalChipTx.text = (oneRoundTotalChip_ / 10000).ToString() + "万";        else            totalChipTx.text = oneRoundTotalChip_.ToString();        Text addCoinTx = resultPanel_.transform.Find("ImageEarningBG").            Find("Text_Earning").Find("TextNum").gameObject.GetComponent<Text>();        long addcoin = fdsr_.addNormalCoin + fdsr_.addRewardCoin;        if (addcoin > 0)            rewardArmature.SetActive(true);        else            rewardArmature.SetActive(false);        if (addcoin >= 1000000 || addcoin <= -1000000)            addCoinTx.text = (addcoin / 10000).ToString() + "万";        else            addCoinTx.text = addcoin.ToString();        if(addcoin == 0)            FD_AudioDataManager.GetInstance().PlayAudio(1006);        else            FD_AudioDataManager.GetInstance().PlayAudio(1007);        GameObject modelresults = resultPanel_.transform.Find("ImageIconBG").gameObject;        ClearChilds(modelresults);        if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Flash)            LoadModelResource(modelresults, "sl_icon_FanBei","null",true,true);        else if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Handsel)            LoadModelResource(modelresults, "sl_icon_CaiJin","null",false,false);        else if(fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Three)        {            LoadModelResource(modelresults, "Animal_" + TargetAnimalName, "sl_frame_dwtx_dsy1", false);        }        else if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Four)        {            ParseResult(fdr_.sign);            string colorName = "null";            switch (targetColor)            {                case 1:                    colorName = "sl_frame_dwtx_hong";                    break;                case 2:                    colorName = "sl_frame_dwtx_lv";                    break;                case 3:                    colorName = "sl_frame_dwtx_huang";                    break;                default:                    break;            }            LoadModelResource(modelresults, "Animal_All", colorName, false);        }        if(fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_GiveGun)        {            for (gunIndex = 0; gunIndex < fdr_.signs.Count; gunIndex++)            {                ParseResult(fdr_.signs[gunIndex]);                string colorName = "null";                switch (targetColor)                {                    case 1:                        colorName = "sl_frame_dwtx_hong";                        break;                    case 2:                        colorName = "sl_frame_dwtx_lv";                        break;                    case 3:                        colorName = "sl_frame_dwtx_huang";                        break;                    default:                        break;                }                LoadModelResource(modelresults, "Animal_" + TargetAnimalName, colorName);            }        }        else        {            if (fdr_.model != (byte)GameCity.ForestMode_Enum.ForestMode_Three &&                fdr_.model != (byte)GameCity.ForestMode_Enum.ForestMode_Four)            {                ParseResult(fdr_.sign);                string colorName = "null";                switch (targetColor)                {                    case 1:                        colorName = "sl_frame_dwtx_hong";                        break;                    case 2:                        colorName = "sl_frame_dwtx_lv";                        break;                    case 3:                        colorName = "sl_frame_dwtx_huang";                        break;                    default:                        break;                }                LoadModelResource(modelresults, "Animal_" + TargetAnimalName, colorName);            }        }        if(fdr_.osign == 1)            LoadModelResource(modelresults, "sl_word_z_z3", "null", false);        if (fdr_.osign == 2)            LoadModelResource(modelresults, "sl_word_z_h2", "null", false);        if (fdr_.osign == 3)            LoadModelResource(modelresults, "sl_word_z_x2", "null", false);        GameObject rankPanel_ = resultPanel_.transform.Find("ImageRanking").gameObject;        for(int index = 0; index < 3;  index++)        {            string rankName = "Number" + (index + 1).ToString();            GameObject rankobj = rankPanel_.transform.Find(rankName).gameObject;            if (index >= fdsr_.sortData.Count)            {                rankobj.SetActive(false);                continue;            }            rankobj.SetActive(true);            Image icon = rankPanel_.transform.Find(rankName).Find("Image_HeadFram").                Find("Image_Mask").Find("Image_Head").gameObject.GetComponent<Image>();            icon.sprite = GameMain.hall_.GetIcon(fdsr_.sortData[index].url, fdsr_.sortData[index].playerid, (int)fdsr_.sortData[index].faceID);            Text name = rankPanel_.transform.Find(rankName).Find("TextName").gameObject.GetComponent<Text>();            name.text = fdsr_.sortData[index].userName;            Text coin = rankPanel_.transform.Find(rankName).Find("Image_coinframe").                Find("Text_Coin").gameObject.GetComponent<Text>();            long money = fdsr_.sortData[index].addNormalCoin;            if (money >= 1000000 || money <= -1000000)                coin.text = (money / 10000).ToString() + "万";            else                coin.text = money.ToString();        }    }    public int colorid;    void LoadModelResource(GameObject resultBG, string spriteName, string colorName = "null", bool isShowPower = true, bool isFlash = false)    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("ResultIcon_");        GameObject resultIcon = (GameObject)GameMain.instantiate(obj0);        resultIcon.transform.SetParent(resultBG.transform, false);        if (colorName != "null")        {            Image colorImg = resultIcon.GetComponent<Image>();            Sprite tmpsprite = bundle.LoadAsset<Sprite>(colorName);            colorImg.sprite = tmpsprite;        }        Image img = resultIcon.transform.Find("ImageResult_Icon").gameObject.GetComponent<Image>();        img.sprite = bundle.LoadAsset<Sprite>(spriteName);        resultIcon.transform.Find("ImageBeiShu").gameObject.SetActive(isShowPower);        if(isShowPower)        {            Text power = resultIcon.transform.Find("ImageBeiShu").Find("TextNum").gameObject.GetComponent<Text>();            if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Flash && isFlash)                power.text = fdr_.power.ToString();            //else if (index < powers.Count && index >= 0)            //    power.text = powers[index];            //else            //    Debug.Log("out range index ------ " + index + "  powers length" + powers.Count);            else            {                power.text = ParseIndex();            }          }    }    string ParseIndex()    {        string result = "";        if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_GiveGun)            result = chipObjects_[fdr_.signs[gunIndex]].transform.Find("ImageBeiLv").                Find("Text").gameObject.GetComponent<Text>().text;        else        {            if (chipObjects_.ContainsKey(fdr_.sign))            {                result = chipObjects_[fdr_.sign].transform.Find("ImageBeiLv").                    Find("Text").gameObject.GetComponent<Text>().text;            }        }        return result;    }    public void ShowResult()    {        Resulting(false);        if (fdsr_ == null)            return;        if (!gamePanel_.activeSelf)            return;        if (resultPanel_ == null)            LoadResultResource();        InitResultPanel();        if(fdr_ != null)            resultPanel_.SetActive(true);    }    public void CloseResult()    {        if (resultPanel_ == null)            LoadResultResource();        if (GameMain.hall_.isGetRelief)            GameMain.hall_.ShowRelief();        ResetAnimalModel();        ResetFourAnimals();        ResetSceneColor();        CloseGiveGun();        ResetStartEffect();        resultPanel_.SetActive(false);        fourIndex = 0;        threeIndex = 0;        //iscamera2start_ = true;        MoveCamera2Start();        CloseResultState();        RefreshRecord();        if (fdr_ == null)            return;        if (fdr_.model == (byte)GameCity.ForestMode_Enum.ForestMode_Handsel)            CloseHandselEffect();    }    void LoadSceneEffect()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object obj1 = (GameObject)bundle.LoadAsset("Effect_Scene_01");        GameObject sceneEffect1 = (GameObject)GameMain.instantiate(obj1);        UnityEngine.Object obj2 = (GameObject)bundle.LoadAsset("Effect_Scene_02");        GameObject sceneEffect2 = (GameObject)GameMain.instantiate(obj2);        UnityEngine.Object obj3 = (GameObject)bundle.LoadAsset("Effect_Scene_03");        GameObject sceneEffect3 = (GameObject)GameMain.instantiate(obj3);        GameObject sceneEffect = GameObject.Find("Scene_Effect");        sceneEffect1.transform.SetParent(sceneEffect.transform,false);        sceneEffect2.transform.SetParent(sceneEffect.transform,false);        GameObject wall = root_.transform.Find("Model_Wall").gameObject;        sceneEffect3.transform.SetParent(wall.transform,false);    }    void PlayAnimationByName(GameObject mesh, string name, bool state)    {        if (!mesh.activeSelf)            return;        UnityEngine.Animator animation = mesh.GetComponent<UnityEngine.Animator>();        animation.SetBool(name, state);    }    int[] roads = { 255, 255, 255 };    int currentRoadIndex = 0;    void PlaySceneLight(float time)    {        if (roads[currentRoadIndex] <= 0)        {            currentRoadIndex++;            if (currentRoadIndex > 2)            {                roads[0] = 255;                roads[1] = 255;                roads[2] = 255;                currentRoadIndex = 0;            }        }        roads[currentRoadIndex]--;        string wallName = "A1_slwh_cj_c";        GameObject wall = root_.transform.Find("Model_Wall").Find(wallName).gameObject;        MeshRenderer mr = wall.GetComponent<MeshRenderer>();        mr.materials[0].SetColor("Color_5", new Color(roads[0], roads[1], roads[2]));    }    bool isChangeSceneColor = false;    bool changeControl = false;    float sceneTime = 0.2f;    float currentSceneTime = 0.0f;    void ChangeSceneColor(float time)    {        if (!isChangeSceneColor)            return;        currentSceneTime += time;        if (currentSceneTime >= sceneTime)        {            changeControl = !changeControl;            currentSceneTime = 0.0f;        }        for ( char index = 'a'; index < 'f'; index++ )        {            if (index == 'c')                continue;            string wallName = "A1_slwh_cj_" + index;            GameObject wall = root_.transform.Find("Model_Wall").Find(wallName).gameObject;            MeshRenderer mr = wall.GetComponent<MeshRenderer>();            if (!changeControl)            {                mr.material = middle_;                continue;            }            switch (targetColor)            {                case 1:                    mr.material = red_;                    break;                case 2:                    mr.material = green_;                    break;                case 3:                    mr.material = yellow_;                    break;                default:                    break;            }        }    }    void ResetSceneColor()    {        for (char index = 'a'; index < 'f'; index++)        {            if (index == 'c')                continue;            string wallName = "A1_slwh_cj_" + index;            GameObject wall = root_.transform.Find("Model_Wall").Find(wallName).gameObject;            MeshRenderer mr = wall.GetComponent<MeshRenderer>();            mr.material = middle_;        }    }    void InitFourAnimalList()    {        GameObject LionModel = root_.transform.Find("A1_slwh_cj_r").Find("Point_1").Find("Model_Lion").gameObject;        GameObject RabbitModel = root_.transform.Find("A1_slwh_cj_r").Find("Point_2").Find("Model_Rabbit").gameObject;        GameObject PandaModel = root_.transform.Find("A1_slwh_cj_r").Find("Point_3").Find("Model_Panda").gameObject;        GameObject MonkeyModel = root_.transform.Find("A1_slwh_cj_r").Find("Point_4").Find("Model_Monkey").gameObject;        Animals_.Clear();        Animals_.Add(LionModel);        Animals_.Add(RabbitModel);        Animals_.Add(PandaModel);        Animals_.Add(MonkeyModel);    }    void ResetFourAnimals()    {        GameObject LionModel = root_.transform.Find("Model_Animal").            Find("Lion_1").Find("A2_slwh_Animal").gameObject;        GameObject RabbitModel = root_.transform.Find("Model_Animal").            Find("Rabbit_3").Find("A2_slwh_Animal").gameObject;        GameObject PandaModel = root_.transform.Find("Model_Animal").            Find("Panda_2").Find("A2_slwh_Animal").gameObject;        GameObject MonkeyModel = root_.transform.Find("Model_Animal").            Find("Monkey_5").Find("A2_slwh_Animal").gameObject;        Animals_[0].transform.position = LionModel.transform.position;        Animals_[1].transform.position = RabbitModel.transform.position;        Animals_[2].transform.position = PandaModel.transform.position;        Animals_[3].transform.position = MonkeyModel.transform.position;        fourStage.SetActive(false);        fourStage.transform.localPosition = new Vector3(0.0f, 25.68f, 0.0f);        for(int index = 0; index < Animals_.Count; index++)        {            Animals_[index].SetActive(false);        }    }    bool isJumpFour_ = false;    bool isUpFour_ = false;    List<List<Vector3>> fourPoints_;    Vector3 fourSpeed;    void InitFourPoints()    {        fourStage.SetActive(true);        if (fourPoints_ == null)            fourPoints_ = new List<List<Vector3>>();        fourPoints_.Clear();        for (int index = 1; index <= Animals_.Count; index++)        {            Animals_[index - 1].SetActive(true);            GameObject fourPointObj = root_.transform.Find("A1_slwh_cj_r").                Find("Point_" + index.ToString()).gameObject;            Vector3 route = fourPointObj.transform.position - Animals_[index - 1].transform.position;            fourSpeed = route / 30.0f;            InitFourPointsByTarget(Animals_[index - 1]);        }        OpenResultStage();        isJumpFour_ = true;    }    void InitFourPointsByTarget(GameObject targetModel)    {        List<Vector3> points = new List<Vector3>();        for (int index = 0; index < 40; index++)        {            Vector3 currentPosition = targetModel.transform.position + fourSpeed * index;            int temp = index - 15;            if (temp < 0)                temp = -temp;            temp = 15 - temp;            currentPosition.y += temp * fourSpeed.y * 5;            Vector3 point = currentPosition;            points.Add(point);        }        fourPoints_.Add(points);    }    int fourIndex = 0;    void Jump2FourStage()    {        if (!isJumpFour_ )            return;        for (int index = 0; index < Animals_.Count; index++)        {            GameObject fourPointObj = root_.transform.Find("A1_slwh_cj_r").                Find("Point_" + (index + 1).ToString()).gameObject;            if (Vector3.Distance(Animals_[index].transform.position, fourPointObj.transform.position) <= 3.0f)            {                for (int i = 0; i < Animals_.Count; i++)                {                    Animals_[i].transform.localPosition = new Vector3(0.0f, 0.0f, 0.0f);                    Animals_[i].transform.localEulerAngles = new Vector3(0.0f, 0.0f, 0.0f);                }                isJumpFour_ = false;                isUpFour_ = true;                fourIndex = 0;                return;            }            if (fourIndex < fourPoints_[index].Count)                Animals_[index].transform.position = fourPoints_[index][fourIndex];            else            {                for (int i = 0; i < Animals_.Count; i++)                {                    Animals_[i].transform.localPosition = new Vector3(0.0f, 0.0f, 0.0f);                    Animals_[i].transform.localEulerAngles = new Vector3(0.0f, 0.0f, 0.0f);                }                isJumpFour_ = false;                isUpFour_ = true;                fourIndex = 0;                return;            }        }        if(isJumpFour_)            fourIndex++;    }    float upFourSpeed = 10.0f;    void UpFourStage(float time)    {        if (!isUpFour_)            return;        fourStage.transform.Translate(new Vector3(0.0f,upFourSpeed * time,0.0f));        //for (int index = 0; index < Animals_.Count; index++)        //    Animals_[index].transform.Translate(new Vector3(0.0f, upFourSpeed * time, 0.0f));        if(fourStage.transform.localPosition.y >= 27.18f)        {            isUpFour_ = false;        }    }    bool startThree_ = false;    void InitThreeEffect()    {        fourStage.SetActive(true);        if (fourPoints_ == null)            fourPoints_ = new List<List<Vector3>>();        fourPoints_.Clear();        for (int index = 1; index <= Animals_.Count; index++)        {            Vector3 route = stage.transform.position - Animals_[index - 1].transform.position;            fourSpeed = route / 30.0f;            InitFourPointsByTarget(Animals_[index - 1]);        }        startThree_ = true;        //System.Random rd = new System.Random(6);        int animalIndex = rd.Next(4);        Animals_[animalIndex].SetActive(true);    }    int threeIndex = 0;    void PlayThreeEffect()    {        if (!startThree_)        {            return;        }        SwitchAnimal();        for (int index = 0; index < Animals_.Count; index++)        {            if (Vector3.Distance(Animals_[index].transform.position, stage.transform.position) <= 3.0f)            {                isSwitchAnimal = true;                Animals_[index].transform.position = stage.transform.position;                Animals_[index].transform.eulerAngles = new Vector3(0.0f, 180.0f, 0.0f);                threeIndex = 0;                continue;            }            if (threeIndex < fourPoints_[index].Count)                Animals_[index].transform.position = fourPoints_[index][threeIndex];            else                Debug.Log("threeIndex====" + threeIndex);        }        if(startThree_)            threeIndex++;    }    bool isSwitchAnimal = false;    int lastIndex = 0;    void SwitchAnimal()    {        if (!isSwitchAnimal)            return;        int index = GetCurrentNameByTargetPosition(TargetColorPosition);        if (lastIndex == index || index < 0)            return;        lastIndex = index;        if (animalNames_[index].StartsWith("Lion"))        {            Animals_[0].SetActive(true);            CloseOtherAnimalsByIndex(0);        }        if (animalNames_[index].StartsWith("Rabbit"))        {            Animals_[1].SetActive(true);            CloseOtherAnimalsByIndex(1);        }        if (animalNames_[index].StartsWith("Panda"))        {            Animals_[2].SetActive(true);            CloseOtherAnimalsByIndex(2);        }        if (animalNames_[index].StartsWith("Monkey"))        {            Animals_[3].SetActive(true);            CloseOtherAnimalsByIndex(3);        }    }    void CloseOtherAnimalsByIndex(int animalIndex)    {        for(int index = 0; index < Animals_.Count; index++)        {            if (index == animalIndex)                continue;            Animals_[index].SetActive(false);        }    }    GameObject gunTimesObj_;    MeshRenderer gunTimesMesh_;    int guntimes_;    void InitGiveGun()    {        gunTimesObj_ = root_.transform.Find("Model_TiaoQiang").gameObject;        gunTimesObj_.SetActive(true);        gunTimesMesh_ = gunTimesObj_.transform.Find("A1_slwh_cj_v").            Find("shuzi").gameObject.GetComponent<MeshRenderer>();        if (fdr_.sign < 9 && fdr_.sign > 2)            gunTimesMesh_.material = gunMaterils_[fdr_.sign];        else            Debug.Log("GunTimes=========" + (int)fdr_.sign);    }    void CloseGiveGun()    {        if(gunTimesObj_!=null)            gunTimesObj_.SetActive(false);    }    void ChangeGunTimesMaterial()    {        if (guntimes_ < 0)        {            gunTimesObj_.SetActive(false);            return;        }        gunTimesMesh_.material = gunMaterils_[guntimes_];    }    List<Material> gunMaterils_;    void LoadGunMaterials()    {        if (gunMaterils_ == null)            gunMaterils_ = new List<Material>();        gunMaterils_.Clear();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata != null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle != null)            {                for (int index = 0; index < 9; index++)                {                    Material material = bundle.LoadAsset<Material>("Model_Text_" + index.ToString());                    gunMaterils_.Add(material);                }            }        }    }    GameObject resultStage;    bool isOpenResult = false;    void OpenResultStage()    {        if (resultStage == null)            resultStage = root_.transform.Find("Model_Shade").gameObject;        PlayAnimationByName(resultStage, "kai", true);        isOpenResult = true;    }    void CloseResultState()    {        if (resultStage == null)            resultStage = root_.transform.Find("Model_Shade").gameObject;        PlayAnimationByName(resultStage, "kai", false);        isOpenResult = false;        resultState = false;    }    List<GameObject> handsels_;    void InitHandselEffect()    {        if (handsels_ == null)            handsels_ = new List<GameObject>();        GameObject LionModel = root_.transform.Find("Model_Animal").            Find("Lion_1").Find("A3_slwh_Animal").gameObject;        GameObject RabbitModel = root_.transform.Find("Model_Animal").            Find("Rabbit_3").Find("A3_slwh_Animal").gameObject;        GameObject PandaModel = root_.transform.Find("Model_Animal").            Find("Panda_2").Find("A3_slwh_Animal").gameObject;        GameObject MonkeyModel = root_.transform.Find("Model_Animal").            Find("Monkey_5").Find("A3_slwh_Animal").gameObject;        handsels_.Clear();        handsels_.Add(LionModel);        handsels_.Add(RabbitModel);        handsels_.Add(PandaModel);        handsels_.Add(MonkeyModel);    }    void StartHandselEffect()    {        GameObject LionModel = root_.transform.Find("Model_Animal").            Find("Lion_1").Find("A2_slwh_Animal").gameObject;        GameObject RabbitModel = root_.transform.Find("Model_Animal").            Find("Rabbit_3").Find("A2_slwh_Animal").gameObject;        GameObject PandaModel = root_.transform.Find("Model_Animal").            Find("Panda_2").Find("A2_slwh_Animal").gameObject;        GameObject MonkeyModel = root_.transform.Find("Model_Animal").            Find("Monkey_5").Find("A2_slwh_Animal").gameObject;        LionModel.SetActive(false);        RabbitModel.SetActive(false);        PandaModel.SetActive(false);        MonkeyModel.SetActive(false);        for (int index = 0; index < handsels_.Count; index++)            handsels_[index].SetActive(true);    }    void ResetHandselModel()    {        GameObject LionModel = root_.transform.Find("Model_Animal").            Find("Lion_1").Find("A2_slwh_Animal").gameObject;        GameObject RabbitModel = root_.transform.Find("Model_Animal").            Find("Rabbit_3").Find("A2_slwh_Animal").gameObject;        GameObject PandaModel = root_.transform.Find("Model_Animal").            Find("Panda_2").Find("A2_slwh_Animal").gameObject;        GameObject MonkeyModel = root_.transform.Find("Model_Animal").            Find("Monkey_5").Find("A2_slwh_Animal").gameObject;        handsels_[0].transform.position = LionModel.transform.position;        handsels_[1].transform.position = RabbitModel.transform.position;        handsels_[2].transform.position = PandaModel.transform.position;        handsels_[3].transform.position = MonkeyModel.transform.position;        for(int index = 0; index < handsels_.Count; index++)            handsels_[0].transform.eulerAngles = Vector3.zero;    }    void PlayHandselEffect()    {        if (TargetAnimalName.StartsWith("Lion"))            target_ = handsels_[0];        else if (TargetAnimalName.StartsWith("Rabbit"))            target_ = handsels_[1];        else if (TargetAnimalName.StartsWith("Panda"))            target_ = handsels_[2];        else if (TargetAnimalName.StartsWith("Monkey"))            target_ = handsels_[3];        //target_.SetActive(true);        PlayAnimationByName(target_, "Show", true);        InitEndEffect();    }    void CloseHandselEffect()    {        for (int index = 0; index < handsels_.Count; index++)            handsels_[index].SetActive(false);                ResetHandselModel();        flashEffect.SetActive(false);    }    void PlayThreeAudio()    {        if (TargetAnimalName.StartsWith("Lion"))            FD_AudioDataManager.GetInstance().PlayAudio(1027);        if (TargetAnimalName.StartsWith("Rabbit"))            FD_AudioDataManager.GetInstance().PlayAudio(1028);        if (TargetAnimalName.StartsWith("Panda"))            FD_AudioDataManager.GetInstance().PlayAudio(1029);        if (TargetAnimalName.StartsWith("Monkey"))            FD_AudioDataManager.GetInstance().PlayAudio(1030);    }    void PlayFourAudio()    {        switch (targetColor)        {            case 1:                FD_AudioDataManager.GetInstance().PlayAudio(1031);                break;            case 2:                FD_AudioDataManager.GetInstance().PlayAudio(1032);                break;            case 3:                FD_AudioDataManager.GetInstance().PlayAudio(1033);                break;        }    }    void PlayAudioByAnimalAndColor()    {        if (TargetAnimalName.StartsWith("Lion"))        {            switch(targetColor)            {                case 1:                    FD_AudioDataManager.GetInstance().PlayAudio(1012);                    break;                case 2:                    FD_AudioDataManager.GetInstance().PlayAudio(1013);                    break;                case 3:                    FD_AudioDataManager.GetInstance().PlayAudio(1014);                    break;            }                    }        if(TargetAnimalName.StartsWith("Panda"))        {            switch (targetColor)            {                case 1:                    FD_AudioDataManager.GetInstance().PlayAudio(1016);                    break;                case 2:                    FD_AudioDataManager.GetInstance().PlayAudio(1017);                    break;                case 3:                    FD_AudioDataManager.GetInstance().PlayAudio(1018);                    break;            }        }        if (TargetAnimalName.StartsWith("Rabbit"))        {            switch (targetColor)            {                case 1:                    FD_AudioDataManager.GetInstance().PlayAudio(1024);                    break;                case 2:                    FD_AudioDataManager.GetInstance().PlayAudio(1025);                    break;                case 3:                    FD_AudioDataManager.GetInstance().PlayAudio(1026);                    break;            }        }        if (TargetAnimalName.StartsWith("Monkey"))        {            switch (targetColor)            {                case 1:                    FD_AudioDataManager.GetInstance().PlayAudio(1020);                    break;                case 2:                    FD_AudioDataManager.GetInstance().PlayAudio(1021);                    break;                case 3:                    FD_AudioDataManager.GetInstance().PlayAudio(1022);                    break;            }        }    }    GameObject RightChipPanel;    Dictionary<string, GameObject> BetTypes;    List<string> betkeys;    void RefreshRightChipPanel()    {        if (RightChipPanel == null)            RightChipPanel = gamePanel_.transform.Find("Bottom").Find("BteRecordBG").Find("Content_BteRecordBG").gameObject;        if (BetTypes == null)            InitBetTypes();        for(int index = 0; index < BetTypes.Count; index++)        {            string key = betkeys[index];            SetBetNumber(BetTypes[key], index);        }    }    void SetBetNumber(GameObject betobj, int animalIndex)    {        bool isChipAnimal = false;        if (animalIndex < 4)        {            for( int index = 1; index < 4; index++ )            {                GameObject color = betobj.transform.Find("BteNum").                    Find("Color_" + index.ToString()).gameObject;                Text colorText = color.transform.Find("Text").gameObject.GetComponent<Text>();                long chipNumber = CurrentChips_[index * 10 + animalIndex + 1].selfchip;                colorText.text = chipNumber.ToString();                if (chipNumber > 0)                {                    color.SetActive(true);                    isChipAnimal = true;                }                else                    color.SetActive(false);            }            betobj.SetActive(isChipAnimal);            betobj.transform.Find("ImageHead_Icon").gameObject.SetActive(true);            betobj.transform.Find("ImageZhuangHeXian").gameObject.SetActive(false);        }        else        {            GameObject color = betobj.transform.Find("BteNum").                    Find("Color_4").gameObject;            Text colorText = color.transform.Find("Text").gameObject.GetComponent<Text>();            long chipNumber = CurrentChips_[animalIndex - 3].selfchip;            colorText.text = chipNumber.ToString();            for (int index = 1; index < 4; index++)            {                GameObject colorOther = betobj.transform.Find("BteNum").                    Find("Color_" + index.ToString()).gameObject;                colorOther.SetActive(false);            }            if (chipNumber > 0)            {                color.SetActive(true);                isChipAnimal = true;            }            else            {                color.SetActive(false);            }            betobj.SetActive(isChipAnimal);            betobj.transform.Find("ImageHead_Icon").gameObject.SetActive(false);            betobj.transform.Find("ImageZhuangHeXian").gameObject.SetActive(true);        }    }    void InitBetTypes()    {        BetTypes = new Dictionary<string, GameObject>();        betkeys = new List<string>();        betkeys.Add("Lion");        betkeys.Add("Panda");        betkeys.Add("Monkey");        betkeys.Add("Rabbit");        betkeys.Add("Zhuang");        betkeys.Add("He");        betkeys.Add("Xian");        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        for (int index = 0; index < betkeys.Count; index++)        {            GameObject betobj = LoadRightChipPanel(betkeys[index]);            Image AnimalImg = betobj.transform.Find("ImageHead_Icon").gameObject.GetComponent<Image>();            Image zhxIcon = betobj.transform.Find("ImageZhuangHeXian").gameObject.GetComponent<Image>();            if (index < 4)                AnimalImg.sprite = bundle.LoadAsset<Sprite>("Animal_" + betkeys[index]);            else                zhxIcon.sprite = zhxsprites_[index - 4];            betobj.SetActive(false);            BetTypes.Add(betkeys[index], betobj);        }        ResetBetType();    }    void ResetBetType()    {        foreach(string key in BetTypes.Keys)        {            GameObject betobj = BetTypes[key];            betobj.SetActive(false);            for (int index = 1; index < 5; index++)            {                GameObject color = betobj.transform.Find("BteNum").                    Find("Color_" + index.ToString()).gameObject;                Text colorText = color.transform.Find("Text").gameObject.GetComponent<Text>();                colorText.text = "0";                color.SetActive(false);            }        }    }    GameObject LoadRightChipPanel( string name )    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_ForestDance);        if (gamedata == null)            return null;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return null;        UnityEngine.Object obj0 = (GameObject)bundle.LoadAsset("Record_Bte");        GameObject result = (GameObject)GameMain.instantiate(obj0);        result.name = name;        result.transform.SetParent( RightChipPanel.transform, false );        result.SetActive(false);        return result;    }    List<Vector3> cameraPoints_;    GameObject camearObj_;    Vector3 cameraSpeed_;    GameObject cameraStart_;    GameObject cameraEnd_;    void InitCameraPoints()    {        camearObj_ = GameObject.Find("Main Camera");        cameraStart_ = GameObject.Find("Sign_Camera_1");        cameraEnd_ = GameObject.Find("Sign_Camera_2");        Vector3 route = cameraEnd_.transform.position - cameraStart_.transform.position;        cameraSpeed_ = route / 30.0f;        if (cameraPoints_ == null)            cameraPoints_ = new List<Vector3>();        cameraPoints_.Clear();        for (int index = 0; index < 30; index++)        {            Vector3 currentPosition = cameraStart_.transform.position + cameraSpeed_ * index;            Vector3 point = currentPosition;            cameraPoints_.Add(point);        }    }    //bool iscamera2end_ = false;    //bool iscamera2start_ = false;    //int cameraIndex = 0;        void MoveCamera2End()    {        //if (!iscamera2end_)        //    return;        //if (cameraIndex < 30)        //{        //    camearObj_.transform.position = cameraPoints_[cameraIndex];        //    cameraIndex++;        //}        //else        //{        //    iscamera2end_ = false;        //    cameraIndex = 29;        //}        PlayAnimationByName(camearObj_, "Show", true);        Resulting(true);        //DOTweenPath camera = camearObj_.GetComponent<DOTweenPath>();        //camera.autoKill = false;        //camera.DOPlayForward();    }    void MoveCamera2Start()    {        //if (!iscamera2start_)        //    return;        //if (cameraIndex >= 0)        //{        //    camearObj_.transform.position = cameraPoints_[cameraIndex];        //    cameraIndex--;        //}        //else        //{        //    iscamera2start_ = false;        //    cameraIndex = 0;        //}        PlayAnimationByName(camearObj_, "Show", false);        Resulting(false);        //DOTweenPath camera = camearObj_.GetComponent<DOTweenPath>();        //camera.autoKill = false;        //camera.DOPlayBackwards();    }}