using DG.Tweening;using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.EventSystems;using UnityEngine.UI;using USocket.Messages;public class CGame_BlackJack : CGameBase{    GameObject m_LobbyUIObj;    GameObject m_MainUIObj;    GameObject m_ChipsCountUIObj;    Camera[] m_Cameras;    Button[] m_AddChipsBtns;    Button[] m_ChipsBtns;    Toggle m_AutoChipToggle;    Button[] m_GameBtns;    public Camera CurCam    {        get;        private set;    }        public Camera UICam    {        get;        private set;    }    GameObject m_LocalPlayerInfoUI, m_PlayerUIObj, m_StandUIObj, m_PopupUIObj;    Button m_ReqDealerBtn;    byte m_nDealerState = 1;    bool m_bChiped = false;    bool m_bGameButtonChanging = false;    long m_nPrepareChips = 0;    float m_fGameButtonOriginY;    public RoomInfo m_RoomInfo;    public GameObject m_SitUIObj;    public AssetBundle m_AssetBundle;    public Canvas m_GameCanvas;    public byte m_nLocalPlayerSit = RoomInfo.NoSit;    public enum FocusType    {        eFT_Lost,        eFT_Get,        eFT_WaitForGet,    }    public FocusType m_eFocus = FocusType.eFT_Get;    CustomCountdownImgMgr m_CCIMgr = new CustomCountdownImgMgr();    enum CameraType    {        Cam_UI,        Cam_Main,        Cam_Dealer,        Cam_Player1,        Cam_Player2,        Cam_Player3,        Cam_Player4,        Cam_Playr5,        Cam_Num    }    public CGame_BlackJack() : base(GameKind_Enum.GameKind_BlackJack)    {    }    public override void Initialization()    {        base.Initialization();        LoadResource();        InitCamera();        InitMsgHandle();        m_RoomInfo = new RoomInfo(this, m_MainUIObj.transform.FindChild("Middle"));        CheckInvite();        CustomAudioDataManager.GetInstance().ReadAudioCsvData((byte)GameKind_Enum.GameKind_BlackJack, "Game21AudioCsv");        CustomAudioDataManager.GetInstance().PlayAudio(1001, false);    }    public override void ProcessTick()    {        base.ProcessTick();        m_RoomInfo.OnTick();        m_CCIMgr.UpdateTimeImage();        if(m_eFocus == FocusType.eFT_WaitForGet)        {            if(HallMain.m_iRoomSerIndex == 0 || NetWorkClient.GetInstance().GetCacheMessageCount() < 2)            {                m_eFocus = FocusType.eFT_Get;                m_RoomInfo.m_DealerAnimCtrl.OnFocusChange();            }        }    }    void InitMsgHandle()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_APPLYLEAVEROOM, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_SITPLAYERLEAVEROOM, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_CHOOSElEVEL, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_ENTERROOM, HandleEnterRoom);        CMsgDispatcher.GetInstance().RegMsgDictionary(               (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_BOSSCHANGE, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_BOSSDOWN, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_APPLYSITDOWN, HandleApplySit);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_APPLYSTADN, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_DEALPOKERSTOPLAYER, HandlePokerToPlayer);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_ENTERGAMESTATE, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_OPENBOSSHOLDPOKE, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_APPLYBEBOSS, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_CHIPIN, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_ASKDOUBLEORNEED, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_ASKBUYSAFECOIN, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_ANSWERDOUBLEORNEED, HandleAnswerDoubleOrNeed);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_AGREEBUYSAFE, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_BUYSAFECOINRESULT, HandleBuySafeResult);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_APPLYBOSSLIST, HandleDealerList);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_NICKOUTROOMFORCOIN, HandleGameNetMsg);    }    public override bool HandleGameNetMsg(uint _msgType, UMessage _ms)    {        GameCity.EMSG_ENUM eMsg = (GameCity.EMSG_ENUM)_msgType;        switch (eMsg)        {            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_CHOOSElEVEL:                {                    m_RoomInfo.m_nRoomLevel = RoomInfo.NoSit;                    byte level = _ms.ReadByte();                    byte errorCode = _ms.ReadByte();                    RoomData rd = BlackJack_Data.GetInstance().m_RoomData[level - 1];                    if(errorCode == 3)                        CCustomDialog.OpenCustomConfirmUIWithFormatParam(2217, rd.m_nMaxInCoin);                    else                        CCustomDialog.OpenCustomConfirmUIWithFormatParam(2214, rd.m_nMinInCoin);                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_APPLYLEAVEROOM:                {                    uint userid = _ms.ReadUInt();                    byte state = _ms.ReadByte();                    if(state > 0)                    {                        BackToChooseLevel();                    }                    else                    {                        //failed                        uint error = 1011;                        if(userid == m_RoomInfo.m_Dealer.m_nUserId)                            error = 2219;                        CCustomDialog.OpenCustomConfirmUI(error);                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_SITPLAYERLEAVEROOM:                {                    byte sit = _ms.ReadByte();                    uint userid = _ms.ReadUInt();                    string name = _ms.ReadString();                    m_RoomInfo.m_PlayerList[sit].Init();                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_NICKOUTROOMFORCOIN:                {                    BackToChooseLevel();                    CCustomDialog.OpenCustomConfirmUI(2215);                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_BOSSCHANGE:                {                    m_RoomInfo.m_Dealer.Init();                    m_RoomInfo.m_Dealer.m_nUserId = _ms.ReadUInt();                    m_RoomInfo.m_Dealer.m_nFaceId = _ms.ReadUInt();                    m_RoomInfo.m_Dealer.m_nUrl = _ms.ReadString();                    m_RoomInfo.m_Dealer.m_nTotalCoin = _ms.ReadLong();                    m_RoomInfo.m_Dealer.m_cRoleName = _ms.ReadString();                    bool bLocal = m_RoomInfo.m_Dealer.m_nUserId == GameMain.hall_.GetPlayerId();                    m_RoomInfo.m_Dealer.OnEnterRoom(bLocal);                    if (bLocal)                    {                        OnReqDealerStateChange(3);//变成申请下庄                        OnGameLocalPlayerSit(true, RoomInfo.PlayerNum);                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_BOSSDOWN:                {                    uint userId = _ms.ReadUInt();                    if (userId == GameMain.hall_.GetPlayerId())                    {                        OnReqDealerStateChange(1);//变成申请上庄                        OnGameLocalPlayerSit(false);                    }                    m_RoomInfo.m_Dealer.Init();                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_APPLYSTADN:                {                    short sign = _ms.ReadShort();                    DebugLog.Log("Recive player stand, result:" + sign);                    if (sign > -1)//success                    {                        byte isByServer = _ms.ReadByte();//0:self 1:byServer                        uint userid = _ms.ReadUInt();                        string name = _ms.ReadString();                        m_RoomInfo.m_PlayerList[sign].Init();                        if (userid == GameMain.hall_.GetPlayerId())                        {                            if (isByServer > 0)                                CCustomDialog.OpenCustomConfirmUI(2207);                            OnGameLocalPlayerSit(false);                        }                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_ENTERGAMESTATE:                {                    OnStateChange((BlackRoomState_Enum)_ms.ReadByte(), _ms);                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_OPENBOSSHOLDPOKE:                {                    uint userId = _ms.ReadUInt();                    Debug.Assert(userId == m_RoomInfo.m_Dealer.m_nUserId, string.Format("receive user{0} open hold poker,but he isn't dealer!", userId));                    m_RoomInfo.m_Dealer.m_nOpenPoke = _ms.ReadByte();                    m_RoomInfo.m_DealerAnimCtrl.CardsToPlayer(RoomInfo.PlayerNum, _ms.ReadByte(), _ms.ReadByte());                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_APPLYBEBOSS:                {                    byte state = _ms.ReadByte();                    byte result = _ms.ReadByte();                    if(result == 0)                    {                        DebugLog.Log("Req dealer success!! state:" + state);                        if (state % 2 == 0)                            state -= 1;                        else                            state += 1;                        OnReqDealerStateChange(state);                    }                    else                    {                        //1 不在房间 2 本人是坐庄 3 已经在申请坐庄列表里了 4 钱不够                        if(result == 4)                        {                            RoomData rd = BlackJack_Data.GetInstance().m_RoomData[m_RoomInfo.m_nRoomLevel - 1];                            CCustomDialog.OpenCustomConfirmUIWithFormatParam(2208, rd.m_nBossNeedMin);                        }                        else                        {                            DebugLog.LogWarning(string.Format("Request dealer failed, wrong code:{0}", result));                            CCustomDialog.OpenCustomConfirmUI(2203);                        }                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_CHIPIN:                {                    byte state = _ms.ReadByte();                    DebugLog.LogWarning("chipin result:" + state);                    if (state > 0)                    {                        //1：不在下注状态 2：没有坐下 3：你是boss 4：钱不够 5:超上限                        if (state == 4)                            CCustomDialog.OpenCustomConfirmUI(2204);                        else if(state == 5)                            CCustomDialog.OpenCustomConfirmUI(2218);                        else                            CCustomDialog.OpenCustomConfirmUI(2212);                        OnResetAutoChip();                        m_bChiped = false;                        UpdatePlayerUI();                    }                    else                    {                        uint userid = _ms.ReadUInt();                        byte sit = _ms.ReadByte();                        m_RoomInfo.m_PlayerList[sit].m_nChipInCoin[0] = _ms.ReadLong();                        m_RoomInfo.m_PlayerList[sit].m_nTotalCoin = _ms.ReadLong();                        m_RoomInfo.m_PlayerList[sit].OnPlayerChiped(0, true, true);                        if (userid == GameMain.hall_.GetPlayerId())                        {                            m_bChiped = false;                            OnGameLocalPlayerChiped(m_RoomInfo.m_PlayerList[sit].m_nTotalCoin);                        }                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_ASKDOUBLEORNEED:                {                    uint userid = _ms.ReadUInt();                    byte sign = _ms.ReadByte();                    byte sit = _ms.ReadByte();                    OnChangeTurn(sit, sign);                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_ASKBUYSAFECOIN:                {                    GameObject obj = m_PopupUIObj.transform.FindChild("Insurance").gameObject;                    obj.SetActive(true);                    Image img = obj.transform.FindChild("OutlineCountdown").GetComponent<Image>();                    m_CCIMgr.AddTimeImage(img, m_RoomInfo.m_fStateTime, m_RoomInfo.m_fCountTime/ m_RoomInfo.m_fStateTime, OnBuySafeCallback, null, true);                    m_RoomInfo.m_DealerAnimCtrl.BuySafe = true;                    //剩3秒的时候提示                    m_RoomInfo.m_DealerAnimCtrl.BuySafeTimeUpWarn(m_RoomInfo.m_fCountTime - 3.0f);                }                break;            case GameCity.EMSG_ENUM.CCMsg_BLACKJACK_SM_AGREEBUYSAFE:                {                    uint userid = _ms.ReadUInt();                    byte sit = _ms.ReadByte();                    long safeCoin = _ms.ReadLong();                    long totalCoin = _ms.ReadLong();                    Black_Player player = m_RoomInfo.m_PlayerList[sit];                    player.OnBuySafe(safeCoin, totalCoin);                }                break;            default:                break;        }        return true;    }    bool OnBuySafeCallback(byte res, bool clicked, Image img, string userdata)    {        if (clicked)            CustomAudioDataManager.GetInstance().PlayAudio(1002);        GameObject obj = m_PopupUIObj.transform.FindChild("Insurance").gameObject;        obj.SetActive(false);        UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_ANSWERBUYSAFE);        msg.Add(GameMain.hall_.GetPlayerId());        msg.Add(res);        HallMain.SendMsgToRoomSer(msg);        return true;    }    public override void ResetGameUI()    {        base.ResetGameUI();        PlayerData pd = GameMain.hall_.GetPlayerData();        string coinStr = pd.GetCoin().ToString();        Transform tfm = m_LobbyUIObj.transform.FindChild("Bottom").FindChild("Image_coinframe");        tfm.GetComponentInChildren<Text>().text = coinStr;        tfm = m_LocalPlayerInfoUI.transform;        tfm.FindChild("Image_coinframe").GetComponentInChildren<Text>().text = coinStr;        tfm = tfm.FindChild("Head").FindChild("HeadOutline").FindChild("OutlineCountdown");        tfm.gameObject.SetActive(false);        m_CCIMgr.RemoveTimeImage(tfm.GetComponent<Image>());        tfm = m_StandUIObj.transform.FindChild("PlayerInfo");        tfm = tfm.FindChild("Image_coinframe");        tfm.GetComponentInChildren<Text>().text = coinStr;    }    public override void RefreshGamePlayerCoin(uint AddMoney)    {        base.RefreshGamePlayerCoin(AddMoney);        Transform tfm;        long coin;        Text text;        if (m_LobbyUIObj.activeSelf)        {            tfm = m_LobbyUIObj.transform.FindChild("Bottom/Image_coinframe");            text = tfm.GetComponentInChildren<Text>();            long.TryParse(text.text, out coin);            coin += AddMoney;            text.text = coin.ToString();        }        else        {            tfm = m_LocalPlayerInfoUI.transform;            text = tfm.FindChild("Image_coinframe").GetComponentInChildren<Text>();            long.TryParse(text.text, out coin);            coin += AddMoney;            text.text = coin.ToString();            tfm = m_StandUIObj.transform.FindChild("PlayerInfo/Image_coinframe");            tfm.GetComponentInChildren<Text>().text = coin.ToString();        }    }    void LoadResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_BlackJack);        if (gamedata == null)            return;        m_AssetBundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (m_AssetBundle == null)            return;        UnityEngine.Object obj = (GameObject)m_AssetBundle.LoadAsset("Blackjack_Lobby");        m_LobbyUIObj = (GameObject)GameMain.instantiate(obj);        //lobby ui animation        Transform tfm = m_LobbyUIObj.transform.FindChild("Middle").FindChild("Middle_Button");        obj = (GameObject)m_AssetBundle.LoadAsset("Anime_Icon_xinshou");        GameObject gameObj = (GameObject)GameMain.instantiate(obj);        gameObj.transform.SetParent(tfm.FindChild("Button_1Xinshou"), false);        XPointEvent.AutoAddListener(gameObj.transform.parent.gameObject, OnClickLevelBtn, new object[] { gameObj, (byte)1});        obj = (GameObject)m_AssetBundle.LoadAsset("Anime_Icon_gaoshou");        gameObj = (GameObject)GameMain.instantiate(obj);        gameObj.transform.SetParent(tfm.FindChild("Button_2Gaoshou"), false);        XPointEvent.AutoAddListener(gameObj.transform.parent.gameObject, OnClickLevelBtn, new object[] { gameObj, (byte)2 });        obj = (GameObject)m_AssetBundle.LoadAsset("Anime_Icon_zhuanjia");        gameObj = (GameObject)GameMain.instantiate(obj);        gameObj.transform.SetParent(tfm.FindChild("Button_3Zhuangjia"), false);        XPointEvent.AutoAddListener(gameObj.transform.parent.gameObject, OnClickLevelBtn, new object[] { gameObj, (byte)3 });        //set player info        tfm = m_LobbyUIObj.transform.FindChild("Bottom").FindChild("PlayerInfoBG");        PlayerData pd = GameMain.hall_.GetPlayerData();        tfm.FindChild("TextName").GetComponent<Text>().text = pd.GetPlayerName();        Image vipImg = tfm.FindChild("Image_Vip").FindChild("Vip_Text").FindChild("Num").gameObject.GetComponent<Image>();        Image vipTypeImg = tfm.FindChild("Image_Vip").gameObject.GetComponent<Image>();        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle != null)        {            if (pd.GetVipLevel() == 0)                vipTypeImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_hui");            else                vipTypeImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_jin");            vipImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_sz_vip_" + pd.GetVipLevel().ToString());        }        Image icon = tfm.FindChild("Image_HeadFram").FindChild("Image_Mask").FindChild("Image_Head").GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(pd.GetPlayerIconURL(), pd.GetPlayerID(), (int)pd.PlayerIconId);        tfm = tfm.parent.FindChild("Image_coinframe");        tfm.GetComponentInChildren<Text>().text = pd.GetCoin().ToString();        tfm = tfm.parent.FindChild("Image_DiamondFrame");        tfm.GetComponentInChildren<Text>().text = pd.GetDiamond().ToString();        m_GameCanvas = GameObject.Find("Canvas").GetComponent<Canvas>();        Transform root = m_GameCanvas.transform.FindChild("Root");        m_LobbyUIObj.transform.SetParent(root, false);        //set back btn        Button butn = m_LobbyUIObj.transform.FindChild("Top").FindChild("ButtonReturn").GetComponent<Button>();        butn.onClick.AddListener(OnClickReturn);        //setup main ui        obj = (GameObject)m_AssetBundle.LoadAsset("Blackjack_MainUI");        m_MainUIObj = (GameObject)GameMain.instantiate(obj);        m_MainUIObj.transform.SetParent(root, false);        gameObj = m_MainUIObj.transform.FindChild("Top/ButtonExpand").gameObject;        XPointEvent.AutoAddListener(gameObj, OnClickMenu, (byte)0);        butn = m_MainUIObj.transform.FindChild("Top/ButtonBG/UiRootBG_Button").GetComponent<Button>();        butn.onClick.AddListener(() => OnClickMenu(EventTriggerType.PointerUp, (byte)0, null));        Button[] buttons = m_MainUIObj.transform.FindChild("Top/ButtonBG/ButtonGroupMask/ButtonGroup").GetComponentsInChildren<Button>();        byte i = (byte)1;        foreach (Button btn in buttons)        {            XPointEvent.AutoAddListener(btn.gameObject, OnClickMenu, i++);        }        m_LocalPlayerInfoUI = m_MainUIObj.transform.FindChild("Middle").FindChild("PlayerInfo_own").gameObject;        m_LocalPlayerInfoUI.SetActive(false);        tfm = m_LocalPlayerInfoUI.transform;        tfm.FindChild("Head").FindChild("HeadMask").FindChild("ImageHead").GetComponent<Image>().sprite            = icon.sprite;        tfm.FindChild("TextName").GetComponent<Text>().text = pd.GetPlayerName();        tfm = tfm.FindChild("Image_coinframe");        tfm.GetComponentInChildren<Text>().text = pd.GetCoin().ToString();        butn = m_MainUIObj.transform.FindChild("Middle/Button_Rule").GetComponent<Button>();        butn.onClick.AddListener(() =>        {            tfm = m_MainUIObj.transform.FindChild("Pop-up/Rule");            bool ac = tfm.gameObject.activeSelf;            tfm.gameObject.SetActive(true);            butn.enabled = false;            RectTransform rtfm = tfm.FindChild("Rule_BG/ImageMask/ImageBG") as RectTransform;            Vector3 vec = rtfm.localPosition;            vec.x = ac ? (vec.x - rtfm.rect.width) : (vec.x + rtfm.rect.width);            Tweener t = DOTween.To(() => rtfm.localPosition, r => rtfm.localPosition = r, vec, 0.5f);            t.OnComplete(() =>            {                tfm.gameObject.SetActive(!ac);                butn.enabled = true;            });        });        m_MainUIObj.transform.FindChild("Pop-up/Rule/Rule_BG/UiRootBG_Button").            GetComponent<Button>().onClick.AddListener(() =>        {            if(butn.enabled)                butn.onClick.Invoke();        });        tfm = m_MainUIObj.transform.FindChild("Bottom");        m_fGameButtonOriginY = tfm.localPosition.y;        m_PlayerUIObj = tfm.FindChild("Player").gameObject;        tfm = m_PlayerUIObj.transform.FindChild("Player_BetTime").FindChild("BetBG");        m_AddChipsBtns = tfm.GetComponentsInChildren<Button>();        i = 0;        foreach (Button child in m_AddChipsBtns)        {            XPointEvent.AutoAddListener(child.gameObject, OnClickChips, i++);        }        tfm = m_PlayerUIObj.transform.FindChild("Player_BetTime").FindChild("ButtonGroup");        m_ChipsBtns = tfm.GetComponentsInChildren<Button>();        m_ChipsBtns[0].onClick.AddListener(() =>        {            OnClickPlayerBtn(0);        });        m_ChipsBtns[1].onClick.AddListener(() =>        {            OnClickPlayerBtn(1);        });        m_AutoChipToggle = tfm.GetComponentInChildren<Toggle>();        m_AutoChipToggle.onValueChanged.AddListener(        delegate (bool check)        {            OnClickPlayerBtn(2);        });        m_ChipsCountUIObj = tfm.FindChild("Button_Bet").FindChild("Slider_BetNum").gameObject;        tfm = m_PlayerUIObj.transform.FindChild("Player_GameTime");        i = 0;        foreach (Transform child in tfm)        {            XPointEvent.AutoAddListener(child.gameObject, OnClickGameBtn, i++);        }        m_GameBtns = tfm.GetComponentsInChildren<Button>();        m_SitUIObj = m_MainUIObj.transform.FindChild("Middle").FindChild("Sit").gameObject;        m_SitUIObj.SetActive(true);        for(i = (byte)0; i < m_SitUIObj.transform.childCount; i++)        {            XPointEvent.AutoAddListener(m_SitUIObj.transform.GetChild(i).gameObject, OnClickSit, i);        }        m_StandUIObj = m_MainUIObj.transform.FindChild("Bottom").FindChild("Delaer_Stand").gameObject;        m_ReqDealerBtn = m_StandUIObj.transform.parent.FindChild("Button_ZuoZhuang").GetComponent<Button>();        XPointEvent.AutoAddListener(m_ReqDealerBtn.gameObject, OnClickReqDealer, null);        Button button = m_StandUIObj.transform.parent.FindChild("Button_DelaerList").GetComponent<Button>();        button.onClick.AddListener(OnClickDealerList);        tfm = m_StandUIObj.transform.FindChild("PlayerInfo");        tfm.FindChild("Head").FindChild("HeadMask").FindChild("ImageHead").GetComponent<Image>().sprite             = icon.sprite;        tfm.FindChild("TextName").GetComponent<Text>().text = pd.GetPlayerName();        tfm = tfm.FindChild("Image_coinframe");        tfm.GetComponentInChildren<Text>().text = pd.GetCoin().ToString();        m_PopupUIObj = m_MainUIObj.transform.FindChild("Pop-up").gameObject;        Slider music = m_PopupUIObj.transform.FindChild("Set/ImageBG/Slider_Music").gameObject.GetComponent<Slider>();        Slider sound = m_PopupUIObj.transform.FindChild("Set/ImageBG/Slider_Sound").gameObject.GetComponent<Slider>();        music.value = AudioManager.Instance.MusicVolume;        sound.value = AudioManager.Instance.SoundVolume;        music.onValueChanged.AddListener(delegate (float value) { AudioManager.Instance.MusicVolume = value; });        sound.onValueChanged.AddListener(delegate (float value) { AudioManager.Instance.SoundVolume = value; });        m_MainUIObj.SetActive(false);    }    void InitCamera()    {        m_Cameras = GameObject.Find("Camera").GetComponentsInChildren<Camera>();         Debug.Assert(m_Cameras.Length == (int)CameraType.Cam_Num);        foreach (Camera cam in m_Cameras)        {            if (Camera.main == cam)                CurCam = cam;            else                cam.enabled = false;        }        UICam = m_Cameras[(int)CameraType.Cam_UI];        UICam.enabled = true;    }    void ChangeCamera(CameraType type)    {        CurCam.enabled = false;        CurCam = m_Cameras[(int)type];        CurCam.enabled = true;    }    void OnClickReturn()    {        CustomAudioDataManager.GetInstance().PlayAudio(1002);        if (m_LobbyUIObj.activeSelf)            GameMain.hall_.SwitchToHallScene();        else        {            //TryToLeaveRoom            UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_APPLYLEAVEROOM);            msg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(msg);        }    }    void BackToChooseLevel()    {        GameOver();        m_RoomInfo.m_nRoomLevel = RoomInfo.NoSit;        m_LobbyUIObj.SetActive(true);        m_MainUIObj.SetActive(false);    }    void RequestChooseLevel(byte index, uint roomId  = 0)    {        if (m_RoomInfo.m_nRoomLevel != RoomInfo.NoSit)            return;        UMessage chooseLevelMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_CHOOSElEVEL);        chooseLevelMsg.Add(GameMain.hall_.GetPlayerId());        chooseLevelMsg.Add(index);        chooseLevelMsg.Add(roomId);        HallMain.SendMsgToRoomSer(chooseLevelMsg);        m_RoomInfo.m_nRoomLevel = 255;    }    void OnClickLevelBtn(EventTriggerType eventtype, object message, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            object[] obj = (object[])message;            RequestChooseLevel((byte)obj[1]);        }        if (eventtype == EventTriggerType.PointerDown)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            object[] obj = (object[])message;            DragonBones.UnityArmatureComponent animate = ((GameObject)obj[0]).GetComponentInChildren<DragonBones.UnityArmatureComponent>();            animate.animation.Play("newAnimation");        }    }    void OnClickMenu(EventTriggerType eventtype, object message, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            CustomAudioDataManager.GetInstance().PlayAudio(1002);            byte btn = (byte)message;            Button butn = m_MainUIObj.transform.FindChild("Top/ButtonExpand").GetComponent<Button>();            if(butn.enabled)            {                butn.enabled = false;                Transform tfm = m_MainUIObj.transform.FindChild("Top/ButtonBG");                bool bActive = tfm.gameObject.activeSelf;                tfm.gameObject.SetActive(true);                Transform tfm2 = tfm.FindChild("ButtonGroupMask/ButtonGroup");                Vector3 vec = tfm2.localPosition;                vec.y *= -1.0f;                Tweener t = DOTween.To(() => tfm2.localPosition, r => tfm2.localPosition = r, vec, 0.5f);                t.OnComplete(() =>                {                    butn.enabled = true;                    if (bActive)                        tfm.gameObject.SetActive(false);                });            }            if (btn == 1)//设置            {                GameObject obj = m_PopupUIObj.transform.FindChild("Set").gameObject;                obj.SetActive(true);            }            else if(btn == 2)//站起            {                UMessage sitMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_APPLYSTADN);                sitMsg.Add(GameMain.hall_.GetPlayerId());                HallMain.SendMsgToRoomSer(sitMsg);            }            else if(btn == 3)//换桌            {                UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_AAPLYCHANGEROOM);                msg.Add(GameMain.hall_.GetPlayerId());                HallMain.SendMsgToRoomSer(msg);            }            else if(btn == 4)            {                OnClickReturn();            }        }    }    void OnClickReqDealer(EventTriggerType eventtype, object message, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            CustomAudioDataManager.GetInstance().PlayAudio(1002);            UMessage sitMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_APPLYBEBOSS);            sitMsg.Add(GameMain.hall_.GetPlayerId());            sitMsg.Add(m_nDealerState);            HallMain.SendMsgToRoomSer(sitMsg);        }    }    void OnClickSit(EventTriggerType eventtype, object message, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            CustomAudioDataManager.GetInstance().PlayAudio(1002);            byte index = (byte)message;            DebugLog.Log("click sit btn:" + index);            UMessage sitMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_APPLYSITDOWN);            sitMsg.Add(GameMain.hall_.GetPlayerId());            sitMsg.Add(index);            HallMain.SendMsgToRoomSer(sitMsg);        }    }    bool HandleEnterRoom(uint _msgType, UMessage _ms)    {        m_RoomInfo.m_iRoomID = _ms.ReadUInt();                              //房间的id        m_RoomInfo.m_nRoomLevel = _ms.ReadByte();        BlackRoomState_Enum RoomState = (BlackRoomState_Enum)_ms.ReadByte();//房间的状态        m_RoomInfo.m_fCountTime = _ms.ReadSingle();                         //此状态下还有多少时间        m_RoomInfo.m_fStateTime = (RoomState == BlackRoomState_Enum.BlackRoomState_ChipIn)            ? BlackJack_Data.GetInstance().m_fChipInTime : BlackJack_Data.GetInstance().m_fAskNeedTime;        byte sit = _ms.ReadByte();                    //当前询问到哪个人了        byte sign = _ms.ReadByte();                   //当前询问到哪堆牌了        if (RoomState == BlackRoomState_Enum.BlackRoomState_BossDeal)            sit = RoomInfo.PlayerNum;        m_RoomInfo.m_Dealer.m_nUserId = _ms.ReadUInt();                //庄家的ID  如果是0 下面name也别读        byte nPoint = 0, nOtherPoint = 0;        if (m_RoomInfo.m_Dealer.m_nUserId > 0)        {            m_RoomInfo.m_Dealer.m_nFaceId = _ms.ReadUInt();             //头像            m_RoomInfo.m_Dealer.m_nUrl = _ms.ReadString();            m_RoomInfo.m_Dealer.m_nTotalCoin = _ms.ReadLong();         //庄家有多少钱            m_RoomInfo.m_Dealer.m_cRoleName = _ms.ReadString();        //庄家的名字            m_RoomInfo.m_Dealer.m_nOpenPoke = _ms.ReadByte();            m_RoomInfo.m_Dealer.m_vecBlackPoker[0].Clear();            byte num = _ms.ReadByte();            if(num > 0)            {                nPoint = _ms.ReadByte();                nOtherPoint = _ms.ReadByte();            }            for (int i = 0; i < num; i++)            {                m_RoomInfo.m_Dealer.m_vecBlackPoker[0].Add(_ms.ReadByte());                //Debug.Log(string.Format("enter room dealer card:{0:X}", m_RoomInfo.m_Dealer.m_vecBlackPoker[0][i]));            }            if (RoomState == BlackRoomState_Enum.BlackRoomState_BossDeal)                m_RoomInfo.m_Dealer.Update2ndPoker(true, nPoint, nOtherPoint);        }        byte id;        byte roleNum = _ms.ReadByte();                                      //当前有几个座位有人        for (byte i = 0; i < roleNum; i++)        {            id = _ms.ReadByte();                                            //座位号 0 1 2 3 4            m_RoomInfo.m_PlayerList[id].m_nUserId = _ms.ReadUInt();         //座位上useid            m_RoomInfo.m_PlayerList[id].m_nFaceId = _ms.ReadUInt();          //此人的头像            m_RoomInfo.m_PlayerList[id].m_nUrl = _ms.ReadString();            m_RoomInfo.m_PlayerList[id].m_nTotalCoin = _ms.ReadLong();      //此人有多少钱            m_RoomInfo.m_PlayerList[id].m_cRoleName = _ms.ReadString();     //此人的名字            m_RoomInfo.m_PlayerList[id].m_nSafeChipInCoin = _ms.ReadLong(); //购买保险的金额            byte num = 0;            for(int j = 0; j < 2; j++)            {                m_RoomInfo.m_PlayerList[id].m_nChipInCoin[j] = _ms.ReadLong();   //分牌的 下注金额                num = _ms.ReadByte();                if (num > 0)                {                    m_RoomInfo.m_PlayerList[id].m_nDouble[j] = _ms.ReadByte();       //是否加倍过                    nPoint = _ms.ReadByte();                    nOtherPoint = _ms.ReadByte();                    m_RoomInfo.m_PlayerList[id].m_vecBlackPoker[j].Clear();                    for (int k = 0; k < num; k++)                    {                        m_RoomInfo.m_PlayerList[id].m_vecBlackPoker[j].Add(_ms.ReadByte());                        //Debug.LogWarning(string.Format("enter room player:{0} pos:{1} card:{1:X}", id, j, m_RoomInfo.m_PlayerList[id].m_vecBlackPoker[j][k]));                    }                    m_RoomInfo.m_PlayerList[id].SetPointCount(nPoint, nOtherPoint, (byte)(j > 0 ? 2 : 0));                }            }            if (sit <= RoomInfo.PlayerNum && id <= sit)            {                if ( m_RoomInfo.m_PlayerList[id].m_vecBlackPoker[1].Count > 0)                {                    m_RoomInfo.m_PlayerList[id].ShowCurrentCountTip(1);                    if(id < sit || sign > 1)                        m_RoomInfo.m_PlayerList[id].ShowCurrentCountTip(2);                }                else                    m_RoomInfo.m_PlayerList[id].ShowCurrentCountTip(0);            }        }        OnEnterRoom(RoomState);        OnChangeTurn(sit, sign);        return true;    }    void OnEnterRoom(BlackRoomState_Enum RoomState)    {        m_LobbyUIObj.SetActive(false);        m_MainUIObj.SetActive(true);        RoomData rd = BlackJack_Data.GetInstance().m_RoomData[m_RoomInfo.m_nRoomLevel - 1];        Slider slider = m_ChipsCountUIObj.GetComponentInChildren<Slider>();        slider.maxValue = 10.0f;        slider.onValueChanged.AddListener(delegate (float call) { OnChangeChips(call * rd.m_nChipInMax * 0.1f); });        BetData bd = BlackJack_Data.GetInstance().m_BetData[m_RoomInfo.m_nRoomLevel - 1];        for(int i = 0; i < m_AddChipsBtns.Length; i++)        {            m_AddChipsBtns[i].transform.GetComponentInChildren<Text>().text = GameFunction.FormatCoinText(bd.m_nGrades[i]);        }        m_RoomInfo.m_Dealer.OnEnterRoom(false);        foreach(Black_Player player in m_RoomInfo.m_PlayerList)        {            player.OnEnterRoom(false);        }        OnStateChange(RoomState, null);    }    bool HandleApplySit(uint _msgType, UMessage _ms)    {        byte result = _ms.ReadByte();        if(result == 0)//success        {            uint userid = _ms.ReadUInt();            byte sit = _ms.ReadByte();            m_RoomInfo.m_PlayerList[sit].Init();            m_RoomInfo.m_PlayerList[sit].m_nUserId = userid;            m_RoomInfo.m_PlayerList[sit].m_nFaceId = _ms.ReadUInt();            m_RoomInfo.m_PlayerList[sit].m_nUrl = _ms.ReadString();            m_RoomInfo.m_PlayerList[sit].m_nTotalCoin = _ms.ReadLong();            m_RoomInfo.m_PlayerList[sit].m_cRoleName = _ms.ReadString();            bool bLocal = (userid == GameMain.hall_.GetPlayerId());            m_RoomInfo.m_PlayerList[sit].OnEnterRoom(bLocal);            if(bLocal)            {                OnGameLocalPlayerSit(true, sit);            }        }        return true;    }    void OnGameLocalPlayerSit(bool bSitOrStand,  byte sit= RoomInfo.NoSit)    {        DebugLog.Log("OnLocalPlayerSit:" + bSitOrStand + " sit:" + sit);        m_LocalPlayerInfoUI.SetActive(bSitOrStand);        m_SitUIObj.SetActive(!bSitOrStand);        m_PlayerUIObj.SetActive(bSitOrStand);        m_StandUIObj.SetActive(!bSitOrStand);        ChangeCamera(bSitOrStand ? (sit < RoomInfo.PlayerNum ? (CameraType.Cam_Player1 + sit) : CameraType.Cam_Dealer) : CameraType.Cam_Main);        bool showInvite = bSitOrStand && (m_RoomInfo.m_eRoomState <= BlackRoomState_Enum.BlackRoomState_ChipIn            || m_RoomInfo.m_eRoomState > BlackRoomState_Enum.BlackRoomState_BossDeal);        for(byte i = 0; i < RoomInfo.PlayerNum; i++)        {            m_RoomInfo.m_PlayerList[i].OnLocalPlayerSit(showInvite, sit, m_RoomInfo.m_eRoomState == BlackRoomState_Enum.BlackRoomState_ChipIn);            m_RoomInfo.m_PlayerList[i].OnCameraChanged(sit == RoomInfo.PlayerNum ? m_MainUIObj.transform.FindChild("Middle/Playerhead_Delaerview/headpoint_" + (i+1)) : null);        }        m_nPrepareChips = 0;        m_nLocalPlayerSit = sit;        OnResetAutoChip();        UpdatePlayerUI();    }    void OnRequestChip()    {        if(m_nPrepareChips > 0)        {            m_ChipsCountUIObj.SetActive(false);            UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_CHIPIN);            msg.Add(GameMain.hall_.GetPlayerId());            msg.Add(m_nPrepareChips);            HallMain.SendMsgToRoomSer(msg);            m_bChiped = true;            UpdatePlayerUI();        }    }    public void OnGameLocalPlayerChiped(long totalCoin)    {        if(!m_bChiped)        {            m_bChiped = true;            m_nPrepareChips *= -1;            UpdatePlayerUI();        }        GameMain.hall_.GetPlayerData().SetCoin(totalCoin);        ResetGameUI();    }    public void UpdatePlayerUI(Black_Player player = null, bool bFirst = false)    {        bool localEnd = (m_RoomInfo.m_eRoomState == BlackRoomState_Enum.BlackRoomState_End && m_bChiped);        bool localNoIn = m_nLocalPlayerSit < RoomInfo.PlayerNum && !m_bChiped && m_RoomInfo.m_eRoomState != BlackRoomState_Enum.BlackRoomState_ChipIn;        GameObject tipObj = m_PopupUIObj.transform.FindChild("Tips_wating").gameObject;        bool bTipActive = tipObj.activeSelf;        tipObj.SetActive(localEnd || localNoIn);        if(bTipActive && !tipObj.activeSelf)        {            Text text = tipObj.transform.GetComponentInChildren<Text>();            text.text = CCsvDataManager.Instance.TipsDataMgr.GetTipsText(2209);        }        else if(tipObj.activeSelf && m_RoomInfo.m_eRoomState == BlackRoomState_Enum.BlackRoomState_WaitBoss)        {            Text text = tipObj.transform.GetComponentInChildren<Text>();            text.text = CCsvDataManager.Instance.TipsDataMgr.GetTipsText(2213);        }        if (!m_PlayerUIObj.activeSelf)            return;        bool bInChip = m_eFocus != FocusType.eFT_Lost && m_nLocalPlayerSit < RoomInfo.PlayerNum && m_RoomInfo.m_eRoomState == BlackRoomState_Enum.BlackRoomState_ChipIn;        m_PlayerUIObj.transform.FindChild("Player_BetTime").gameObject.SetActive(bInChip);        if(bInChip)        {            m_AutoChipToggle.interactable = bInChip && (m_nPrepareChips != 0);            bInChip = bInChip && !m_bChiped;            foreach (Button btn in m_AddChipsBtns)            {                btn.interactable = bInChip;            }            m_ChipsBtns[0].interactable = bInChip && (m_nPrepareChips != 0);            m_ChipsBtns[1].interactable = bInChip;        }        bool bInGame = m_nLocalPlayerSit < RoomInfo.PlayerNum && m_RoomInfo.m_eRoomState != BlackRoomState_Enum.BlackRoomState_ChipIn;        m_PlayerUIObj.transform.FindChild("Player_GameTime").gameObject.SetActive(bInGame);        if(bInGame)        {            if (player != null && m_bChiped && m_eFocus != FocusType.eFT_Lost)            {                byte index = m_RoomInfo.m_iCurPokerPos;                m_GameBtns[0].interactable = player.m_bCanSplit && (index == 0);                if (index > 0)                    index--;                m_GameBtns[1].interactable = (player.m_nDouble[index] == 0 && bFirst);                m_GameBtns[2].interactable = m_GameBtns[1].interactable;                m_GameBtns[3].interactable = true;                m_GameBtns[4].interactable = true;            }            else            {                foreach (Button btn in m_GameBtns)                {                    btn.interactable = false;                }            }        }    }    void ChangeGameButton()    {        if (m_bGameButtonChanging || m_eFocus == FocusType.eFT_Lost)            return;        m_ChipsCountUIObj.SetActive(false);        m_bGameButtonChanging = true;        RectTransform tfm = m_MainUIObj.transform.FindChild("Bottom") as RectTransform;        Vector3 vec = tfm.localPosition;        vec.y = m_fGameButtonOriginY - tfm.rect.height;        Tweener t = DOTween.To(() => tfm.localPosition, r => tfm.localPosition = r, vec, 0.5f);        t.OnComplete(() =>        {            UpdatePlayerUI();            vec.y = m_fGameButtonOriginY;            t = DOTween.To(() => tfm.localPosition, r => tfm.localPosition = r, vec, 0.5f);            t.OnComplete(() => m_bGameButtonChanging = false);        });    }    void OnStateChange(BlackRoomState_Enum state, UMessage _ms)    {        m_RoomInfo.OnStateChange(state);        if (state == BlackRoomState_Enum.BlackRoomState_BossDeal)        {            OnChangeTurn(RoomInfo.PlayerNum, 0);            return;        }        if (state == BlackRoomState_Enum.BlackRoomState_End)        {            if (_ms != null)            {                uint userId = _ms.ReadUInt();                long oldCoin = m_RoomInfo.m_Dealer.m_nTotalCoin;                m_RoomInfo.m_Dealer.m_nTotalCoin = _ms.ReadLong();                m_RoomInfo.m_Dealer.OnResult(m_RoomInfo.m_Dealer.m_nTotalCoin - oldCoin);                byte num = _ms.ReadByte();                byte sit;                long coin, addCoin;                for (int i = 0; i < num; i++)                {                    sit = _ms.ReadByte();                    userId = _ms.ReadUInt();                    coin = _ms.ReadLong();                    addCoin = _ms.ReadLong();                    m_RoomInfo.m_PlayerList[sit].OnResult(coin, addCoin);                }            }            if (!m_bChiped)                OnEnd();        }        if (m_nLocalPlayerSit <= RoomInfo.PlayerNum)//sit        {            if (state == BlackRoomState_Enum.BlackRoomState_ChipIn)            {                if (m_AutoChipToggle.isOn)                    OnClickPlayerBtn(0);                GameObject gameObj = m_PlayerUIObj.transform.FindChild("Player_GameTime").gameObject;                if (gameObj.activeSelf)                {                    ChangeGameButton();                    return;                }            }            else if (state == BlackRoomState_Enum.BlackRoomState_DealCards                 || state == BlackRoomState_Enum.BlackRoomState_End                || state == BlackRoomState_Enum.BlackRoomState_GameOver)            {                GameObject gameObj = m_PlayerUIObj.transform.FindChild("Player_BetTime").gameObject;                if (gameObj.activeSelf)                {                    ChangeGameButton();                    return;                }            }            UpdatePlayerUI();        }    }    public void OnGameLocalPlayerResult(long coin, long addCoin)    {        // GameMain.hall_.GetPlayerData().SetCoin (coin);        GameObject tipObj = m_PopupUIObj.transform.FindChild("Tips_wating").gameObject;        Text text = tipObj.transform.GetComponentInChildren<Text>();        if (addCoin == 0)//平局        {            text.text = CCsvDataManager.Instance.TipsDataMgr.GetTipsText(2216);        }        else if (addCoin > 0)//胜利        {            text.text = CCsvDataManager.Instance.TipsDataMgr.GetTipsText(2210, GameFunction.FormatCoinText(addCoin));            CustomAudioDataManager.GetInstance().PlayAudio(1008);        }        else        {            text.text = CCsvDataManager.Instance.TipsDataMgr.GetTipsText(2211);        }        if (addCoin != 0)        {            Transform tfm = m_LocalPlayerInfoUI.transform.FindChild("Text_Result");            ResultAnim(addCoin, tfm, 5f);            ResetGameUI();        }    }    void GameOver()    {        OnReqDealerStateChange(1);//变成申请上庄        OnGameLocalPlayerSit(false);                OnEnd();        m_RoomInfo.m_Dealer.Init();        foreach (Black_Player player in m_RoomInfo.m_PlayerList)            player.Init();        m_RoomInfo.m_DealerAnimCtrl.Init();        ResetGameUI();    }    public void OnEnd()    {        if(!m_bChiped)        {            OnResetAutoChip();            OnChangeChips(0);        }        else        {            m_bChiped = false;            if (GameMain.hall_.isGetRelief)                GameMain.hall_.ShowRelief();            ResetGameUI();        }        m_ChipsCountUIObj.SetActive(false);        m_bGameButtonChanging = false;    }    bool HandlePokerToPlayer(uint _msgType, UMessage _ms)    {        byte num = _ms.ReadByte();        short nSit;        Black_Role role;        byte sit = RoomInfo.NoSit;        byte nPokerNum, nPokerPos = 0, nPoker, nPoint = 0,nOtherPoint;        List<PokerData>[] list = new List<PokerData>[2];        list[0] = new List<PokerData>();        list[1] = new List<PokerData>();        PokerData data;        for (int i = 0; i < num; i++)        {            nSit = _ms.ReadShort();            if (nSit < 0)            {                role = m_RoomInfo.m_Dealer;                sit = RoomInfo.PlayerNum;            }            else            {                role = m_RoomInfo.m_PlayerList[nSit];                sit = (byte)nSit;            }            role.m_nUserId = _ms.ReadUInt();            nPokerPos = _ms.ReadByte();            nPoint = _ms.ReadByte();            nOtherPoint = _ms.ReadByte();            role.SetPointCount(nPoint, nOtherPoint, nPokerPos);            nPokerNum = _ms.ReadByte();            for (int j = 0; j < nPokerNum; j++)            {                nPoker = _ms.ReadByte();                data = new PokerData();                data.Sit = sit;                data.Pos = nPokerPos;                data.Card = nPoker;                data.Points = nPoint;                data.OtherPoints = nOtherPoint;                list[j].Add(data);                //Debug.Log(string.Format("deal msg sit:{0} card:{1:X}", sit, nPoker));            }            role.SetSplit(_ms.ReadByte());            DebugLog.LogWarning(string.Format("Poker Msg: sit:{0} pokerNum:{1} nPoint:{2} pos:{3}", sit, nPokerNum, nPoint, nPokerPos));        }        list[0].AddRange(list[1]);        m_RoomInfo.m_DealerAnimCtrl.CardsToPlayer(list[0]);        return true;    }    bool HandleAnswerDoubleOrNeed(uint _msgType, UMessage _ms)    {        byte result = _ms.ReadByte();        uint userid = _ms.ReadUInt();        byte state = _ms.ReadByte();        byte index = _ms.ReadByte();        byte sit = _ms.ReadByte();        Black_Player player = m_RoomInfo.m_PlayerList[sit];        if (result == 0)//success        {            if (index > 0)                index--;            player.m_nChipInCoin[index] = _ms.ReadLong();            player.m_nTotalCoin = _ms.ReadLong();        }        player.OnAnswer(result, state, index);        return true;    }    bool HandleBuySafeResult(uint _msgType, UMessage _ms)    {        uint userid = _ms.ReadUInt();        m_RoomInfo.m_Dealer.m_nTotalCoin = _ms.ReadLong();        byte num = _ms.ReadByte();        m_RoomInfo.m_DealerAnimCtrl.BuySafeResult(num > 0);        Black_Player player;        byte sit;        for(int i = 0; i < num; i++)        {            sit = _ms.ReadByte();            userid = _ms.ReadUInt();            player = m_RoomInfo.m_PlayerList[sit];            player.m_nSafeChipInCoin = _ms.ReadLong();            player.m_nTotalCoin = _ms.ReadLong();        }        return true;    }    public void OnBuySafeEnd()    {        m_RoomInfo.m_Dealer.UpdateInfoUI();        for (int i = 0; i < RoomInfo.PlayerNum; i++)        {            m_RoomInfo.m_PlayerList[i].OnBuySafeEnd();        }        if(m_bChiped)            ResetGameUI();    }    void OnReqDealerStateChange(byte state)    {        m_nDealerState = state;        string img = "Bj_ZuoZhuan_" + m_nDealerState;        m_ReqDealerBtn.image.sprite = m_AssetBundle.LoadAsset<Sprite>(img);    }    void OnClickChips(EventTriggerType eventtype, object message, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            CustomAudioDataManager.GetInstance().PlayAudio(1002);            byte index = (byte)message;            if (!m_AddChipsBtns[index].interactable)                return;            OnResetAutoChip();            DebugLog.Log("click add chips index:" + index);            BetData bd = BlackJack_Data.GetInstance().m_BetData[m_RoomInfo.m_nRoomLevel - 1];            //OnChangeChips(m_nPrepareChips + bd.m_nGrades[index]);            m_nPrepareChips = bd.m_nGrades[index];            OnRequestChip();        }    }    void OnResetAutoChip()    {        m_nPrepareChips = 0;        m_AutoChipToggle.isOn = false;        m_ChipsBtns[0].interactable = false;        m_AutoChipToggle.interactable = false;        Slider slider = m_ChipsCountUIObj.GetComponentInChildren<Slider>();        slider.value = 0.0f;        m_ChipsCountUIObj.SetActive(false);    }    void OnClickPlayerBtn(byte index)    {        DebugLog.Log("click player btn:" + index);        CustomAudioDataManager.GetInstance().PlayAudio(1002);        switch (index)        {            case 0://续押                {                    if(!m_bChiped && m_nPrepareChips < 0)                    {                        m_nPrepareChips *= -1;                        OnRequestChip();                    }                }                break;            case 1://下注                {                    if(!m_ChipsCountUIObj.activeSelf)                    {                        OnResetAutoChip();                        OnChangeChips(m_nPrepareChips);                    }                    else                    {                        OnRequestChip();                    }                }                break;            case 2://手动自动                {                    //if (m_AutoChipToggle.isOn)                    //    OnClickPlayerBtn(0);                }                break;            default:                break;        }    }    void OnClickGameBtn(EventTriggerType eventtype, object message, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            byte index = (byte)message;            if (!m_GameBtns[index].interactable)                return;            DebugLog.Log("click game btn:" + index);            CustomAudioDataManager.GetInstance().PlayAudio(1002);            byte nState = 0;            switch (index)            {                case 0://分牌                    nState = 4;                    break;                case 1://加倍                    nState = 2;                    break;                case 2://投降                    nState = 5;                    break;                case 3://停叫                    nState = 1;                    break;                case 4://要牌                    nState = 3;                    break;                default:                    break;            }            if(nState > 0)            {                UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_ANSWERDOUBLEORNEED);                msg.Add(GameMain.hall_.GetPlayerId());                msg.Add(nState);                msg.Add(m_RoomInfo.m_iCurPokerPos);                HallMain.SendMsgToRoomSer(msg);                UpdatePlayerUI();            }        }    }    void OnChangeChips(float chips)    {        m_nPrepareChips = (int)chips;        m_ChipsCountUIObj.SetActive(true);        m_ChipsCountUIObj.GetComponentInChildren<Text>().text = GameFunction.FormatCoinText(m_nPrepareChips);    }    void OnClickDealerList()    {        CustomAudioDataManager.GetInstance().PlayAudio(1002);        GameObject obj = m_PopupUIObj.transform.FindChild("DealerList").gameObject;        if (obj.activeSelf)            obj.SetActive(false);        else        {            UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BLACKJACK_CM_APPLYBOSSLIST);            msg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(msg);        }    }    bool HandleDealerList(uint _msgType, UMessage _ms)    {        GameObject obj = m_PopupUIObj.transform.FindChild("DealerList").gameObject;        obj.SetActive(true);        Transform listTfm = obj.transform.FindChild("Image_BG").FindChild("Viewport_DealerList").FindChild("Content_DealerList");        foreach(Transform t in listTfm)        {            GameObject.Destroy(t.gameObject);        }        int num = _ms.ReadInt();        UnityEngine.Object obj0 = (GameObject)m_AssetBundle.LoadAsset("DealerInfo");        GameObject gameObj;        for(int i = 0; i < num; i++)        {            uint playerid = _ms.ReadUInt();            gameObj = (GameObject)GameMain.instantiate(obj0);            uint faceid = _ms.ReadUInt();            string url = _ms.ReadString();            gameObj.transform.FindChild("touxiangkuang").GetComponentInChildren<Image>().sprite = GameMain.hall_.GetIcon(url, playerid, (int)faceid);            gameObj.transform.FindChild("jinbi").GetComponentInChildren<Text>().text = _ms.ReadLong().ToString();            gameObj.transform.FindChild("touxiangkuang").GetComponentInChildren<Text>().text = _ms.ReadString();            gameObj.transform.SetParent(listTfm, false);        }        return true;    }    void CheckInvite()    {        if (GameMain.hall_.invate_ != null)        {            RequestChooseLevel((byte)GameMain.hall_.invate_.level, GameMain.hall_.invate_.roomid);            GameMain.hall_.invate_ = null;        }    }    public void OnGameLocalTurn(bool bIn, float fill, bool updateUi)    {        Transform tfm = m_LocalPlayerInfoUI.transform.FindChild("Head").FindChild("HeadOutline").FindChild("OutlineCountdown");        if (bIn)        {            tfm.gameObject.SetActive(true);            if(fill > 0.0f)                m_CCIMgr.AddTimeImage(tfm.GetComponent<Image>(), m_RoomInfo.m_fStateTime, fill, null);        }        else        {            tfm.gameObject.SetActive(false);            if(updateUi)                UpdatePlayerUI();        }    }    void OnChangeTurn(byte sit, byte sign)    {        if (sit > RoomInfo.PlayerNum)            return;        byte oldSit = m_RoomInfo.m_iTurnAskDoubleSign;        DebugLog.Log("ChangeTurn sit:" + oldSit + "->" + sit + " pos:" + m_RoomInfo.m_iCurPokerPos + "->" + sign);        if (sit == RoomInfo.PlayerNum)        {            if (oldSit < RoomInfo.PlayerNum)                m_RoomInfo.m_PlayerList[oldSit].OnQuitTurn();            m_RoomInfo.m_DealerAnimCtrl.StopAsk();            m_RoomInfo.m_iTurnAskDoubleSign = RoomInfo.PlayerNum;            m_RoomInfo.m_Dealer.OnTurn();        }        else        {            byte oldPos = m_RoomInfo.m_iCurPokerPos;            m_RoomInfo.m_iCurPokerPos = sign;            m_RoomInfo.m_iTurnAskDoubleSign = sit;            //m_RoomInfo.m_PlayerList[sit].OnTurn(1.0f, oldSit != sit || oldPos != sign);            bool bFirst = oldSit != sit || oldPos != sign;            if (oldSit < RoomInfo.PlayerNum && bFirst)                m_RoomInfo.m_PlayerList[oldSit].OnQuitTurn();            m_RoomInfo.m_DealerAnimCtrl.AskPlayer(sit,sign, bFirst);        }    }    public void ResultAnim(long addCoin, Transform tfm, float showTime)    {        Color WSColor = new Color(1f, 0.8627f, 0.3216f);        Color WEColor = new Color(0.9686f, 0.4667f, 0.1294f);        Color LSColor = new Color(0.7176f, 0.9569f, 0.96478f);        Color LEColor = new Color(0.1294f, 0.643f, 0.9686f);        Gradient grad = tfm.GetComponent<Gradient>();        if (addCoin > 0)        {            grad.StartColor = WSColor;            grad.EndColor = WEColor;        }        else        {            grad.StartColor = LSColor;            grad.EndColor = LEColor;        }        tfm.GetComponent<Text>().text = GameFunction.FormatCoinText(addCoin, true);        tfm.gameObject.SetActive(true);        Vector3 vec = tfm.localPosition;        float y = vec.y;        vec.y += 20f;        tfm.localPosition = vec;        showTime *= 0.5f;        Tweener t = tfm.DOLocalMoveY(y, showTime);        t.OnComplete(() =>        {            t = tfm.DOLocalMoveY(y, showTime);            t.OnComplete(() =>            {                tfm.gameObject.SetActive(false);            });        });    }    public override void OnApplicationFocus(bool focus)    {        if (!focus)            m_eFocus = FocusType.eFT_Lost;        else            m_eFocus = FocusType.eFT_WaitForGet;        if(m_bGameButtonChanging)        {            RectTransform tfm = m_MainUIObj.transform.FindChild("Bottom") as RectTransform;            Vector3 vec = tfm.localPosition;            vec.y = m_fGameButtonOriginY;            tfm.localPosition = vec;            UpdatePlayerUI();            m_bGameButtonChanging = false;        }        m_RoomInfo.m_DealerAnimCtrl.OnFocusChange();    }    public override void OnDisconnect(bool over)    {        if (over)            GameOver();        else            OnEnd();    }}