using System;using System.Collections.Generic;using System.Linq;using System.Text;using UnityEngine;using USocket.Messages;using XLua;// 房间状态[LuaCallCSharp]public enum BlackRoomState_Enum{    BlackRoomState_Init = 0,    BlackRoomState_WaitBoss,    //等待别人坐庄    BlackRoomState_ChipIn,      //下注状态    BlackRoomState_DealCards,   //发牌状态    BlackRoomState_BuySafe,     //买保险状态    BlackRoomState_AskDouble,   //每个玩家询问加倍或者要牌状态    BlackRoomState_BossDeal,    //询问完其他玩家都  进入庄家是否要牌的状态    BlackRoomState_GameOver,    BlackRoomState_End};[LuaCallCSharp]public struct PokerData{    public byte Sit;    public byte Pos;    public byte Card;    public byte Points;    public byte OtherPoints;}[Hotfix]public class RoomInfo{    public uint m_iRoomID;    public byte m_nRoomLevel;    public BlackRoomState_Enum m_eRoomState;    public float m_fCountTime;    public float m_fStateTime;    public byte m_iTurnAskDoubleSign;    public byte m_iCurPokerPos;    public Black_Dealer m_Dealer;    public Black_Player[] m_PlayerList;    public Black_DealerAnimCtrl m_DealerAnimCtrl;    public const byte PlayerNum = 3;    public const byte NoSit = 200;    CGame_BlackJack m_BjGameBase;    public RoomInfo(CGame_BlackJack bjGame, Transform uiParent)    {        Init(bjGame, uiParent);    }    public void Init(CGame_BlackJack bjGame, Transform uiParent)    {        m_BjGameBase = bjGame;        m_iRoomID = 0;        m_nRoomLevel = NoSit;        m_eRoomState = BlackRoomState_Enum.BlackRoomState_Init;        m_fCountTime = 0.0f;        m_iTurnAskDoubleSign = NoSit;        m_iCurPokerPos = 0;        m_Dealer = new Black_Dealer(bjGame, uiParent);        m_PlayerList = new Black_Player[PlayerNum];        for(byte i = 0; i < m_PlayerList.Length; i++)        {            m_PlayerList[i] = new Black_Player(i, bjGame, uiParent);        }        GameObject gameObj = GameObject.Find("Game_Model/DealerCtrl");        if(gameObj != null)        {            m_DealerAnimCtrl = gameObj.AddComponent<Black_DealerAnimCtrl>();            m_DealerAnimCtrl.m_BjGameBase = bjGame;        }    }    public void OnTick()    {        m_Dealer.OnTick();        foreach (Black_Player player in m_PlayerList)            player.OnTick();        if (m_fCountTime > 0.0f)            m_fCountTime -= Time.unscaledDeltaTime;    }    public void OnStateChange(BlackRoomState_Enum state)    {        if (m_eRoomState == state)            return;        DebugLog.Log(string.Format("room state change: ({0}->{1})", m_eRoomState, state));        //OnQuitSate        switch (m_eRoomState)        {            case BlackRoomState_Enum.BlackRoomState_ChipIn:                {                    if(m_BjGameBase.m_nLocalPlayerSit < RoomInfo.PlayerNum)                        CustomAudioDataManager.GetInstance().PlayAudio(1006);                    foreach (Black_Player player in m_PlayerList)                        player.OnLocalPlayerSit(false, m_BjGameBase.m_nLocalPlayerSit);                }                break;            default:                break;        }        m_eRoomState = state;        //OnEnterState        switch (m_eRoomState)        {            case BlackRoomState_Enum.BlackRoomState_WaitBoss:                {                    foreach (Black_Player player in m_PlayerList)                        player.OnLocalPlayerSit(true, m_BjGameBase.m_nLocalPlayerSit);                }                break;            case BlackRoomState_Enum.BlackRoomState_ChipIn:                {                    m_fCountTime = m_fStateTime = BlackJack_Data.GetInstance().m_fChipInTime;                    foreach (Black_Player player in m_PlayerList)                        player.OnLocalPlayerSit(true, m_BjGameBase.m_nLocalPlayerSit, true);                }                break;            case BlackRoomState_Enum.BlackRoomState_DealCards:                {                    m_fCountTime = m_fStateTime = BlackJack_Data.GetInstance().m_fAskNeedTime;                }                break;            case BlackRoomState_Enum.BlackRoomState_BuySafe:                {                    m_fCountTime = m_fStateTime = BlackJack_Data.GetInstance().m_fBuySafeTime;                }                break;            case BlackRoomState_Enum.BlackRoomState_End:                {                    OnEnd();                }                break;            default:                {                    m_fCountTime = 0.0f;                }                break;        }    }    public void OnEnd()    {        m_fCountTime = 0.0f;        m_iTurnAskDoubleSign = NoSit;        m_iCurPokerPos = 0;        m_DealerAnimCtrl.PlayChargeCard();    }}