using System.Collections.Generic;using UnityEngine;using USocket.Messages;using System.IO;using XLua;[LuaCallCSharp]public struct RoomData{    public int m_nMinInCoin;    public int m_nMaxInCoin;    public int m_nBossNeedMin;    public int m_nBossNum;    public int m_nChipInMax;}[LuaCallCSharp]public class BetData{    public int m_nMin;    public int m_nKickout;    public int[] m_nGrades = new int[5];}[Hotfix]public class BlackJack_Data{    BlackJack_Data()    {        ReadBetData();    }    public static BlackJack_Data GetInstance()    {        if (instance == null)            instance = new BlackJack_Data();        return instance;    }    static BlackJack_Data instance;    public float m_fBuySafeTime;    public float m_fChipInTime;    public float m_fAskNeedTime;    public List<RoomData> m_RoomData = new List<RoomData>();    public List<BetData> m_BetData = new List<BetData>();    public void ReadData(UMessage msg)    {        m_fBuySafeTime = msg.ReadSingle();        m_fChipInTime = msg.ReadSingle();        m_fAskNeedTime = msg.ReadSingle();        m_RoomData.Clear();        byte levelNum = msg.ReadByte();        for(int i = 0; i < levelNum; i++)        {            RoomData data = new RoomData();            data.m_nMinInCoin = msg.ReadInt();            data.m_nMaxInCoin = msg.ReadInt();            data.m_nBossNeedMin = msg.ReadInt();            data.m_nBossNum = msg.ReadInt();            data.m_nChipInMax = msg.ReadInt();            m_RoomData.Add(data);        }    }    void ReadBetData()    {        List<string[]> strList;        CReadCsvBase.ReaderCsvDataFromAB(GameDefine.CsvAssetbundleName, "Game21BetCsv.txt", out strList);        int columnCount = strList.Count;        int j;        for (int i = 2; i < columnCount; i++)        {            j = 0;            BetData gamedata = new BetData();            int.TryParse(strList[i][j++], out gamedata.m_nMin);            int.TryParse(strList[i][j++], out gamedata.m_nKickout);            for(int k = 0; k < gamedata.m_nGrades.Length; k++)                int.TryParse(strList[i][j++], out gamedata.m_nGrades[k]);            m_BetData.Add(gamedata);        }    }}