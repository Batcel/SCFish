using DG.Tweening;using System;using System.Collections.Generic;using System.Linq;using System.Text;using UnityEngine;using UnityEngine.UI;using XLua;[Hotfix]public class Black_Player : Black_Role{    public byte[] m_nDouble = new byte[2];    public bool m_bCanSplit;    public long[] m_nChipInCoin = new long[2];    public long m_nSafeChipInCoin;    GameObject m_SitUIObj;    Image m_TimeImg;    Transform[][] m_PokerPointArray;//[3,5]:3组牌（0：1副牌 1：分牌后第1副 2：分牌后第2副）各5张牌的位置    Transform[,] m_ChipPointArray;//[3,3]:3组牌各3个摆放筹码的位置    Transform[] m_CountPointArray;//[3]:3组牌点数提示的位置    byte m_nIndex;    byte[,] m_nPoints = new byte[2,2];    public bool Asking { get; private set; }    public Black_Player(byte index, CGame_BlackJack bjGame, Transform uiParent)        : base(bjGame, uiParent)    {        m_nIndex = index;        if (m_BjGameBase != null)        {            if (m_BjGameBase.m_SitUIObj != null)                m_SitUIObj = m_BjGameBase.m_SitUIObj.transform.GetChild(index).gameObject;            string pointName = "Game_Model/Zhuozi/ZhuoMian/Points_New/Point_xian_" + (m_nIndex + 1).ToString();            Transform parentTfm = GameObject.Find(pointName).transform;            Transform tfm;            m_PokerPointArray = new Transform[3][];            m_PokerPointArray[0] = new Transform[5];            m_PokerPointArray[1] = new Transform[5];            m_PokerPointArray[2] = new Transform[5];            m_CountPointArray = new Transform[3];            for (int i = 0; i < 3; i++)            {                tfm = parentTfm.Find("Poker").Find("Poker_" + (i + 1).ToString());                for (int j = 0; j < 5; j++)                {                    m_PokerPointArray[i][j] = tfm.GetChild(j);                }                m_CountPointArray[i] = tfm.Find("point_tips_bg");            }            m_ChipPointArray = new Transform[3, 3];            for (int i = 0; i < 3; i++)            {                tfm = parentTfm.Find("Chip").Find("Chip_" + (i + 1).ToString());                for (int j = 0; j < 3; j++)                {                    m_ChipPointArray[i, j] = tfm.GetChild(j);                }            }            m_vecBlackPoker = new List<byte>[2];            m_vecBlackPoker[0] = new List<byte>();            m_vecBlackPoker[1] = new List<byte>();            if (m_BjGameBase.m_AssetBundle != null)            {                UnityEngine.Object obj = (GameObject)m_BjGameBase.m_AssetBundle.LoadAsset("PlayerInfor");                m_InfoUIObj = (GameObject)GameMain.instantiate(obj);                BillBoard billboard = m_InfoUIObj.AddComponent<BillBoard>();                billboard.GameBase = m_BjGameBase;                billboard.Target = GameObject.Find("Game_Model/Zhuozi/Yizi/Icon_Point_" + (int)(m_nIndex + 1));                m_InfoUIObj.transform.SetParent(uiParent, false);                m_InfoUIObj.transform.Find("Button_Invitation").GetComponent<Button>().onClick.AddListener(OnClickInvite);                m_TimeImg = m_InfoUIObj.transform.Find("PlayerBG").Find("Head").Find("HeadOutline").Find("OutlineCountdown").GetComponent<Image>();                m_InfoUIObj.SetActive(false);

                m_CountTip = new GameObject[2];
                obj = (GameObject)m_BjGameBase.m_AssetBundle.LoadAsset("Model_tipsBG");
                m_CountTip[0] = GameMain.instantiate(obj) as GameObject;
                m_CountTip[0].SetActive(false);
                m_CountTip[1] = GameMain.instantiate(obj) as GameObject;
                m_CountTip[1].SetActive(false);
            }        }    }    public override void Init()    {        base.Init();        if (m_SitUIObj != null)            m_SitUIObj.SetActive(true);    }    public override void OnTick()    {        base.OnTick();        if (m_TimeImg.gameObject.activeSelf)        {            m_TimeImg.fillAmount = m_TimeImg.fillAmount - Time.unscaledDeltaTime / m_BjGameBase.m_RoomInfo.m_fStateTime;            if (m_TimeImg.fillAmount <= 0.0f)            {                OnQuitTurn();            }        }    }    public override void OnQuitTurn(byte state = 0)    {        base.OnQuitTurn(state);        if (!Asking)            return;        ShowTimeImg(false, 1.0f, true);

        //if (m_BjGameBase.m_RoomInfo.m_iCurPokerPos > 1)
        //{
        //    ShowCurrentCountTip(1);
        //    ShowCurrentCountTip(2);
        //}
        //else
        //    ShowCurrentCountTip(m_BjGameBase.m_RoomInfo.m_iCurPokerPos);
        StopAsk();    }    public void ShowCurrentCountTip(byte cardPos, byte points = 0, byte otherPoint = 0, byte state = 0)    {        if(points == 0)        {            if (state == 5)                points = RoomInfo.NoSit;            else            {
                byte index = cardPos;
                if (index > 0)
                    index--;
                points = m_nPoints[index, 0];
                otherPoint = m_nPoints[index, 1];            }        }        ShowCountTip(true, cardPos, m_CountPointArray[cardPos], points, otherPoint);    }    void ShowTimeImg(bool show, float fill = 1.0f, bool updateUi = false)    {        if (m_TimeImg == null)            return;        if(m_InfoUIObj.activeSelf && fill >= 0.0f)        {            m_TimeImg.gameObject.SetActive(show);            if (show)                m_TimeImg.fillAmount = fill;        }        if (m_nUserId == GameMain.hall_.GetPlayerId())        {            m_BjGameBase.OnGameLocalTurn(show, fill, updateUi);        }    }    public override void OnTurn(float fill = 1.0f, bool bFirst = false)    {        base.OnTurn(fill, bFirst);        ShowTimeImg(true, fill);        if (bFirst)
        {            if(m_BjGameBase.m_RoomInfo.m_iCurPokerPos > 1)
            {                ShowCurrentCountTip(1);
                ShowCurrentCountTip(2);
            }            else                ShowCurrentCountTip(m_BjGameBase.m_RoomInfo.m_iCurPokerPos);
        }        if (m_nUserId == GameMain.hall_.GetPlayerId())        {            m_BjGameBase.UpdatePlayerUI(this, bFirst);        }        Asking = true;    }    public void ClearPoker(int cardPos = -1)    {        if (m_PokerPointArray == null)            return;        if(cardPos < 0)        {            foreach (Transform[] tfmArray in m_PokerPointArray)            {                foreach(Transform tfm in tfmArray)                    tfm.gameObject.SetActive(false);            }        }        else        {            foreach (Transform tfm in m_PokerPointArray[cardPos])            {                tfm.gameObject.SetActive(false);            }        }    }    void ClearChips(int cardPos = -1, int index = -1, bool playSound = true)    {        if(m_ChipPointArray != null)        {            bool bHaveChip = false;            if(cardPos < 0)            {                foreach (Transform tfm in m_ChipPointArray)                {                    foreach (Transform tfmChild in tfm)                    {                        bHaveChip = true;                        GameObject.Destroy(tfmChild.gameObject);                    }                }            }            else            {                if(index < 0)                {                    for(int i = 0; i < 3; i++)                    {                        foreach (Transform tfmChild in m_ChipPointArray[cardPos, i])                        {                            bHaveChip = true;                            GameObject.Destroy(tfmChild.gameObject);                        }                    }                }                else                {                    foreach (Transform tfmChild in m_ChipPointArray[cardPos, index])                    {                        bHaveChip = true;                        GameObject.Destroy(tfmChild.gameObject);                    }                }            }            if(bHaveChip && playSound)            {                CustomAudioDataManager.GetInstance().PlayAudio(1004);            }        }    }    public override void OnEnd()    {        m_nDouble[0] = m_nDouble[1] = 0;        m_nChipInCoin[0] = m_nChipInCoin[1] = 0;        m_nSafeChipInCoin = 0;        m_nPoints[0, 0] = m_nPoints[0, 1] = 0;        m_nPoints[1, 0] = m_nPoints[1, 1] = 0;        m_bCanSplit = false;        Asking = false;        ClearPoker();        ClearChips();        ShowTimeImg(false);        ShowCountTip(false, 1);        ShowCountTip(false, 2);        base.OnEnd();    }    protected override bool ShowPlayerInfo(bool show = true, bool invite = false)    {        if(!base.ShowPlayerInfo(show, invite))            return false;        if (show)        {            if (invite)            {                m_InfoUIObj.transform.Find("PlayerBG").gameObject.SetActive(false);                m_InfoUIObj.transform.Find("Button_Invitation").gameObject.SetActive(true);            }            else            {                m_InfoUIObj.transform.Find("PlayerBG").gameObject.SetActive(true);                m_InfoUIObj.transform.Find("Button_Invitation").gameObject.SetActive(false);                Text[] ts = m_InfoUIObj.GetComponentsInChildren<Text>();                Debug.Assert(ts.Length >= 2);                ts[0].text = m_cRoleName;                ts[1].text = m_nTotalCoin.ToString();                Image icon = m_InfoUIObj.transform.Find("PlayerBG").Find("Head").Find("HeadMask").Find("ImageHead").GetComponent<Image>();                icon.sprite = GameMain.hall_.GetIcon(m_nUrl, m_nUserId, (int)m_nFaceId);            }        }        return true;    }    public override void UpdateInfoUI()    {        if (m_InfoUIObj == null || !m_InfoUIObj.activeSelf)        {            if (m_nUserId == GameMain.hall_.GetPlayerId())            {                m_BjGameBase.OnGameLocalPlayerChiped(m_nTotalCoin);            }            return;        }        Text[] ts = m_InfoUIObj.GetComponentsInChildren<Text>();        Debug.Assert(ts.Length >= 2);        ts[1].text = m_nTotalCoin.ToString();    }    public void OnAnswer(byte result, byte state, byte pos)    {        if (result == 0)        {
            switch (state)
            {
                case 1://停叫
                case 5://投降
                    OnQuitTurn(state);
                    break;
                case 2://加倍
                    OnDouble(pos);
                    break;
                case 3://要牌
                    break;
                case 4://分牌
                    OnSplitBegin();
                    return;
                default://fail
                    OnTurn(-1.0f);
                    break;
            }            UpdateInfoUI();        }        else
        {
            if(state == 4)
            {                CCustomDialog.OpenCustomConfirmUI(2220);
                m_bCanSplit = false;
            }            m_BjGameBase.UpdatePlayerUI(this);            ShowTimeImg(true, 0f);        }        StopAsk();    }    void StopAsk()
    {
        m_BjGameBase.m_RoomInfo.m_DealerAnimCtrl.StopAsk();        Asking = false;
    }    void OnDouble(byte pos)    {        m_nDouble[pos] = 1;        OnPlayerChiped(pos);    }    void OnSplitBegin()    {        m_bCanSplit = false;        ClearChips();        m_nChipInCoin[1] = m_nChipInCoin[0];        OnPlayerChiped(-1);        m_BjGameBase.m_RoomInfo.m_DealerAnimCtrl.PlaySplit(m_nIndex);    }    public void OnSplit()    {        ClearPoker();    }    public void OnSplitEnd()    {        if (m_vecBlackPoker[0].Count != 2)        {            DebugLog.LogError("PokerData Error!!");            return;        }        byte card1 = m_vecBlackPoker[0][0];        byte card2 = m_vecBlackPoker[0][1];        m_vecBlackPoker[0].Clear();        HandleAddPoker(2, card1, 0, 0);        HandleAddPoker(1, card2, 0, 0);        StopAsk();    }    public void OnBuySafe(long safeCoin, long total)    {        m_nSafeChipInCoin = safeCoin;        m_nTotalCoin = total;        OnPlayerChiped(0);    }    public void OnBuySafeEnd()    {        ClearChips(0, 1);        if(m_nSafeChipInCoin != 0)
        {
            OnResult(m_nTotalCoin, m_nSafeChipInCoin);
            m_nSafeChipInCoin = 0;
        }        UpdateInfoUI();    }    public void OnEnterRoom(bool bLocal)    {        if (m_nUserId == 0)            return;        m_SitUIObj.SetActive(false);        DebugLog.Log(string.Format("Index:{0} pokerNum:{1} CutNum:{2}", m_nIndex, m_vecBlackPoker[0].Count, m_vecBlackPoker[1].Count));        int cardPos = (m_vecBlackPoker[1].Count > 0) ? 1 : 0;        foreach (List<byte> list in m_vecBlackPoker)        {            for (int i = 0; i < list.Count; i++)                AddPoker(list[i], m_PokerPointArray[cardPos][i]);            cardPos += 1;        }        OnPlayerChiped(-1, false);        if(m_BjGameBase.m_RoomInfo.m_eRoomState == BlackRoomState_Enum.BlackRoomState_ChipIn            || m_nIndex == m_BjGameBase.m_RoomInfo.m_iTurnAskDoubleSign)        {            OnTurn(m_BjGameBase.m_RoomInfo.m_fCountTime / m_BjGameBase.m_RoomInfo.m_fStateTime);        }        ShowPlayerInfo(!bLocal);        OnCameraChanged(null);    }    public Transform GetPokerTfm(byte cardPos, int index = -1)    {        int pos = cardPos;        if (pos > 0)            pos--;        if (index < 0)            index = m_vecBlackPoker[pos].Count;        if (index >= 5)            index = 0;        return m_PokerPointArray[cardPos][index];    }    public override void HandleAddPoker(byte cardPos, byte card, byte points, byte otherPoints)    {        int pos = cardPos;        if (pos > 0)            pos--;        int index = m_vecBlackPoker[pos].Count;        if (index >= 5)            return;        AddPoker(card, m_PokerPointArray[cardPos][index]);        m_vecBlackPoker[pos].Add(card);        if (index > 1 //2张以上（轮到）        || (index == 1 && (points == 21 || otherPoints == 21))//BlackJack or 21        || (m_BjGameBase.m_RoomInfo.m_iTurnAskDoubleSign <= RoomInfo.PlayerNum && m_BjGameBase.m_RoomInfo.m_iTurnAskDoubleSign > m_nIndex))//轮过了             ShowCurrentCountTip(cardPos, points, otherPoints);        base.HandleAddPoker(cardPos, card, points, otherPoints);    }    public void OnLocalPlayerSit( bool bSit, byte localSit, bool showTime = false)//stand:sit=false    {        if(!bSit)        {            ShowPlayerInfo(m_nUserId != 0 && localSit != m_nIndex);            ShowChipsTip(false);        }        else        {            if (m_nIndex != localSit)            {                if (localSit < RoomInfo.PlayerNum && m_nUserId == 0)                {                    ShowPlayerInfo(true, true);                    showTime = false;                }            }            else                ShowPlayerInfo(false);            if (showTime)                ShowTimeImg(true, m_BjGameBase.m_RoomInfo.m_fCountTime / m_BjGameBase.m_RoomInfo.m_fStateTime);        }    }    public void OnCameraChanged(Transform uiTfm)    {        if(uiTfm == null)
            m_InfoUIObj.GetComponent<BillBoard>().OnCameraChanged();        else        {
            RectTransform rtfm = uiTfm as RectTransform;
            m_InfoUIObj.GetComponent<BillBoard>().SetPos(rtfm.localPosition);
        }    }    public void OnPlayerChiped(int index, bool bUpdateUI = true, bool showTip = false)//i=-1 表示都更新    {        List<int> updateList = new List<int>();        if (index < 0)        {            for (int j = 0; j < m_nChipInCoin.Length; j++)                updateList.Add(j);        }        else            updateList.Add(index);        foreach(int i in updateList)        {            if (m_nChipInCoin[i] > 0)            {                int cardPos = m_nChipInCoin[1] > 0 ? 1 : 0;                long coin = m_nChipInCoin[i];                if (m_nSafeChipInCoin > 0)                {                    AddChips(m_ChipPointArray[cardPos + i, 1], m_nSafeChipInCoin);                }                else if (m_nDouble[i] > 0)                {                    coin = coin / 2;                    AddChips(m_ChipPointArray[cardPos + i, 1], coin);                }                AddChips(m_ChipPointArray[cardPos + i, 0], coin);                if(showTip)                    ShowChipsTip(showTip, cardPos + i);            }        }        ShowTimeImg(false);        if(bUpdateUI)        {            UpdateInfoUI();        }    }    void ShowChipsTip(bool bShow, int cardPos = 0)    {        if(m_ChipPointArray[cardPos, 0].childCount > 0)        {            Transform t = m_ChipPointArray[cardPos, 0].GetChild(0).Find("Tips");            t.gameObject.SetActive(bShow);            if(bShow)            {                int index = cardPos > 0 ? (cardPos - 1) : cardPos;                t.GetComponentInChildren<TextMesh>().text = GameFunction.FormatCoinText(m_nChipInCoin[index]);            }        }    }    void OnClickInvite()    {        DebugLog.Log("click invite " + m_nIndex);        InvateMsg im = new InvateMsg();        im.playerid = GameMain.hall_.GetPlayerId();        im.gameid = (byte)GameKind_Enum.GameKind_BlackJack;        im.level = m_BjGameBase.m_RoomInfo.m_nRoomLevel;        im.roomid = m_BjGameBase.m_RoomInfo.m_iRoomID;        im.roomNum = m_nIndex;        GameMain.hall_.ResetInvatePanel(im);    }    public override void SetPointCount(byte count, byte other, byte pos)    {        if (pos > 0)            pos--;        m_nPoints[pos, 0] = count;        m_nPoints[pos, 1] = other;        base.SetPointCount(count, other, pos);    }    public override void SetSplit(byte split)    {        m_bCanSplit = split > 0;        base.SetSplit(split);    }    public void OnResult(long coin, long addCoin)    {        if (m_InfoUIObj == null || !m_InfoUIObj.activeSelf)        {            if (m_nUserId == GameMain.hall_.GetPlayerId())            {                m_BjGameBase.OnGameLocalPlayerResult(coin, addCoin);            }            return;        }        if(addCoin != 0)        {            Transform tfm = m_InfoUIObj.transform.Find("Text_Result");            m_BjGameBase.ResultAnim(addCoin, tfm, 5f);        }    }}