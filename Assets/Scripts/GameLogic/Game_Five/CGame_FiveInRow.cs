using System.Collections.Generic;using UnityEngine;using UnityEngine.EventSystems;using UnityEngine.UI;using USocket.Messages;using DragonBones;using XLua;[Hotfix]public class CGame_FiveInRow : CGameBase{    GameObject pickroot_;    GameObject roomroot_;    GameObject gameroot_;    Dictionary<uint, GameObject> roomObjects;    public FIR_StartGame game_;    public int currentLevel_ = 1;    public CGame_FiveInRow() :base(GameKind_Enum.GameKind_FiveInRow)    {        roomObjects = new Dictionary<uint, GameObject>();        GameMain.hall_.AskForClubData();        LoadResource();        //InitPlayerInfo();        //SwitchPickButton(true);        Reset();        InitTitleSprites();                InitBackMsg();        if (game_ == null)            game_ = new FIR_StartGame(gameroot_, pickroot_);        if(GameMain.hall_.invate_ != null)        {            SwitchPickButton(false);            UMessage levelMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_CHOOSElEVEL);            levelMsg.Add(GameMain.hall_.GetPlayerId());            currentLevel_ = GameMain.hall_.invate_.level;            levelMsg.Add((byte)(currentLevel_));            HallMain.SendMsgToRoomSer(levelMsg);        }        else            PickOne();    }    public override void Initialization()    {        base.Initialization();    }    public override void ProcessTick()    {        if (game_ != null)            game_.Update();    }    void InitBackMsg()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_CHOOSElEVEL, BackChooseLevel);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_SENDTABLEINFO, BackRoomInfo);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_ENTERROOM_FAIL, BackSitFail);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_AFTERENTERROOM, BackSitSuccess);
        CMsgDispatcher.GetInstance().RegMsgDictionary(
                (uint)GameCity.EMSG_ENUM.CrazyCityMsg_SM_PLAYERLEAVEROOMSER, BackLeaveRoomServer);    }    bool BackLeaveRoomServer(uint _msgType, UMessage msg)
    {
        GameMain.hall_.SwitchToHallScene();

        return true;
    }    bool BackChooseLevel(uint _msgType, UMessage msg)    {        FIR_Rooms.GetSingleton().state = msg.ReadByte();        if(FIR_Rooms.GetSingleton().state == 0)            return false;        FIR_Rooms.GetSingleton().level = msg.ReadByte();        FIR_Rooms.GetSingleton().beginid = msg.ReadUInt();        FIR_Rooms.GetSingleton().roomNum = msg.ReadInt();        FIR_Rooms.GetSingleton().InitRooms();        return true;    }    bool BackRoomInfo(uint _msgType, UMessage msg)    {        //接收房间消息        FIR_Rooms.GetSingleton().ReadRoomData(msg);        InitRooms();        return true;    }    List<Sprite> titles;    void InitTitleSprites()    {        titles = new List<Sprite>();        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_FiveInRow);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        titles.Add(bundle.LoadAsset<Sprite>("wzq_word_title_xsc"));        titles.Add(bundle.LoadAsset<Sprite>("wzq_word_title_gsc"));        titles.Add(bundle.LoadAsset<Sprite>("wzq_word_title_zjc"));    }    void SetRoomTitle()    {        Image title = pickroot_.transform.Find("Middle").Find("Middle_Room").            Find("ImageTopBG").Find("ImageText").gameObject.GetComponent<Image>();        title.sprite = titles[currentLevel_ - 1];    }    void ClearChilds(GameObject obj)    {        int count = obj.transform.childCount;        for (int index = 0; index < count; index++)        {            GameMain.safeDeleteObj(obj.transform.GetChild(0).gameObject);        }    }    void InitRooms()    {        SetRoomTitle();        GameObject roomBg = roomroot_.transform.Find("Room_Viewport").Find("Room_Content").gameObject;        ClearChilds(roomBg);        roomObjects.Clear();        foreach (Room room in FIR_Rooms.GetSingleton().rooms.Values)        {            GameObject newroom = LoadRoomResource();            roomObjects.Add(room.id, newroom);            RefreshRoomUI(room.id);            InitRoomBtnEvents(newroom, room.id);        }        if(GameMain.hall_.invate_ != null)        {            UMessage roomMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_ENTERROOM);            roomMsg.Add(GameMain.hall_.GetPlayerId());            roomMsg.Add(GameMain.hall_.invate_.roomid + (currentLevel_ - 1) * FIR_Rooms.GetSingleton().rooms.Count);            if(FIR_Rooms.GetSingleton().rooms[GameMain.hall_.invate_.roomid + (uint)((currentLevel_ - 1) * FIR_Rooms.GetSingleton().rooms.Count)].host.isleft)                roomMsg.Add((byte)GameCity.PlayerSitSide_Enum.PlayerSitSide_Right);            else                roomMsg.Add((byte)GameCity.PlayerSitSide_Enum.PlayerSitSide_Left);            HallMain.SendMsgToRoomSer(roomMsg);            GameMain.hall_.invate_ = null;        }    }    public void ChangeRoomBet(uint roomid)    {        if (!FIR_Rooms.GetSingleton().rooms.ContainsKey(roomid))            return;        Room room = FIR_Rooms.GetSingleton().rooms[roomid];        Text roombet = roomObjects[roomid].transform.Find("ImageBetBG").            Find("TextBetNum").gameObject.GetComponent<Text>();        roombet.text = room.bet.ToString();    }    public void RefreshRoomUI(uint roomid)    {        RefreshPlayerInfo();        if (roomObjects.ContainsKey(roomid))        {            if(FIR_Rooms.GetSingleton().rooms[roomid].host != null && FIR_Rooms.GetSingleton().rooms[roomid].guest != null)            {                if (FIR_Rooms.GetSingleton().rooms[roomid].host.playerid == FIR_Rooms.GetSingleton().rooms[roomid].guest.playerid)                    FIR_Rooms.GetSingleton().rooms[roomid].guest = null;            }            Room room = FIR_Rooms.GetSingleton().rooms[roomid];            Text roomNo = roomObjects[roomid].transform.Find("ImageRoomBG").                Find("TextRoomNum").gameObject.GetComponent<Text>();            roomNo.text = (room.id - FIR_Rooms.GetSingleton().beginid + 1).ToString();            Text roombet = roomObjects[roomid].transform.Find("ImageBetBG").                Find("TextBetNum").gameObject.GetComponent<Text>();            roombet.text = room.bet.ToString();            GameObject lefthead = roomObjects[roomid].transform.Find("Left").Find("HeadFram").gameObject;            GameObject lefticon = lefthead.transform.Find("Image_Mask").Find("Image_Head").gameObject;            GameObject leftname = lefthead.transform.Find("TextName").gameObject;            GameObject lefthost = roomObjects[roomid].transform.Find("Left").Find("Icon_Host").gameObject;            GameObject righthead = roomObjects[roomid].transform.Find("Right").Find("HeadFram").gameObject;            GameObject righticon = righthead.transform.Find("Image_Mask").Find("Image_Head").gameObject;            GameObject rightname = righthead.transform.Find("TextName").gameObject;            GameObject righthost = roomObjects[roomid].transform.Find("Right").Find("Icon_Host").gameObject;            if (room.host != null)            {                if (room.host.isleft)                {                    lefthead.SetActive(true);                    lefticon.GetComponent<Image>().sprite = GameMain.hall_.GetIcon(room.host.url, room.host.playerid, (int)room.host.icon);                    leftname.GetComponent<Text>().text = room.host.name;                    lefthost.SetActive(true);                    if (room.guest != null)                    {                        righthead.SetActive(true);                        righticon.GetComponent<Image>().sprite = GameMain.hall_.GetIcon(room.guest.url, room.guest.playerid, (int)room.guest.icon);                        rightname.GetComponent<Text>().text = room.guest.name;                    }                    else                    {                        righthead.SetActive(false);                        righticon.GetComponent<Image>().sprite = null;                        rightname.GetComponent<Text>().text = "";                    }                }                else                {                    righthead.SetActive(true);                    righticon.GetComponent<Image>().sprite = GameMain.hall_.GetIcon(room.host.url, room.host.playerid, (int)room.host.icon);                    rightname.GetComponent<Text>().text = room.host.name;                    righthost.SetActive(true);                    if (room.guest != null)                    {                        lefthead.SetActive(true);                        lefticon.GetComponent<Image>().sprite = GameMain.hall_.GetIcon(room.guest.url, room.guest.playerid, (int)room.guest.icon);                        leftname.GetComponent<Text>().text = room.guest.name;                    }                    else                    {                        lefthead.SetActive(false);                        lefticon.GetComponent<Image>().sprite = null;                        leftname.GetComponent<Text>().text = "";                    }                }            }            else            {                lefthead.SetActive(false);                lefticon.GetComponent<Image>().sprite = null;                leftname.GetComponent<Text>().text = "";                lefthost.SetActive(false);                righthead.SetActive(false);                righticon.GetComponent<Image>().sprite = null;                rightname.GetComponent<Text>().text = "";                righthost.SetActive(false);            }                        }    }    void Reset()    {    }    void LoadResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_FiveInRow);        if (gamedata != null)        {            //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);            AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);            if (bundle == null)                return;            GameObject background = GameObject.Find("Canvas/Root");            UnityEngine.Object obj0 = bundle.LoadAsset("Five_MainUI");            gameroot_ = (GameObject)GameMain.instantiate(obj0);            gameroot_.transform.SetParent(background.transform, false);            gameroot_.SetActive(false);            UnityEngine.Object obj1 = bundle.LoadAsset("Five_Lobby");            pickroot_ = (GameObject)GameMain.instantiate(obj1);            pickroot_.transform.SetParent(background.transform, false);            pickroot_.SetActive(true);            roomroot_ = pickroot_.transform.Find("Middle").Find("Middle_Room").gameObject;            SwitchPickButton(false);            InitChooseLevelEvents(bundle);        }    }    void InitChooseLevelEvents(AssetBundle bundle)    {        Object monkeyObj = (GameObject)bundle.LoadAsset("Anime_Icon_1");        GameObject newbie = (GameObject)GameMain.instantiate(monkeyObj);        newbie.transform.SetParent(pickroot_.transform.Find("Middle").Find("Middle_Button").Find("Button_1Xinshou"), false);        Object PandaObj = (GameObject)bundle.LoadAsset("Anime_Icon_2");        GameObject gaoshou = (GameObject)GameMain.instantiate(PandaObj);        gaoshou.transform.SetParent(pickroot_.transform.Find("Middle").Find("Middle_Button").Find("Button_2Gaoshou"), false);        Object lionObj = (GameObject)bundle.LoadAsset("Anime_Icon_3");        GameObject zhuanjia = (GameObject)GameMain.instantiate(lionObj);        zhuanjia.transform.SetParent(pickroot_.transform.Find("Middle").Find("Middle_Button").Find("Button_3Zhuangjia"), false);        GameObject RmcBtn = pickroot_.transform.Find("Middle").Find("Middle_Button").Find("Button_1Xinshou").gameObject;        GameObject GscBtn = pickroot_.transform.Find("Middle").Find("Middle_Button").Find("Button_2Gaoshou").gameObject;        GameObject ZjcBtn = pickroot_.transform.Find("Middle").Find("Middle_Button").Find("Button_3Zhuangjia").gameObject;        XPointEvent.AutoAddListener(RmcBtn, OnClickRmc, newbie);        XPointEvent.AutoAddListener(GscBtn, OnClickGsc, gaoshou);        XPointEvent.AutoAddListener(ZjcBtn, OnClickZjc, zhuanjia);        GameObject returnBtn = pickroot_.transform.Find("Top").Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn, OnReturn, null);    }    void InitPlayerInfo()    {        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        if (GameMain.hall_.GetPlayerData().GetVipLevel() > 0)        {            GameObject vip0Img = pickroot_.transform.Find("Bottom").Find("PlayerInfoBG").                    Find("Image_Vip").Find("Vip_Text").Find("Num").gameObject;            GameObject vipImg = pickroot_.transform.Find("Bottom").Find("PlayerInfoBG").                    Find("Image_Vip").Find("Vip_Text").Find("Num (1)").gameObject;            Image vipicon = pickroot_.transform.Find("Bottom").Find("PlayerInfoBG").                    Find("Image_Vip").gameObject.GetComponent<Image>();            vip0Img.SetActive(false);            vipImg.SetActive(true);            vipImg.GetComponent<Image>().sprite =                bundle.LoadAsset<Sprite>("zjm_word_sz_vip_" + GameMain.hall_.GetPlayerData().GetVipLevel());            vipicon.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_jin");        }        RefreshPlayerInfo();    }    void RefreshPlayerInfo()    {        Image icon = pickroot_.transform.Find("Bottom").Find("PlayerInfoBG").            Find("Image_HeadFram").Find("Image_Mask").Find("Image_Head").            gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(GameMain.hall_.GetPlayerData().GetPlayerIconURL(),             GameMain.hall_.GetPlayerId(), (int)GameMain.hall_.GetPlayerData().PlayerIconId);        Text playername = pickroot_.transform.Find("Bottom").Find("PlayerInfoBG").            Find("TextName").gameObject.GetComponent<Text>();        playername.text = GameMain.hall_.GetPlayerData().GetPlayerName();        Text coin = pickroot_.transform.Find("Bottom").Find("Image_coinframe").            Find("Text_Coin").gameObject.GetComponent<Text>();        coin.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();        Text diamond = pickroot_.transform.Find("Bottom").Find("Image_DiamondFrame").            Find("Text_Diamond").gameObject.GetComponent<Text>();        diamond.text = GameMain.hall_.GetPlayerData().GetDiamond().ToString();    }    public override void RefreshGamePlayerCoin(uint AddMoney)    {        base.RefreshGamePlayerCoin(AddMoney);        Text cointext = pickroot_.transform.Find("Bottom").Find("Image_coinframe").           Find("Text_Coin").gameObject.GetComponent<Text>();        long coin;        long.TryParse(cointext.text, out coin);        coin += AddMoney;        cointext.text = coin.ToString();        //还差两界面        Text selfCoin = gameroot_.transform.Find("PlayerInfor_Left").Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        long.TryParse(selfCoin.text, out coin);        coin += AddMoney;        selfCoin.text = coin.ToString();    }    void SwitchPickButton(bool ischooselevel)    {        GameObject choosebtn = pickroot_.transform.Find("Middle").Find("Middle_Button").gameObject;        GameObject roombtn = pickroot_.transform.Find("Middle").Find("Middle_Room").gameObject;        choosebtn.SetActive(ischooselevel);        roombtn.SetActive(!ischooselevel);    }    void PickOne()
    {
        SwitchPickButton(false);

        UMessage levelMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_CHOOSElEVEL);

        levelMsg.Add(GameMain.hall_.GetPlayerId());
        currentLevel_ = 1;
        levelMsg.Add((byte)(currentLevel_));

        HallMain.SendMsgToRoomSer(levelMsg);
    }    void OnClickRmc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            SwitchPickButton(false);            UMessage levelMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_CHOOSElEVEL);            levelMsg.Add(GameMain.hall_.GetPlayerId());            currentLevel_ = 1;            levelMsg.Add((byte)(currentLevel_));            HallMain.SendMsgToRoomSer(levelMsg);        }        if (eventtype == EventTriggerType.PointerDown)        {            UnityArmatureComponent animate = ((GameObject)button).GetComponent<UnityArmatureComponent>();            animate.animation.Play("newAnimation");        }    }    void OnClickGsc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            SwitchPickButton(false);            UMessage levelMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_CHOOSElEVEL);            levelMsg.Add(GameMain.hall_.GetPlayerId());            currentLevel_ = 2;            levelMsg.Add((byte)(currentLevel_));            HallMain.SendMsgToRoomSer(levelMsg);        }        if (eventtype == EventTriggerType.PointerDown)        {            UnityArmatureComponent animate = ((GameObject)button).GetComponent<UnityArmatureComponent>();            animate.animation.Play("newAnimation");        }    }    void OnClickZjc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            SwitchPickButton(false);            UMessage levelMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_CHOOSElEVEL);            levelMsg.Add(GameMain.hall_.GetPlayerId());            currentLevel_ = 3;            levelMsg.Add((byte)(currentLevel_));            HallMain.SendMsgToRoomSer(levelMsg);        }        if (eventtype == EventTriggerType.PointerDown)        {            UnityArmatureComponent animate = ((GameObject)button).GetComponent<UnityArmatureComponent>();            animate.animation.Play("newAnimation");        }    }    void OnReturn(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);
            //if (roomroot_.activeSelf)
            //    SwitchPickButton(true);
            //else
            //    GameMain.hall_.SwitchToHallScene();
            UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CrazyCityMsg_CM_PLAYERLEAVEROOMSER);
            msg.Add(GameMain.hall_.GetPlayerId());
            HallMain.SendMsgToRoomSer(msg);        }    }    void InitRoomBtnEvents(GameObject newroom, uint roomid)    {        GameObject leftbtn = newroom.transform.Find("Left").Find("ButtonSit").gameObject;        GameObject rightbtn = newroom.transform.Find("Right").Find("ButtonSit").gameObject;        uint id = roomid;        XPointEvent.AutoAddListener(leftbtn, OnLeftSit, id);        XPointEvent.AutoAddListener(rightbtn, OnRightSit, id);    }    void OnLeftSit(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            if (FIR_Rooms.GetSingleton().rooms[(uint) button].host != null                && FIR_Rooms.GetSingleton().rooms[(uint)button].guest != null)            {                CCustomDialog.OpenCustomConfirmUI(2106);                return;            }            UMessage roomMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_ENTERROOM);            roomMsg.Add(GameMain.hall_.GetPlayerId());            roomMsg.Add((uint)button);            roomMsg.Add((byte)GameCity.PlayerSitSide_Enum.PlayerSitSide_Left);            HallMain.SendMsgToRoomSer(roomMsg);        }    }    void OnRightSit(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            if (FIR_Rooms.GetSingleton().rooms[(uint)button].host != null                 && FIR_Rooms.GetSingleton().rooms[(uint)button].guest != null)            {                CCustomDialog.OpenCustomConfirmUI(2106);                return;            }            UMessage roomMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_ENTERROOM);            roomMsg.Add(GameMain.hall_.GetPlayerId());            roomMsg.Add((uint)button);            roomMsg.Add((byte)GameCity.PlayerSitSide_Enum.PlayerSitSide_Right);            HallMain.SendMsgToRoomSer(roomMsg);        }    }    bool BackSitFail(uint _msgType, UMessage msg)    {        byte state = msg.ReadByte();        switch(state)        {            case 1:                CCustomDialog.OpenCustomConfirmUI(2120);                break;            case 2:                CCustomDialog.OpenCustomConfirmUI(2120);                break;            case 3:                CCustomDialog.OpenCustomConfirmUI(2120);                break;            case 4:                CCustomDialog.OpenCustomConfirmUI(2117);                break;            case 5:                CCustomDialog.OpenCustomConfirmUI(2118);                break;            case 6:                CCustomDialog.OpenCustomConfirmUI(2120);                break;            case 7:                CCustomDialog.OpenCustomConfirmUI(2119);                break;        }        return true;    }    bool BackSitSuccess(uint _msgType, UMessage msg)    {        //CRollTextUI.Instance.AddVerticalRollText("进入房间成功");        byte playerNumber = msg.ReadByte();        long bet = msg.ReadLong();        uint roomid = msg.ReadUInt();        uint hostid = msg.ReadUInt();        FIR_Rooms.GetSingleton().rooms[roomid].bet = bet;        for (byte index = 0; index < playerNumber; index++)        {            bool isleft = msg.ReadByte() == (byte)GameCity.PlayerSitSide_Enum.PlayerSitSide_Left;            uint playerid = msg.ReadUInt();            uint icon = msg.ReadUInt();            string sFaceUrl = msg.ReadString();            long money = msg.ReadLong();            bool isready = msg.ReadBool();            string name = msg.ReadString();            if (FIR_Rooms.GetSingleton().rooms.ContainsKey(roomid))            {                if (playerid == hostid)                {                    if (FIR_Rooms.GetSingleton().rooms[roomid].host == null)                        FIR_Rooms.GetSingleton().rooms[roomid].host = new RoomPlayerInfo();                    FIR_Rooms.GetSingleton().rooms[roomid].host.isleft = isleft;                    FIR_Rooms.GetSingleton().rooms[roomid].host.icon = icon;                    FIR_Rooms.GetSingleton().rooms[roomid].host.money = money;                    FIR_Rooms.GetSingleton().rooms[roomid].host.name = name;                    FIR_Rooms.GetSingleton().rooms[roomid].host.playerid = playerid;                    FIR_Rooms.GetSingleton().rooms[roomid].host.isready = isready;                    if (playerid == GameMain.hall_.GetPlayerId())                    {                        pickroot_.SetActive(false);                        //CRollTextUI.Instance.AddVerticalRollText("刷新房间信息");                        game_.Reset(roomid, hostid);                    }                    else                    {                        //if (GameMain.hall_.GetPlayerId() == hostid)                        //CRollTextUI.Instance.AddVerticalRollText("房主刷新信息");                        game_.RefreshPlayerInfo();                    }                }                else                {                    if (FIR_Rooms.GetSingleton().rooms[roomid].guest == null)                        FIR_Rooms.GetSingleton().rooms[roomid].guest = new RoomPlayerInfo();                    FIR_Rooms.GetSingleton().rooms[roomid].guest.isleft = isleft;                    FIR_Rooms.GetSingleton().rooms[roomid].guest.icon = icon;                    FIR_Rooms.GetSingleton().rooms[roomid].guest.money = money;                    FIR_Rooms.GetSingleton().rooms[roomid].guest.name = name;                    FIR_Rooms.GetSingleton().rooms[roomid].guest.playerid = playerid;                    FIR_Rooms.GetSingleton().rooms[roomid].guest.isready = isready;                    if (playerid == GameMain.hall_.GetPlayerId())                    {                        pickroot_.SetActive(false);                        //CRollTextUI.Instance.AddVerticalRollText("刷新房间信息");                        game_.Reset(roomid, hostid);                    }                    else                    {                        //if(playerid != hostid)                        //CRollTextUI.Instance.AddVerticalRollText("房主刷新信息");                        game_.RefreshPlayerInfo();                    }                }            }            else                return false;        }        RefreshRoomUI(roomid);        return true;    }    GameObject LoadRoomResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_FiveInRow);        if (gamedata == null)            return null;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return null;        GameObject roomBg = roomroot_.transform.Find("Room_Viewport").Find("Room_Content").gameObject;        UnityEngine.Object obj0 = bundle.LoadAsset("Room_Info");        GameObject result = (GameObject)GameMain.instantiate(obj0);        result.transform.SetParent(roomBg.transform, false);        return result;    }}