using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using UnityEngine.EventSystems;using USocket.Messages;using DragonBones;using XLua;[Hotfix]public class FIR_StartGame{    GameObject root_;    GameObject room_;    long currentBet_;    GameObject setpanel_;    GameObject tippanel_;    bool isSecondConfirm_;    uint roomid_;    uint hostid_;    List<long> chips_;    int betindex = 0;    bool isGameStart_;    uint nextStepId;    GameObject buttons_;    GameObject resultPanel_;    bool isFirstChess = false;    byte takebacktimes;    UnityArmatureComponent lostArmature;    UnityArmatureComponent winArmature;    UnityArmatureComponent pingArmature;    UnityArmatureComponent wuziArmature;    UnityArmatureComponent xianhouArmature;    RoomPlayerInfo tempRoomPlayerData_;    public FIR_StartGame(GameObject root, GameObject room)    {        root_ = root;        room_ = room;        GameObject readyBtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("Button_Ready").gameObject;        GameObject cancelReadyBtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("Button_Cancel").gameObject;        XPointEvent.AutoAddListener(readyBtn, OnReady, null);        XPointEvent.AutoAddListener(cancelReadyBtn, OnCancelReady, null);        readyBtn.SetActive(true);        cancelReadyBtn.SetActive(false);        tippanel_ = root_.transform.Find("Pop-up").gameObject;        setpanel_ = root_.transform.Find("Pop-up").Find("Set").gameObject;        //Reset(roomid, hostid);        InitSetPanel();        InitCheckBoard();        InitGameSet();        LoadResultResource();        LoadSecondResouce();        LoadAnimationResource();        GameObject exitBtn = resultPanel_.transform.Find("ResultBG").Find("Button_Exit").gameObject;        XPointEvent.AutoAddListener(exitBtn, BackToRoom, null);        GameObject againBtn = resultPanel_.transform.Find("ResultBG").Find("Button_Again").gameObject;        XPointEvent.AutoAddListener(againBtn, OnCloseResult, null);        GameObject ShareBtn = resultPanel_.transform.Find("ResultBG").Find("ButtonShare").gameObject;        XPointEvent.AutoAddListener(ShareBtn, OnWeChatShare, null);        GameObject inviteBtn = root_.transform.Find("PlayerInfor_Right").Find("ButtonYaoqing").gameObject;        XPointEvent.AutoAddListener(inviteBtn, OnInvate, null);        InitBackMsg();        isSecondConfirm_ = false;        FIR_AudioDataManager.GetInstance().PlayAudio(1000, false);        InitGameInfoEvents();    }    void LoadAnimationResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_FiveInRow);        if (gamedata == null)            return;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        Object lostAnimateObj = (GameObject)bundle.LoadAsset("Anime_Result_lost");        Object pingAnimateObj = (GameObject)bundle.LoadAsset("Anime_Result_ping");        Object windAnimateObj = (GameObject)bundle.LoadAsset("Anime_Result_win");        GameObject lostAnimate = (GameObject)GameMain.instantiate(lostAnimateObj);        GameObject pingAnimate = (GameObject)GameMain.instantiate(pingAnimateObj);        GameObject winAnimate = (GameObject)GameMain.instantiate(windAnimateObj);        lostAnimate.transform.SetParent(resultPanel_.transform.Find("ResultBG").Find("Animation"), false);        lostArmature = lostAnimate.GetComponent<UnityArmatureComponent>();        pingAnimate.transform.SetParent(resultPanel_.transform.Find("ResultBG").Find("Animation"), false);        pingArmature = pingAnimate.GetComponent<UnityArmatureComponent>();        winAnimate.transform.SetParent(resultPanel_.transform.Find("ResultBG").Find("Animation"), false);        winArmature = winAnimate.GetComponent<UnityArmatureComponent>();        Object wuziAnimateObj = (GameObject)bundle.LoadAsset("Anime_Result_Wuzi");        GameObject wuziAnimate = (GameObject)GameMain.instantiate(wuziAnimateObj);        wuziAnimate.transform.SetParent(resultPanel_.transform.Find("Animation_Wuzi"), false);        wuziArmature = wuziAnimate.GetComponent<UnityArmatureComponent>();        GameObject readylast = root_.transform.Find("Ready").Find("First_Last").gameObject;        Object xianhouAnimateObj = (GameObject)bundle.LoadAsset("Anime_xian_hou");        GameObject xianhouAnimate = (GameObject)GameMain.instantiate(xianhouAnimateObj);        xianhouAnimate.transform.SetParent(readylast.transform, false);        xianhouArmature = xianhouAnimate.GetComponent<UnityArmatureComponent>();    }    public void Reset(uint roomid, uint hostid)    {        ReadCsv();        root_.SetActive(true);        root_.transform.Find("Ready").gameObject.SetActive(true);        root_.transform.Find("Ready").Find("ReadyBG").gameObject.SetActive(true);                        roomid_ = roomid;        hostid_ = hostid;        currentBet_ = FIR_Rooms.GetSingleton().rooms[roomid].bet;        if(currentBet_ == 0)            currentBet_ = FIR_DataCenter.Instance().fivechipsdata.GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).min;        InitGameInfo();        InitGameButtons();        if(!FIR_Rooms.GetSingleton().rooms[roomid_].host.isready)            ResetReady();        isGameStart_ = false;        currentstarttime = 0.0f;        currentfltime = 0.0f;        isfl = false;        isFirstChess = false;        isBeginUpdate = false;        ChangeBetMoney();        RefreshRoomNumber();        RefreshPlayerInfo();        ResetPlayerTime();        LoadSecondResouce();        for (int index = 1; index <= 225; index++)        {            string checkname = "Button (" + index.ToString() + ")";            GameObject chessmanBG = root_.transform.Find("ImageCheckerboard").                    Find("ImageGrid").Find(checkname).gameObject;            ClearChilds(chessmanBG);        }        GameObject readyTimePanel = root_.transform.Find("Ready").Find("CountdownBG").gameObject;        GameObject readylast = root_.transform.Find("Ready").Find("First_Last").gameObject;        readyTimePanel.SetActive(false);        readylast.SetActive(false);        if (buttons_ != null)            buttons_.SetActive(false);        GameObject leftTimeProc = root_.transform.Find("PlayerInfor_Right").            Find("Head").Find("HeadOutline").Find("OutlineCountdown").gameObject;        leftTimeProc.SetActive(true);        GameObject rightTimeProc = root_.transform.Find("PlayerInfor_Right").            Find("Head").Find("HeadOutline").Find("OutlineCountdown").gameObject;        rightTimeProc.SetActive(true);        proctime = FIR_DataCenter.Instance().GetRoomDataByID(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).playWaitTime;        secondblack.SetActive(false);        secondwhite.SetActive(false);        winUserid_ = 0;        isPlayXianhou = false;        exitRoomid = 0;        tempRoomPlayerData_ = null;        GameObject leftheibai = root_.transform.                Find("PlayerInfor_Left").Find("Icon_Camp").                Find("ImageIcon").gameObject;        leftheibai.SetActive(false);        GameObject rightheibai = root_.transform.            Find("PlayerInfor_Right").Find("Icon_Camp").            Find("ImageIcon").gameObject;        rightheibai.SetActive(false);    }    void ResetReady()    {        if (FIR_Rooms.GetSingleton().rooms[roomid_].host != null)            FIR_Rooms.GetSingleton().rooms[roomid_].host.isready = false;        if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)            FIR_Rooms.GetSingleton().rooms[roomid_].guest.isready = false;        GameObject readyBtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("Button_Ready").gameObject;        GameObject cancelReadyBtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("Button_Cancel").gameObject;        readyBtn.SetActive(true);        cancelReadyBtn.SetActive(false);    }    public void RefreshPlayerInfo()    {        if (!FIR_Rooms.GetSingleton().rooms.ContainsKey(roomid_))            return;        if (FIR_Rooms.GetSingleton().rooms[roomid_].host == null)            return;        if (FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid != GameMain.hall_.GetPlayerId())        {            if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)            {                if (FIR_Rooms.GetSingleton().rooms[roomid_].guest.playerid != GameMain.hall_.GetPlayerId())                    return;            }            else                return;        }        Image selfIcon = root_.transform.Find("PlayerInfor_Left").            Find("Head").Find("HeadMask").Find("ImageHead").gameObject.GetComponent<Image>();        Image otherIcon = root_.transform.Find("PlayerInfor_Right").            Find("Head").Find("HeadMask").Find("ImageHead").gameObject.GetComponent<Image>();        GameObject leftIconHost = root_.transform.Find("PlayerInfor_Left").Find("Icon_Host").gameObject;        leftIconHost.SetActive(false);        GameObject rightIconHost = root_.transform.Find("PlayerInfor_Right").Find("Icon_Host").gameObject;        rightIconHost.SetActive(false);        Text selfName = root_.transform.Find("PlayerInfor_Left").Find("TextName").gameObject.GetComponent<Text>();        Text otherName = root_.transform.Find("PlayerInfor_Right").Find("TextName").gameObject.GetComponent<Text>();        Text selfCoin = root_.transform.Find("PlayerInfor_Left").Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        Text otherCoin = root_.transform.Find("PlayerInfor_Right").Find("Image_coinframe").Find("Text_Coin").gameObject.GetComponent<Text>();        GameObject rightExpel = root_.transform.Find("PlayerInfor_Right").Find("ButtonTichu").gameObject;        GameObject leftready = root_.transform.Find("PlayerInfor_Left").Find("Icon_Ready").gameObject;        GameObject rightready = root_.transform.Find("PlayerInfor_Right").Find("Icon_Ready").gameObject;        GameObject inviteBtn = root_.transform.Find("PlayerInfor_Right").Find("ButtonYaoqing").gameObject;        GameObject coinImg = root_.transform.Find("PlayerInfor_Right").Find("Image_coinframe").Find("Image_Coin").gameObject;        GameObject rightcoin = root_.transform.Find("PlayerInfor_Right").Find("Image_coinframe").gameObject;        if (hostid_ == GameMain.hall_.GetPlayerId())        {            selfIcon.sprite = GameMain.hall_.GetIcon(FIR_Rooms.GetSingleton().rooms[roomid_].host.url,                FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid, (int)FIR_Rooms.GetSingleton().rooms[roomid_].host.icon);            selfName.text = FIR_Rooms.GetSingleton().rooms[roomid_].host.name;            selfCoin.text = FIR_Rooms.GetSingleton().rooms[roomid_].host.money.ToString();            leftready.SetActive(FIR_Rooms.GetSingleton().rooms[roomid_].host.isready);            if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)            {                root_.transform.Find("PlayerInfor_Right").Find("Head").gameObject.SetActive(true);                otherName.gameObject.SetActive(true);                otherCoin.gameObject.SetActive(true);                rightExpel.SetActive(true);                coinImg.SetActive(true);                rightcoin.SetActive(true);                inviteBtn.SetActive(false);                root_.transform.Find("PlayerInfor_Right").Find("Head").gameObject.SetActive(true);                otherIcon.sprite = GameMain.hall_.GetIcon(FIR_Rooms.GetSingleton().rooms[roomid_].guest.url,                    FIR_Rooms.GetSingleton().rooms[roomid_].guest.playerid, (int)FIR_Rooms.GetSingleton().rooms[roomid_].guest.icon);                otherName.text = FIR_Rooms.GetSingleton().rooms[roomid_].guest.name;                otherCoin.text = FIR_Rooms.GetSingleton().rooms[roomid_].guest.money.ToString();                rightExpel.SetActive(true);                XPointEvent.AutoAddListener(rightExpel, OnExpel, FIR_Rooms.GetSingleton().rooms[roomid_].guest.playerid);                rightready.SetActive(FIR_Rooms.GetSingleton().rooms[roomid_].guest.isready);            }            else            {                rightready.SetActive(false);                root_.transform.Find("PlayerInfor_Right").Find("Head").gameObject.SetActive(false);                otherName.gameObject.SetActive(false);                otherCoin.gameObject.SetActive(false);                rightExpel.SetActive(false);                coinImg.SetActive(false);                inviteBtn.SetActive(true);            }            leftIconHost.SetActive(true);        }        else        {            if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)            {                selfIcon.sprite = GameMain.hall_.GetIcon(FIR_Rooms.GetSingleton().rooms[roomid_].guest.url,                    FIR_Rooms.GetSingleton().rooms[roomid_].guest.playerid, (int)FIR_Rooms.GetSingleton().rooms[roomid_].guest.icon);                selfName.text = FIR_Rooms.GetSingleton().rooms[roomid_].guest.name;                selfCoin.text = FIR_Rooms.GetSingleton().rooms[roomid_].guest.money.ToString();                leftready.SetActive(FIR_Rooms.GetSingleton().rooms[roomid_].guest.isready);                if (FIR_Rooms.GetSingleton().rooms[roomid_].host != null)                {                    root_.transform.Find("PlayerInfor_Right").Find("Head").gameObject.SetActive(true);                    otherName.gameObject.SetActive(true);                    otherCoin.gameObject.SetActive(true);                    inviteBtn.SetActive(false);                    rightIconHost.SetActive(true);                    coinImg.SetActive(true);                    rightExpel.SetActive(false);                    rightcoin.SetActive(true);                    otherIcon.sprite = GameMain.hall_.GetIcon(FIR_Rooms.GetSingleton().rooms[roomid_].host.url,                        FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid, (int)FIR_Rooms.GetSingleton().rooms[roomid_].host.icon);                    otherName.text = FIR_Rooms.GetSingleton().rooms[roomid_].host.name;                    otherCoin.text = FIR_Rooms.GetSingleton().rooms[roomid_].host.money.ToString();                    rightready.SetActive(FIR_Rooms.GetSingleton().rooms[roomid_].host.isready);                }                else                {                    root_.transform.Find("PlayerInfor_Right").Find("Head").gameObject.SetActive(false);                    otherName.gameObject.SetActive(false);                    otherCoin.gameObject.SetActive(false);                    inviteBtn.SetActive(true);                    coinImg.SetActive(false);                    rightIconHost.SetActive(false);                    rightExpel.SetActive(false);                    rightcoin.SetActive(false);                }            }        }    }    public void Update()    {        float time = Time.deltaTime;        if (isGameStart_)        {            if (isBeginUpdate)                PlayStartEffect(time);            if (isfl)                ConfirmFirstLast(time);            if (isFirstChess)                UpdatePlayerTime(time);        }    }    public void InitBackMsg()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_LEAVEROOM, BackExit); //退出房间        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_SETSTAKECOIN, BackBet);//修改底注        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_GAMESTART, BackGameStart);//游戏开始        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_PLAYERREADY, BackReady);//准备        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_PLAYERPRESS, BackStepCheck);//落子        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_GAMEOVER, BackResult);//结果        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_ASKAPPLYPEACE, BackDraw);//另一个人收到求和请求        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_ASKBACKMOVE, BackTakeBack);//另一个人收到悔棋请求        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_BACKAPPLYPEACE, BackAce);//是否同意求和        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_TELLANSWERBACK, BackAgreeTackBack);//是否同意悔棋        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_NOTENOUGHSTAKECOIN, BackIsEnoughMoney);//是否同意        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_WAITMOVEBACK, BackWaitBack);//是否同意等待悔棋        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_WAITAPPLYPEACE, BackWaitPeace);//是否同意等待求和        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_SM_BACKNICKOUT, BackExpel);//是否同意    }    void OnReady(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            UMessage readyMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_PLAYERREADY);            readyMsg.Add(true);            readyMsg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(readyMsg);        }    }    void OnCancelReady(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            UMessage readyMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_PLAYERREADY);            readyMsg.Add(false);            readyMsg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(readyMsg);        }    }    bool BackReady(uint _msgType, UMessage msg)    {        bool isReady = msg.ReadBool();        uint userid = msg.ReadUInt();        GameObject leftready = root_.transform.Find("PlayerInfor_Left").Find("Icon_Ready").gameObject;        GameObject rightready = root_.transform.Find("PlayerInfor_Right").Find("Icon_Ready").gameObject;        root_.transform.Find("Ready").gameObject.SetActive(true);        root_.transform.Find("Ready").Find("ReadyBG").gameObject.SetActive(true);        GameObject readyBtn = root_.transform.Find("Ready").Find("ReadyBG").               Find("Button_Ready").gameObject;        GameObject cancelReadyBtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("Button_Cancel").gameObject;        if(userid == hostid_)            FIR_Rooms.GetSingleton().rooms[roomid_].host.isready = isReady;        else            FIR_Rooms.GetSingleton().rooms[roomid_].guest.isready = isReady;        if (userid == GameMain.hall_.GetPlayerId())        {            leftready.SetActive(isReady);            readyBtn.SetActive(!isReady);            cancelReadyBtn.SetActive(isReady);        }        else        {            rightready.SetActive(isReady);        }        return true;    }    void StartFiveInRow()    {    }    void InitGameSet()    {        GameObject returnBtn = root_.transform.Find("Top").Find("ButtonReturn").gameObject;        XPointEvent.AutoAddListener(returnBtn, BackToRoom, null);        GameObject setbtn = root_.transform.Find("Top").Find("ButtonSet").gameObject;        XPointEvent.AutoAddListener(setbtn, OnSet, null);    }    void InitGameInfo()    {        Text tickget = root_.transform.Find("Ready").Find("ReadyBG").            Find("TextTickets").Find("TextNum").gameObject.GetComponent<Text>();        //tickget.text = FIR_DataCenter.Instance().fivechipsdata.        //    GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).roomPay.ToString();        tickget.text = FIR_DataCenter.Instance().GetRoomDataByID(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).roompay.ToString();        Text bet = root_.transform.Find("Ready").Find("ReadyBG").            Find("TextBet").Find("TextNum").gameObject.GetComponent<Text>();        bet.text = currentBet_.ToString();        GameObject minusbetbtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("TextBet").Find("ImageBetBG").Find("ButtonSubtract").gameObject;        GameObject addbetbtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("TextBet").Find("ImageBetBG").Find("ButtonAdd").gameObject;        bool isHost = GameMain.hall_.GetPlayerId() == hostid_;        minusbetbtn.SetActive(isHost);        addbetbtn.SetActive(isHost);    }    void InitGameInfoEvents()    {        GameObject minusbetbtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("TextBet").Find("ImageBetBG").Find("ButtonSubtract").gameObject;        GameObject addbetbtn = root_.transform.Find("Ready").Find("ReadyBG").            Find("TextBet").Find("ImageBetBG").Find("ButtonAdd").gameObject;        XPointEvent.AutoAddListener(minusbetbtn, minusBet, null);        XPointEvent.AutoAddListener(addbetbtn, addBet, null);    }    public bool BackExpel(uint _msgType, UMessage msg)    {        uint hostid = msg.ReadUInt();        bool state = msg.ReadBool();        if (state)        {            FIR_Rooms.GetSingleton().rooms[roomid_].guest = null;                        if (GameMain.hall_.GetPlayerId() == hostid)                ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).game_.RefreshPlayerInfo();            else            {                CCustomDialog.OpenCustomConfirmUI(2107);                root_.SetActive(false);                room_.SetActive(true);                ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).RefreshRoomUI(roomid_);                GameObject readyBtn = root_.transform.Find("Ready").Find("ReadyBG").                    Find("Button_Ready").gameObject;                GameObject cancelReadyBtn = root_.transform.Find("Ready").Find("ReadyBG").                    Find("Button_Cancel").gameObject;                readyBtn.SetActive(true);                cancelReadyBtn.SetActive(false);            }        }        else        {            if (GameMain.hall_.GetPlayerId() == hostid)            {                CCustomDialog.OpenCustomConfirmUI(2010);            }        }        return true;    }    void OnExpel(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            UMessage kickoutMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_NICKOUTOTHER);            kickoutMsg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(kickoutMsg);        }    }    void BackToRoom(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            if (resultPanel_ != null)            {                //if (isStartExit)                //    FIR_Rooms.GetSingleton().rooms[roomid_].guest = null;                resultPanel_.SetActive(false);            }            UMessage levelRoomMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_LEAVEROOM);            levelRoomMsg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(levelRoomMsg);        }    }    uint exitRoomid;    public bool BackExit(uint _msgType, UMessage msg)    {        uint userid = msg.ReadUInt();        exitRoomid = msg.ReadUInt();        byte level = msg.ReadByte();        if (tempRoomPlayerData_ == null)            tempRoomPlayerData_ = new RoomPlayerInfo();        if (FIR_Rooms.GetSingleton().rooms.ContainsKey(exitRoomid))        {            if (FIR_Rooms.GetSingleton().rooms[exitRoomid].host != null)            {                if (FIR_Rooms.GetSingleton().rooms[exitRoomid].host.playerid == userid)                {                    if (FIR_Rooms.GetSingleton().rooms[exitRoomid].guest != null)                    {                        tempRoomPlayerData_.icon = FIR_Rooms.GetSingleton().rooms[exitRoomid].host.icon;                        tempRoomPlayerData_.isready = FIR_Rooms.GetSingleton().rooms[exitRoomid].host.isready;                        tempRoomPlayerData_.money = FIR_Rooms.GetSingleton().rooms[exitRoomid].host.money;                        tempRoomPlayerData_.name = FIR_Rooms.GetSingleton().rooms[exitRoomid].host.name;                        tempRoomPlayerData_.playerid = FIR_Rooms.GetSingleton().rooms[exitRoomid].host.playerid;                        FIR_Rooms.GetSingleton().rooms[exitRoomid].host.icon = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.icon;                        FIR_Rooms.GetSingleton().rooms[exitRoomid].host.isready = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.isready;                        FIR_Rooms.GetSingleton().rooms[exitRoomid].host.money = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.money;                        FIR_Rooms.GetSingleton().rooms[exitRoomid].host.name = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.name;                        FIR_Rooms.GetSingleton().rooms[exitRoomid].host.playerid = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.playerid;                        hostid_ = FIR_Rooms.GetSingleton().rooms[exitRoomid].host.playerid;                        FIR_Rooms.GetSingleton().rooms[exitRoomid].guest = null;                    }                    else                    {                        FIR_Rooms.GetSingleton().rooms[exitRoomid].host = null;                        FIR_Rooms.GetSingleton().rooms[exitRoomid].bet = 0;                    }                }                else if (FIR_Rooms.GetSingleton().rooms[exitRoomid].guest != null)                {                    if (FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.playerid == userid)                    {                        tempRoomPlayerData_.icon = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.icon;                        tempRoomPlayerData_.isready = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.isready;                        tempRoomPlayerData_.money = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.money;                        tempRoomPlayerData_.name = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.name;                        tempRoomPlayerData_.playerid = FIR_Rooms.GetSingleton().rooms[exitRoomid].guest.playerid;                        FIR_Rooms.GetSingleton().rooms[exitRoomid].guest = null;                    }                  }            }            else            {                FIR_Rooms.GetSingleton().rooms[exitRoomid].bet = 0;                ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).ChangeRoomBet(exitRoomid);            }        }        if (room_.activeSelf)        {            ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).RefreshRoomUI(exitRoomid);        }        else if (GameMain.hall_.GetPlayerId() == userid || FIR_Rooms.GetSingleton().rooms[exitRoomid].host == null)        {            root_.SetActive(false);            room_.SetActive(true);            ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).RefreshRoomUI(exitRoomid);            GameObject readyBtn = root_.transform.Find("Ready").Find("ReadyBG").                Find("Button_Ready").gameObject;            GameObject cancelReadyBtn = root_.transform.Find("Ready").Find("ReadyBG").                Find("Button_Cancel").gameObject;            readyBtn.SetActive(true);            cancelReadyBtn.SetActive(false);        }        if (roomid_ == exitRoomid && GameMain.hall_.GetPlayerId() != userid             && FIR_Rooms.GetSingleton().rooms[exitRoomid].host != null)        {            ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).game_.RefreshPlayerInfo();        }        //if (isStartExit)        //{        //    FIR_Rooms.GetSingleton().rooms[roomid_].guest = null;        //    isStartExit = false;        //}        return true;    }    void OnSet(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            tippanel_.SetActive(true);            setpanel_.SetActive(true);        }    }    void ReadCsv()    {        //FIR_DataCenter.Instance().fivechipsdata.LoadGameDataFile();        betindex = 0;        if(chips_ == null)            chips_ = new List<long>();        chips_.Clear();        chips_.Add(FIR_DataCenter.Instance().fivechipsdata.GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).min);        chips_.Add(FIR_DataCenter.Instance().fivechipsdata.GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).two);        chips_.Add(FIR_DataCenter.Instance().fivechipsdata.GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).three);        chips_.Add(FIR_DataCenter.Instance().fivechipsdata.GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).four);        chips_.Add(FIR_DataCenter.Instance().fivechipsdata.GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).five);    }    void InitSetPanel()    {        //Text bet = setpanel_.transform.FindChild("Bet").        //    FindChild("ImageBG").FindChild("TextNum").gameObject.GetComponent<Text>();        //bet.text = currentBet_.ToString();        //GameObject minusbetbtn = setpanel_.transform.FindChild("Bet").        //    FindChild("ImageBG").FindChild("ButtonSubtract").gameObject;        //GameObject addbetbtn = setpanel_.transform.FindChild("Bet").        //    FindChild("ImageBG").FindChild("ButtonAdd").gameObject;        GameObject confirmBtn = setpanel_.transform.Find("ButtonOK").gameObject;        //XPointEvent.AutoAddListener(minusbetbtn, minusBet, null);        //XPointEvent.AutoAddListener(addbetbtn, addBet, null);        XPointEvent.AutoAddListener(confirmBtn, OnCloseTips, null);        Toggle music = setpanel_.transform.Find("Set_Toggle").Find("Toggle_yinyue").gameObject.GetComponent<Toggle>();        Toggle sound = setpanel_.transform.Find("Set_Toggle").Find("Toggle_yinxiao").gameObject.GetComponent<Toggle>();        Toggle second = setpanel_.transform.Find("Set_Toggle").Find("Toggle_queren").gameObject.GetComponent<Toggle>();        music.onValueChanged.AddListener(delegate (bool call) { float num = 0.0f; if (call) num = 1.0f; AudioManager.Instance.MusicVolume = num; });        sound.onValueChanged.AddListener(delegate (bool call) { float num = 0.0f; if (call) num = 1.0f; AudioManager.Instance.SoundVolume = num; });        second.onValueChanged.AddListener(delegate (bool call) { isSecondConfirm_ = call; });        second.isOn = false;    }    void RefreshRoomNumber()    {        Text RoomNumberText = root_.transform.Find("Top").Find("ImageRoomBG").            Find("TextRoomNum").gameObject.GetComponent<Text>();        int level = ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_;        string roomName = "";        switch (level)        {            case 1:                roomName = "新手场";                break;            case 2:                roomName = "高手场";                break;            case 3:                roomName = "专家场";                break;            default:                break;        }        RoomNumberText.text = roomName + (roomid_ - FIR_Rooms.GetSingleton().beginid + 1).ToString();    }    void ChangeBetMoney()    {        //Text betText = setpanel_.transform.FindChild("Bet").        //    FindChild("ImageBG").FindChild("TextNum").gameObject.GetComponent<Text>();        //betText.text = currentBet_.ToString();        Text roomBet = root_.transform.Find("Top").Find("ImageBetBG").            Find("TextBetNum").gameObject.GetComponent<Text>();        roomBet.text = currentBet_.ToString();    }    void minusBet(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            if (GameMain.hall_.GetPlayerId() != hostid_)            {                CRollTextUI.Instance.AddVerticalRollText(2101);                return;            }            if (isGameStart_)                return;            if (betindex <= 0)            {                for (int index = 0; index < chips_.Count; index++)                {                    if (currentBet_ == chips_[index])                        betindex = index;                }            }            if (betindex <= 0)                return;            if (currentBet_ <= FIR_DataCenter.Instance().fivechipsdata.GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).min)                return;            if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)            {                if (FIR_Rooms.GetSingleton().rooms[roomid_].guest.money < chips_[betindex - 1])                    return;            }            int minusvalue = 1;            while(true)            {                if (FIR_Rooms.GetSingleton().rooms[roomid_].host.money < chips_[betindex - minusvalue])                {                    if (betindex - minusvalue <= 0)                    {                        CRollTextUI.Instance.AddVerticalRollText("玩家金币不足");                        return;                    }                    else                        minusvalue++;                }                else                    break;            }            betindex -= minusvalue;            currentBet_ = chips_[betindex];            //ChangeBetMoney();            UMessage roomMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_SETSTAKECOIN);            roomMsg.Add(GameMain.hall_.GetPlayerId());            roomMsg.Add(roomid_);            roomMsg.Add(currentBet_);            HallMain.SendMsgToRoomSer(roomMsg);        }    }    void addBet(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            if (GameMain.hall_.GetPlayerId() != hostid_)            {                CRollTextUI.Instance.AddVerticalRollText(2101);                return;            }            if (isGameStart_)                return;            if (currentBet_ >= FIR_DataCenter.Instance().fivechipsdata.GetLimitData(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).five)                return;            if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)            {                if (FIR_Rooms.GetSingleton().rooms[roomid_].guest.money < chips_[betindex])                    return;            }            if (FIR_Rooms.GetSingleton().rooms[roomid_].host.money < chips_[betindex + 1])            {                CRollTextUI.Instance.AddVerticalRollText("玩家金币不足");                return;            }                            betindex += 1;            currentBet_ = chips_[betindex];            //ChangeBetMoney();            UMessage roomMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_SETSTAKECOIN);            roomMsg.Add(GameMain.hall_.GetPlayerId());            roomMsg.Add(roomid_);            roomMsg.Add(currentBet_);            HallMain.SendMsgToRoomSer(roomMsg);        }    }    void OnCloseTips(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            tippanel_.SetActive(false);            setpanel_.SetActive(false);        }    }    public bool BackBet(uint _msgType, UMessage msg)    {        byte state = msg.ReadByte();        if (state == 0)        {            currentBet_ = msg.ReadLong();            uint roomid = msg.ReadUInt();            FIR_Rooms.GetSingleton().rooms[roomid].bet = currentBet_;            ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).ChangeRoomBet(roomid);        }        else        {            switch(state)            {                case 1:                    CRollTextUI.Instance.AddVerticalRollText("玩家房间信息错误");                    break;                case 2:                    CRollTextUI.Instance.AddVerticalRollText("玩家金币不足");                    break;                case 3:                    CRollTextUI.Instance.AddVerticalRollText(2101);                    break;                case 4:                    CRollTextUI.Instance.AddVerticalRollText("房间状态错误");                    break;            }            return false;        }        //else        //{        //    CRollTextUI.Instance.AddVerticalRollText("只有房主可以设置底分");        //    return false;        //}        ChangeBetMoney();        InitGameInfo();        return true;    }    public bool BackSet(uint _msgType, UMessage msg)    {        return true;    }    public bool BackGameStart(uint _msgType, UMessage msg)    {        isGameStart_ = true;        isBeginUpdate = true;        nextStepId = msg.ReadUInt();        takebacktimes = msg.ReadByte();        Text takeBackTx = buttons_.transform.Find("ButtonTakeBack").Find("Text").gameObject.GetComponent<Text>();        takeBackTx.text = takebacktimes.ToString();        GameObject readyTimePanel = root_.transform.Find("Ready").Find("CountdownBG").gameObject;        readyTimePanel.SetActive(true);        root_.transform.Find("Ready").Find("ReadyBG").gameObject.SetActive(false);        GameObject leftready = root_.transform.Find("PlayerInfor_Left").Find("Icon_Ready").gameObject;        GameObject rightready = root_.transform.Find("PlayerInfor_Right").Find("Icon_Ready").gameObject;        leftready.SetActive(false);        rightready.SetActive(false);        GameObject rightExpel = root_.transform.Find("PlayerInfor_Right").Find("ButtonTichu").gameObject;        rightExpel.SetActive(false);        return true;    }    float starttime = 5.0f;    float currentstarttime = 0.0f;    bool isBeginUpdate = false;    void PlayStartEffect(float time)    {        currentstarttime += time;        GameObject readyTimePanel = root_.transform.Find("Ready").Find("CountdownBG").gameObject;        GameObject readylast = root_.transform.Find("Ready").Find("First_Last").gameObject;        readylast.SetActive(false);        Text timeText = root_.transform.Find("Ready").Find("CountdownBG").Find("TextTime").gameObject.GetComponent<Text>();        timeText.text = (5 - ((int)currentstarttime)).ToString();        if (currentstarttime >= starttime)        {            readyTimePanel.SetActive(false);            readylast.SetActive(true);            currentstarttime = 0.0f;            isBeginUpdate = false;            isfl = true;        }    }    float fltime = 1.0f;    float currentfltime = 0.0f;    bool isfl = false;    bool isSelfBlack;    bool isPlayXianhou;    void ConfirmFirstLast(float time)    {        currentfltime += time;        GameObject readylast = root_.transform.Find("Ready").Find("First_Last").gameObject;        if (currentfltime >= fltime)        {            root_.transform.Find("Ready").gameObject.SetActive(false);            readylast.SetActive(false);            currentfltime = 0.0f;            isfl = false;            isFirstChess = true;            isPlayXianhou = false;            buttons_.SetActive(true);            ResetReady();            return;        }        readylast.SetActive(true);        //GameObject firstPlayer = root_.transform.FindChild("Ready").FindChild("First_Last").FindChild("Text_First").gameObject;        GameObject black = root_.transform.Find("Ready").Find("First_Last").Find("Chessman_Black").gameObject;        //GameObject lastPlayer = root_.transform.FindChild("Ready").FindChild("First_Last").FindChild("Text_Last").gameObject;        GameObject white = root_.transform.Find("Ready").Find("First_Last").Find("Chessman_White").gameObject;        isSelfBlack = GameMain.hall_.GetPlayerId() == nextStepId;        if (GameMain.hall_.GetPlayerId() == nextStepId)        {            //lastPlayer.SetActive(false);            white.SetActive(false);            //firstPlayer.SetActive(true);            black.SetActive(true);            if(!isPlayXianhou)            {                xianhouArmature.animation.Play("newAnimation_2");                GameObject leftheibai = root_.transform.                    Find("PlayerInfor_Left").Find("Icon_Camp").                    Find("ImageIcon").gameObject;                leftheibai.SetActive(true);                leftheibai.GetComponent<Image>().sprite = black.GetComponent<Image>().sprite;                GameObject rightheibai = root_.transform.                    Find("PlayerInfor_Right").Find("Icon_Camp").                    Find("ImageIcon").gameObject;                rightheibai.SetActive(true);                rightheibai.GetComponent<Image>().sprite = white.GetComponent<Image>().sprite;                isPlayXianhou = true;            }        }        else        {            //firstPlayer.SetActive(false);            black.SetActive(false);            //lastPlayer.SetActive(true);            white.SetActive(true);            if (!isPlayXianhou)            {                xianhouArmature.animation.Play("newAnimation");                GameObject leftheibai = root_.transform.                    Find("PlayerInfor_Left").Find("Icon_Camp").                    Find("ImageIcon").gameObject;                leftheibai.SetActive(true);                leftheibai.GetComponent<Image>().sprite = white.GetComponent<Image>().sprite;                GameObject rightheibai = root_.transform.                    Find("PlayerInfor_Right").Find("Icon_Camp").                    Find("ImageIcon").gameObject;                rightheibai.SetActive(true);                rightheibai.GetComponent<Image>().sprite = black.GetComponent<Image>().sprite;                isPlayXianhou = true;            }        }        isfl = true;    }    bool BackStartGame()    {        return true;    }    void InitGameButtons()    {        buttons_ = root_.transform.Find("Buttons").gameObject;        buttons_.SetActive(false);        GameObject takebackBtn = buttons_.transform.Find("ButtonTakeBack").gameObject;        Text taketimes = buttons_.transform.Find("ButtonTakeBack").Find("Text").gameObject.GetComponent<Text>();        taketimes.text = FIR_DataCenter.Instance().GetRoomDataByID(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).backtimes.ToString();        GameObject drawBtn = buttons_.transform.Find("ButtonDraw").gameObject;        GameObject giveupBtn = buttons_.transform.Find("ButtonGiveIn").gameObject;        XPointEvent.AutoAddListener(takebackBtn, OnTakeBack, null);        XPointEvent.AutoAddListener(drawBtn, OnDraw, null);        XPointEvent.AutoAddListener(giveupBtn, OnGiveup, null);    }    void OnTakeBack(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            UMessage giveupMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_PLAYERSURRENDER);            giveupMsg.Add(GameMain.hall_.GetPlayerId());            giveupMsg.Add((byte)3);            HallMain.SendMsgToRoomSer(giveupMsg);            isFirstChess = false;        }    }    void OnDraw(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            UMessage giveupMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_PLAYERSURRENDER);            giveupMsg.Add(GameMain.hall_.GetPlayerId());            giveupMsg.Add((byte)2);            HallMain.SendMsgToRoomSer(giveupMsg);            isFirstChess = false;        }    }    void OnGiveup(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            CCustomDialog.OpenCustomDialogWithTipsID(2116, Giveup);        }    }    void Giveup(object call)    {        if ((int)call == 0)            return;        UMessage giveupMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_PLAYERSURRENDER);        giveupMsg.Add(GameMain.hall_.GetPlayerId());        giveupMsg.Add((byte)1);        HallMain.SendMsgToRoomSer(giveupMsg);    }    void InitCheckBoard()    {        for (int index = 1; index <= 225; index++)        {            string checkname = "Button (" + index.ToString() + ")";            GameObject check = root_.transform.Find("ImageCheckerboard").                Find("ImageGrid").Find(checkname).gameObject;            int sendindex = index;            XPointEvent.AutoAddListener(check, OnStepCheck, sendindex);        }    }    void OnSecondConfirmCheck(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1002);            if (nextStepId != GameMain.hall_.GetPlayerId())            {                CRollTextUI.Instance.AddVerticalRollText("对手回合");                return;            }                            int sendX = ((int)button - 1) / 15;            int sendY = ((int)button - 1) % 15;            UMessage chessmanMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_PLAYERPRESS);            chessmanMsg.Add(GameMain.hall_.GetPlayerId());            chessmanMsg.Add((byte)sendX);            chessmanMsg.Add((byte)sendY);            HallMain.SendMsgToRoomSer(chessmanMsg);        }    }    void OnStepCheck(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1002);            if (isSecondConfirm_)            {                int sendindex = (int)button;                string checkname = "Button (" + sendindex.ToString() + ")";                GameObject secondConfirm = root_.transform.Find("ImageCheckerboard").                    Find("ImageGrid").Find(checkname).gameObject;                GameObject changeBG = root_.transform.Find("ImageCheckerboard").gameObject;                if (isSelfBlack)                {                    secondblack.SetActive(true);                    secondblack.transform.SetParent(changeBG.transform, false);                    secondblack.transform.localPosition = secondConfirm.transform.localPosition;                    GameObject blackbutton = secondblack.transform.Find("ButtonConfirm").gameObject;                    XPointEvent.AutoAddListener(blackbutton, OnSecondConfirmCheck, sendindex);                }                else                {                    secondwhite.SetActive(true);                    secondwhite.transform.SetParent(changeBG.transform, false);                    secondwhite.transform.localPosition = secondConfirm.transform.localPosition;                    GameObject whitebutton = secondwhite.transform.Find("ButtonConfirm").gameObject;                    XPointEvent.AutoAddListener(whitebutton, OnSecondConfirmCheck, sendindex);                }                return;            }            if (nextStepId != GameMain.hall_.GetPlayerId())            {                CRollTextUI.Instance.AddVerticalRollText("对手回合");                return;            }            int sendX = ((int)button - 1) / 15;            int sendY = ((int)button - 1) % 15;            UMessage chessmanMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_PLAYERPRESS);            chessmanMsg.Add(GameMain.hall_.GetPlayerId());            chessmanMsg.Add((byte)sendX);            chessmanMsg.Add((byte)sendY);            HallMain.SendMsgToRoomSer(chessmanMsg);        }    }    bool BackStepCheck(uint _msgType, UMessage msg)    {        bool state = msg.ReadBool();        if (state)        {            return false;        }        uint userid = msg.ReadUInt();        bool isBlack = msg.ReadByte() == (byte)GameCity.ChessSign_Enum.ChessSign_Black;        byte getX = msg.ReadByte();        byte getY = msg.ReadByte();        int index = getX * 15 + getY + 1;        nextStepId = msg.ReadUInt();        GameObject chessman = LoadChessmanResource(index, isBlack);        FIR_AudioDataManager.GetInstance().PlayAudio(1003);        proctime = FIR_DataCenter.Instance().GetRoomDataByID(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).playWaitTime;        secondblack.SetActive(false);        secondwhite.SetActive(false);        return true;    }    bool BackAce(uint _msgType, UMessage msg)    {        byte state = msg.ReadByte();        if (state == 0)        {            //CCustomDialog.OpenCustomConfirmUI(2115);            CRollTextUI.Instance.AddVerticalRollText(2115);        }        isFirstChess = true;        CCustomDialog.CloseCustomWaitUI();        return true;    }    void ClearChilds(GameObject obj)    {        int count = obj.transform.childCount;        for (int index = 0; index < count; index++)        {            GameMain.safeDeleteObj(obj.transform.GetChild(0).gameObject);        }    }    bool BackAgreeTackBack(uint _msgType, UMessage msg)    {        isFirstChess = true;        CCustomDialog.CloseCustomWaitUI();        byte state = msg.ReadByte();        if (state == 0)        {            //CCustomDialog.OpenCustomConfirmUI(2111);            CRollTextUI.Instance.AddVerticalRollText(2111);            return false;        }        nextStepId = msg.ReadUInt();        byte takeBackNumber = msg.ReadByte();                for (int index = 0; index < takeBackNumber; index++)        {            uint userid = msg.ReadUInt();            byte x = msg.ReadByte();            byte y = msg.ReadByte();            int backindex = x * 15 + y + 1;            string checkname = "Button (" + backindex.ToString() + ")";            GameObject chessmanBG = root_.transform.Find("ImageCheckerboard").                    Find("ImageGrid").Find(checkname).gameObject;            ClearChilds(chessmanBG);        }        proctime = FIR_DataCenter.Instance().GetRoomDataByID(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).playWaitTime;                return true;    }    bool BackWaitPeace(uint _msgType, UMessage msg)    {        CCustomDialog.OpenCustomWaitUI("正在等待对方同意....");        return true;    }    bool BackWaitBack(uint _msgType, UMessage msg)    {        takebacktimes -= 1;        Text takeBackTx = buttons_.transform.Find("ButtonTakeBack").Find("Text").gameObject.GetComponent<Text>();        takeBackTx.text = takebacktimes.ToString();        CCustomDialog.OpenCustomWaitUI("正在等待对方同意....");        return true;    }    bool BackIsEnoughMoney(uint _msgType, UMessage msg)    {        uint userid = msg.ReadUInt();        long chip = msg.ReadLong();        string name = "";        if (FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid == userid)            name = FIR_Rooms.GetSingleton().rooms[roomid_].host.name;        else            name = FIR_Rooms.GetSingleton().rooms[roomid_].guest.name;        string[] param = { chip.ToString(), name };        CCustomDialog.OpenCustomConfirmUIWithFormatParam(2102, param);        Reset(roomid_, hostid_);        return true;    }    void IsAgreeDraw(object agree)    {        UMessage agreeMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_ANSWERAPPLYPEACE);        int isagree = (int)agree;        agreeMsg.Add(GameMain.hall_.GetPlayerId());        agreeMsg.Add((byte)isagree);                HallMain.SendMsgToRoomSer(agreeMsg);        isFirstChess = true;    }    bool BackDraw(uint _msgType, UMessage msg)    {        isFirstChess = false;        CCustomDialog.OpenCustomDialogWithTimer(2113,15,IsAgreeDraw);        return true;    }    void IsAgreeTakeBack(object agree)    {        UMessage agreeMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_FIVEINROW_CM_ANSWERBACKMOVE);        agreeMsg.Add(GameMain.hall_.GetPlayerId());        int isagree = (int)agree;        agreeMsg.Add((byte)isagree);        HallMain.SendMsgToRoomSer(agreeMsg);        isFirstChess = true;    }    bool BackTakeBack(uint _msgType, UMessage msg)    {        isFirstChess = false;        CCustomDialog.OpenCustomDialogWithTimer(2108,15, IsAgreeTakeBack);                return true;    }    uint winUserid_ = 0;    bool BackResult(uint _msgType, UMessage msg)    {        winUserid_ = msg.ReadUInt();        bool isfive = msg.ReadBool();        long money = msg.ReadLong();        long othermoney = msg.ReadLong();                //GameMain.hall_.GetPlayerData().SetCoin(money);        if (FIR_Rooms.GetSingleton().rooms[roomid_].host != null)        {            FIR_Rooms.GetSingleton().rooms[roomid_].host.money = money;//             if (GameMain.hall_.GetPlayerId() == FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid)//                 GameMain.hall_.GetPlayerData().SetCoin(money);//             else//                 GameMain.hall_.GetPlayerData().SetCoin(othermoney);        }        if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)        {            FIR_Rooms.GetSingleton().rooms[roomid_].guest.money = othermoney;//             if (GameMain.hall_.GetPlayerId() == FIR_Rooms.GetSingleton().rooms[roomid_].guest.playerid)//                 GameMain.hall_.GetPlayerData().SetCoin(othermoney);//             else//                 GameMain.hall_.GetPlayerData().SetCoin(money);        }        if(GameMain.hall_.GetPlayerId() == winUserid_)            FIR_AudioDataManager.GetInstance().PlayAudio(1004);        else            FIR_AudioDataManager.GetInstance().PlayAudio(1005);        ShowResult(isfive);        CCustomDialog.CloseCustomWaitUI();        return true;    }    void ShowResult(bool isfive)    {        if (exitRoomid != 0 && room_.activeSelf)            return;        resultPanel_.SetActive(true);        resultPanel_.transform.Find("ResultBG").gameObject.SetActive(false);        isFirstChess = false;        isGameStart_ = false;        //wuziArmature.animation.Play("newAnimation");        //wuziArmature.AddEventListener(EventObject.COMPLETE, OnWuzilianzhu);        if (isfive)        {            wuziArmature.animation.Play("newAnimation");            wuziArmature.AddEventListener(EventObject.COMPLETE, OnWuzilianzhu);        }        else        {            InitResultPanel();        }    }    void OnWuzilianzhu(string _type, EventObject eventObject)    {        switch (_type)        {            case EventObject.COMPLETE:                if (eventObject.animationState.name == "newAnimation")                {                    InitResultPanel();                }                break;        }    }    void InitResultPanel()    {        GameObject resultbg = resultPanel_.transform.Find("ResultBG").gameObject;        resultbg.SetActive(true);        Image lefticon = resultPanel_.transform.Find("ResultBG").            Find("Left").Find("HeadFram").Find("Image_Mask").            Find("Image_Head").gameObject.GetComponent<Image>();        Image righticon = resultPanel_.transform.Find("ResultBG").            Find("Right").Find("HeadFram").Find("Image_Mask").            Find("Image_Head").gameObject.GetComponent<Image>();        Text leftname = resultPanel_.transform.Find("ResultBG").            Find("Left").Find("TextName").gameObject.GetComponent<Text>();        Text rightname = resultPanel_.transform.Find("ResultBG").            Find("Right").Find("TextName").gameObject.GetComponent<Text>();        Text leftcoin = resultPanel_.transform.Find("ResultBG").            Find("Left").Find("Image_coinframe").Find("Text_Coin").            gameObject.GetComponent<Text>();        Text rightcoin = resultPanel_.transform.Find("ResultBG").            Find("Right").Find("Image_coinframe").Find("Text_Coin").            gameObject.GetComponent<Text>();        GameObject lefthosticon = resultPanel_.transform.Find("ResultBG").            Find("Left").Find("Icon_Host").gameObject;        GameObject righthosticon = resultPanel_.transform.Find("ResultBG").            Find("Right").Find("Icon_Host").gameObject;        GameObject leftwin = resultPanel_.transform.Find("ResultBG").            Find("Left").Find("ImageWin").gameObject;        leftwin.SetActive(false);        GameObject rightwin = resultPanel_.transform.Find("ResultBG").            Find("Right").Find("ImageWin").gameObject;        rightwin.SetActive(false);        long bet = currentBet_;        if (winUserid_ == 0)            bet = 0;        if (GameMain.hall_.GetPlayerId() == FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid)        {            lefticon.sprite = GameMain.hall_.GetIcon(FIR_Rooms.GetSingleton().rooms[roomid_].host.url,                 FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid, (int)FIR_Rooms.GetSingleton().rooms[roomid_].host.icon);            leftname.text = FIR_Rooms.GetSingleton().rooms[roomid_].host.name;            if (winUserid_ == FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid)            {                leftcoin.text = bet.ToString();                leftwin.SetActive(true);                lefthosticon.SetActive(true);                winArmature.gameObject.SetActive(true);                pingArmature.gameObject.SetActive(false);                lostArmature.gameObject.SetActive(false);                PlayAnimationWithEvent(winArmature);            }            else            {                leftwin.SetActive(false);                if (bet != 0)                {                    winArmature.gameObject.SetActive(false);                    pingArmature.gameObject.SetActive(false);                    lostArmature.gameObject.SetActive(true);                    lostArmature.animation.Play("newAnimation");                }                else                {                    winArmature.gameObject.SetActive(false);                    pingArmature.gameObject.SetActive(true);                    lostArmature.gameObject.SetActive(false);                    pingArmature.animation.Play("newAnimation");                }                                    leftcoin.text = (-bet).ToString();            }            RoomPlayerInfo guestdata = null;            if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)                guestdata = FIR_Rooms.GetSingleton().rooms[roomid_].guest;            else                guestdata = tempRoomPlayerData_;            if(guestdata != null)            {                righticon.sprite = GameMain.hall_.GetIcon(guestdata.url, guestdata.playerid, (int)guestdata.icon);                rightname.text = guestdata.name;                if (winUserid_ == guestdata.playerid)                {                    rightcoin.text = bet.ToString();                    rightwin.SetActive(true);                    righthosticon.SetActive(true);                }                else                {                    rightwin.SetActive(false);                    rightcoin.text = (-bet).ToString();                }             }        }        else        {            righticon.sprite = GameMain.hall_.GetIcon(FIR_Rooms.GetSingleton().rooms[roomid_].host.url,                 FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid, (int)FIR_Rooms.GetSingleton().rooms[roomid_].host.icon);            rightname.text = FIR_Rooms.GetSingleton().rooms[roomid_].host.name;            if (winUserid_ == FIR_Rooms.GetSingleton().rooms[roomid_].host.playerid)            {                rightcoin.text = bet.ToString();                rightwin.SetActive(true);                righthosticon.SetActive(true);            }            else            {                rightwin.SetActive(false);                rightcoin.text = (-bet).ToString();            }            RoomPlayerInfo guestdata = null;            if (FIR_Rooms.GetSingleton().rooms[roomid_].guest != null)                guestdata = FIR_Rooms.GetSingleton().rooms[roomid_].guest;            else                guestdata = tempRoomPlayerData_;            if(guestdata != null)            {                lefticon.sprite = GameMain.hall_.GetIcon(guestdata.url, guestdata.playerid, (int)guestdata.icon);                leftname.text = guestdata.name;                if (winUserid_ == guestdata.playerid)                {                    leftcoin.text = bet.ToString();                    leftwin.SetActive(true);                    lefthosticon.SetActive(true);                    winArmature.gameObject.SetActive(true);                    pingArmature.gameObject.SetActive(false);                    lostArmature.gameObject.SetActive(false);                    PlayAnimationWithEvent(winArmature);                }                else                {                    leftwin.SetActive(false);                    leftcoin.text = (-bet).ToString();                    if (bet != 0)                    {                        winArmature.gameObject.SetActive(false);                        pingArmature.gameObject.SetActive(false);                        lostArmature.gameObject.SetActive(true);                        lostArmature.animation.Play("newAnimation");                    }                    else                    {                        winArmature.gameObject.SetActive(false);                        pingArmature.gameObject.SetActive(true);                        lostArmature.gameObject.SetActive(false);                        pingArmature.animation.Play("newAnimation");                    }                }            }         }    }    void OnCloseResult(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            resultPanel_.SetActive(false);            resultPanel_.transform.Find("ResultBG").gameObject.SetActive(false);            GameObject readyBtn = root_.transform.Find("Ready").Find("ReadyBG").                Find("Button_Ready").gameObject;            GameObject cancelReadyBtn = root_.transform.Find("Ready").Find("ReadyBG").                Find("Button_Cancel").gameObject;            readyBtn.SetActive(true);            cancelReadyBtn.SetActive(false);            Reset(roomid_, hostid_);                    }    }    //点击微信分享按钮    void OnWeChatShare(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            Player.ShareImageToWechat();        }    }    void PlayAnimationWithEvent(UnityArmatureComponent armature)    {        armature.animation.Play("jiesuan");        armature.AddEventListener(EventObject.COMPLETE, AnimationComplete);    }    void AnimationComplete(string _type, EventObject eventObject)    {        switch (_type)        {            case EventObject.COMPLETE:                if (eventObject.animationState.name == "jiesuan")                {                    eventObject.armature.animation.Play("jiesuan_idle");                }                break;        }    }    void LoadResultResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_FiveInRow);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        GameObject canvas = GameObject.Find("Canvas/Root");        UnityEngine.Object obj0 = bundle.LoadAsset("Five_Result");        resultPanel_ = (GameObject)GameMain.instantiate(obj0);        resultPanel_.transform.SetParent(canvas.transform, false);        resultPanel_.SetActive(false);    }    GameObject secondblack;    GameObject secondwhite;    void LoadSecondResouce()    {        if (secondblack != null && secondwhite != null)            return;        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_FiveInRow);        if (gamedata == null)            return;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return;        UnityEngine.Object black = bundle.LoadAsset("Chessman_Black");        UnityEngine.Object white = bundle.LoadAsset("Chessman_White");        secondblack = (GameObject)GameMain.instantiate(black);        secondwhite = (GameObject)GameMain.instantiate(white);        secondblack.transform.Find("ButtonConfirm").gameObject.SetActive(true);        secondwhite.transform.Find("ButtonConfirm").gameObject.SetActive(true);    }    GameObject lastring;    GameObject LoadChessmanResource(int index, bool borw)    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_FiveInRow);        if (gamedata == null)            return null;        //AssetBundleManager.LoadAssetBundleFromLocal(GameDefine.AssetBundleSavePath, gamedata.ResourceABName);        AssetBundle bundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (bundle == null)            return null;        string checkname = "Button (" + index.ToString() + ")";        GameObject chessmanBG = root_.transform.Find("ImageCheckerboard").                Find("ImageGrid").Find(checkname).gameObject;        UnityEngine.Object obj0 = null;        if (borw)            obj0 = bundle.LoadAsset("Chessman_Black");        else            obj0 = bundle.LoadAsset("Chessman_White");        GameObject result = (GameObject)GameMain.instantiate(obj0);        result.transform.SetParent(chessmanBG.transform, false);        if (lastring != null)            lastring.SetActive(false);        lastring = result.transform.Find("ImageOutLine").gameObject;        lastring.SetActive(true);        return result;    }    float proctime;    void ResetPlayerTime()    {        proctime = FIR_DataCenter.Instance().GetRoomDataByID(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).playWaitTime;        GameObject leftTimeProc = root_.transform.Find("PlayerInfor_Left").            Find("Head").Find("HeadOutline").Find("OutlineCountdown").gameObject;        Text legtTimeText = leftTimeProc.transform.Find("Time_BG").            Find("Text").gameObject.GetComponent<Text>();        GameObject rightTimeProc = root_.transform.Find("PlayerInfor_Right").            Find("Head").Find("HeadOutline").Find("OutlineCountdown").gameObject;        Text rightTimeText = rightTimeProc.transform.Find("Time_BG").            Find("Text").gameObject.GetComponent<Text>();        leftTimeProc.SetActive(false);        rightTimeProc.SetActive(false);        rightTimeText.text = "";        rightTimeProc.GetComponent<Image>().fillAmount = 0.0f;        legtTimeText.text = "";        leftTimeProc.GetComponent<Image>().fillAmount = 0.0f;        isPlayTimeOut = false;    }    bool isPlayTimeOut;    void UpdatePlayerTime(float time)    {        proctime -= time;        if (proctime <= 0.0f)        {            proctime = 0.0f;            ResetPlayerTime();            return;        }        if(proctime <= 10.0f && !isPlayTimeOut)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1006);            isPlayTimeOut = true;        }        GameObject leftTimeProc = root_.transform.Find("PlayerInfor_Left").            Find("Head").Find("HeadOutline").Find("OutlineCountdown").gameObject;        Text legtTimeText = leftTimeProc.transform.Find("Time_BG").            Find("Text").gameObject.GetComponent<Text>();                GameObject rightTimeProc = root_.transform.Find("PlayerInfor_Right").            Find("Head").Find("HeadOutline").Find("OutlineCountdown").gameObject;        Text rightTimeText = rightTimeProc.transform.Find("Time_BG").            Find("Text").gameObject.GetComponent<Text>();        if (GameMain.hall_.GetPlayerId() == nextStepId)        {            leftTimeProc.SetActive(true);            rightTimeProc.SetActive(false);            rightTimeText.text = "";            rightTimeProc.GetComponent<Image>().fillAmount = 0.0f;            legtTimeText.text = ((int)proctime).ToString();            leftTimeProc.GetComponent<Image>().fillAmount = proctime / FIR_DataCenter.Instance().GetRoomDataByID(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).playWaitTime; ;        }        else        {            leftTimeProc.SetActive(false);            rightTimeProc.SetActive(true);            rightTimeText.text = ((int)proctime).ToString();            rightTimeProc.GetComponent<Image>().fillAmount = proctime / FIR_DataCenter.Instance().GetRoomDataByID(((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_).playWaitTime; ;            legtTimeText.text = "";            leftTimeProc.GetComponent<Image>().fillAmount = 0.0f;        }    }    void OnInvate(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerUp)        {            FIR_AudioDataManager.GetInstance().PlayAudio(1001);            InvateMsg im = new InvateMsg();            im.playerid = GameMain.hall_.GetPlayerId();            im.gameid = (byte)GameKind_Enum.GameKind_FiveInRow;            im.level = ((CGame_FiveInRow)GameMain.hall_.GameBaseObj).currentLevel_;            im.roomid = roomid_;            im.roomNum = FIR_Rooms.GetSingleton().roomNum;            GameMain.hall_.ResetInvatePanel(im);        }    }}