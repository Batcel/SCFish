using System.Collections.Generic;using UnityEngine;using XLua;using USocket.Messages;public class FIRChipsLimitData{    public long inLimit = 0;    public long outLimit = 0;    public long roomPay = 0;    public long min = 0;    public long two = 0;    public long three = 0;    public long four = 0;    public long five = 0;    public long max = 0;}public class RoomDataFromServer{    public RoomDataFromServer()    {        roompay = 0;        backtimes = 0;        defaultBet = 0;        playWaitTime = 0.0f;        backAndDrawTime = 0.0f;    }    public int roompay;             //房费    public int backtimes;           //悔棋次数    public int defaultBet;          //默认赌金    public float playWaitTime;      //每次下棋等待时间    public float backAndDrawTime;   //悔棋求和等待时间}[Hotfix]public class FIR_ChipsLimitData{    private Dictionary<int, FIRChipsLimitData> limitDict;    public FIR_ChipsLimitData()    {        limitDict = new Dictionary<int, FIRChipsLimitData>();        LoadGameDataFile();    }    /// <summary>    /// 读取五子棋押注限制数据表    /// </summary>    public void LoadGameDataFile()    {        List<string[]> strList;        CReadCsvBase.ReaderCsvDataFromAB(GameDefine.CsvAssetbundleName, GameDefine.FiveChipFileName, out strList);        int columnCount = strList.Count;        limitDict.Clear();        for (int i = 2; i < columnCount; i++)        {            FIRChipsLimitData limitdata = new FIRChipsLimitData();            long.TryParse(strList[i][0], out limitdata.inLimit);            long.TryParse(strList[i][1], out limitdata.outLimit);            long.TryParse(strList[i][2], out limitdata.roomPay);            long.TryParse(strList[i][3], out limitdata.min);            long.TryParse(strList[i][4], out limitdata.two);            long.TryParse(strList[i][5], out limitdata.three);            long.TryParse(strList[i][6], out limitdata.four);            long.TryParse(strList[i][7], out limitdata.five);            long.TryParse(strList[i][7], out limitdata.max);            limitDict.Add(i - 1, limitdata);        }    }    /// <summary>    /// 读取五子棋押注限制数据表    /// </summary>    /// <param name="itemId"></param>    /// <returns></returns>    public FIRChipsLimitData GetLimitData(int level)    {        if (limitDict.ContainsKey(level))            return limitDict[level];        return null;    }    public int GetDataLength()    {        return limitDict.Count;    }}[Hotfix]public class FIR_DataCenter{    static FIR_DataCenter instance;    public FIR_ChipsLimitData fivechipsdata;    public List<RoomDataFromServer> roomdatas;    FIR_DataCenter()    {        fivechipsdata = new FIR_ChipsLimitData();        roomdatas = new List<RoomDataFromServer>();    }    public static FIR_DataCenter Instance()    {        if (instance == null)            instance = new FIR_DataCenter();        return instance;    }    public void ReadRoomDataFromServer(UMessage msg)    {        byte length = msg.ReadByte();        roomdatas.Clear();        for (int index = 0; index < length; index++)        {            RoomDataFromServer rdfs = new RoomDataFromServer();            rdfs.roompay = msg.ReadInt();            rdfs.backtimes = msg.ReadInt();            rdfs.defaultBet = msg.ReadInt();            rdfs.playWaitTime = msg.ReadSingle();            rdfs.backAndDrawTime = msg.ReadSingle();            roomdatas.Add(rdfs);        }    }    public RoomDataFromServer GetRoomDataByID(int level)    {        return roomdatas[level - 1];    }}public class FIR_AudioDataManager{    public FIR_AudioDataManager()    {        dataList = new Dictionary<int, FIR_AudioData>();    }    public static FIR_AudioDataManager GetInstance()    {        if (instance_ == null)        {            instance_ = new FIR_AudioDataManager();            instance_.ReadAudioCsvData();        }        return instance_;    }    public void ReadAudioCsvData()    {        List<string[]> strList;        CReadCsvBase.ReaderCsvDataFromAB(GameDefine.CsvAssetbundleName, GameDefine.FiveInRowAudioFileName, out strList);        int columnCount = strList.Count;        for (int i = 2; i < columnCount; i++)        {            FIR_AudioData data = new FIR_AudioData();            int.TryParse(strList[i][0], out data.audioID);            data.audioName = strList[i][1];            dataList.Add(data.audioID, data);        }    }    public void PlayAudio(int id, bool isSound = true)    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((byte)GameKind_Enum.GameKind_FiveInRow);        if (gamedata != null)        {            if (isSound)                AudioManager.Instance.PlaySound(gamedata.ResourceABName, dataList[id].audioName);            else                AudioManager.Instance.PlayBGMusic(gamedata.ResourceABName, dataList[id].audioName);        }        else            Debug.Log("音效资源" + dataList[id].audioName + "加载失败");    }    private static FIR_AudioDataManager instance_;    public Dictionary<int, FIR_AudioData> dataList;}public class FIR_AudioData{    public int audioID;    public string audioName;}