using DG.Tweening;using System;using System.Collections;using System.Collections.Generic;using System.Linq;using System.Text;using UnityEngine;using UnityEngine.UI;using USocket.Messages;using XLua;// 房间状态[LuaCallCSharp]public enum HundredRoomState_Enum{    HundredRoomState_Init = 0,    HundredRoomState_WaitBoss,    HundredRoomState_BeginPoker,    //开始的时候发一张牌    HundredRoomState_ChipIn,    HundredRoomState_DealPoker,     //发四张牌    HundredRoomState_GameWait,  //发完牌之后 给玩家看牌的时间    HundredRoomState_Result,    HundredRoomState_End,    HundredRoomState_Max};public enum HundredPlayerType{    HPT_Red,    HPT_Blue,    HPT_Num}[Hotfix]public class BH_RoomInfo{    public uint m_iRoomID;    public long m_nLocalCoin;    public byte m_nRoomLevel;    public HundredRoomState_Enum m_eRoomState;    public float m_fCountTime;    public float m_fStateTime;    public uint m_nDealerUserId;    public List<byte>[] m_vecPoker = new List<byte>[(int)HundredPlayerType.HPT_Num];    CGame_BullHundred m_BHGameBase;    Transform m_PokerSource;    Transform m_DealerTfm;    Transform[] m_PokerTfm = new Transform[(int)HundredPlayerType.HPT_Num];    Transform m_OtherSeatTfm;    Transform m_LocalSeatTfm;    const byte CardMax = 5;    public const byte VipNumMax = 4;    public const byte LocalSeat = 100;    public const byte OtherPlayerSeat = 111;    public const byte DealerSeat = 200;    public const byte PokerTypeNum = 16;    public BH_RoomInfo(CGame_BullHundred bhGame)    {        Init(bhGame);    }    public void Init(CGame_BullHundred bhGame)    {        m_BHGameBase = bhGame;        m_iRoomID = 0;        m_eRoomState = HundredRoomState_Enum.HundredRoomState_Init;        m_fCountTime = m_fStateTime = 0.0f;        m_PokerSource = m_BHGameBase.MainUITfm.Find("Middle/poker_paidui");        Transform tfm = m_BHGameBase.MainUITfm.Find("Middle/poker_red/pokergroup");        tfm.gameObject.SetActive(true);        m_PokerTfm[(int)HundredPlayerType.HPT_Red] = tfm;        tfm = m_BHGameBase.MainUITfm.Find("Middle/poker_blue/pokergroup");        tfm.gameObject.SetActive(true);        m_PokerTfm[(int)HundredPlayerType.HPT_Blue] = tfm;        for (int i = 0; i < m_vecPoker.Length; i++)            m_vecPoker[i] = new List<byte>();        UpdatePoker();        m_DealerTfm = m_BHGameBase.MainUITfm.Find("Top/DelaerInfo");        ShowDealerInfo(false);        m_OtherSeatTfm = m_BHGameBase.MainUITfm.Find("Middle/Seat");        m_LocalSeatTfm = m_BHGameBase.MainUITfm.Find("Bottom/PlayerInfo/Head/HeadMask");    }    public void OnTick()    {        if (m_fCountTime > 0.0f)            m_fCountTime -= Time.unscaledDeltaTime;    }    public void OnStateChange(HundredRoomState_Enum state, UMessage _ms)    {        if (m_eRoomState == state)            return;        DebugLog.Log(string.Format("room state change: ({0}->{1})", m_eRoomState, state));        OnQuitState(m_eRoomState);        m_eRoomState = state;        OnEnterState(m_eRoomState, _ms);    }    void OnQuitState(HundredRoomState_Enum state)    {        m_BHGameBase.OnQuitState(state);    }    void OnEnterState(HundredRoomState_Enum state, UMessage _ms)    {        if(state == HundredRoomState_Enum.HundredRoomState_ChipIn)            m_fCountTime = m_fStateTime = BullHundred_Data.GetInstance().m_fChipInTime;        else            m_fCountTime = 0.0f;        m_BHGameBase.OnEnterState(state, _ms);    }    public void OnEnd()    {        m_fCountTime = 0.0f;        for (int i = 0; i < m_vecPoker.Length; i++)            m_vecPoker[i].Clear();        UpdatePoker();        m_PokerSource.gameObject.SetActive(false);    }    public void ShowDealerInfo(bool show, long coin = 0, uint faceId = 0, string url = "", uint userid = 0, string name = "")    {        m_DealerTfm.gameObject.SetActive(show);        if (show)        {            Image img = m_DealerTfm.Find("Head/HeadMask/ImageHead").GetComponent<Image>();            img.sprite = GameMain.hall_.GetIcon(url, userid, (int)faceId);            if (!string.IsNullOrEmpty(name))            {                Text text = m_DealerTfm.Find("TextNameZJ/TextName").GetComponent<Text>();                text.text = name;            }            m_DealerTfm.Find("Image_coinframe/Text_Coin").GetComponent<Text>().text = coin.ToString();        }    }    public Transform GetOtherSeatTfm(byte seat)    {        if (seat == OtherPlayerSeat)            return m_OtherSeatTfm.Find("Seat_Otherplayers");        else if (seat == LocalSeat)            return m_LocalSeatTfm;        else if (seat == DealerSeat)            return m_DealerTfm.Find("Head/HeadMask");        else            return m_OtherSeatTfm.GetChild(seat);    }    public void MoveChipsToPlayer(Transform parentTfm, byte seat)    {        if(parentTfm.childCount > 0)            CustomAudioDataManager.GetInstance().PlayAudio(1007);        Transform targetTfm = GetOtherSeatTfm(seat);        Vector2 target = targetTfm.position;        foreach (Transform chip in parentTfm)        {            if (seat == LocalSeat && chip.tag == "Untagged")                continue;            if (seat == OtherPlayerSeat && chip.tag == "Player")                continue;            Tweener t = chip.DOMove(target, 0.5f);            t.OnComplete(() =>            {                GameObject.Destroy(chip.gameObject);            });        }    }    public void ShowVipInfo(bool show, byte seat, long coin = 0, uint faceId = 0, string url = "", uint userid = 0, string name = "")    {        if (seat >= VipNumMax)            return;        Transform tfm = m_OtherSeatTfm.Find("Seat_" + (seat+1).ToString());        if(show)        {            tfm.GetChild(0).gameObject.SetActive(false);            tfm = tfm.GetChild(1);            tfm.gameObject.SetActive(true);
            tfm.Find("HeadMask/ImageHead").GetComponent<Image>().sprite= GameMain.hall_.GetIcon(url, userid, (int)faceId);            if (!string.IsNullOrEmpty(name))                tfm.Find("TextName").GetComponent<Text>().text = name;            if (coin != 0)                tfm.Find("Image_coinframe/Text_Coin").GetComponent<Text>().text = coin.ToString();        }        else        {            tfm.GetChild(0).gameObject.SetActive(true);            tfm.GetChild(1).gameObject.SetActive(false);        }    }    public void UpdatePoker()    {        Sprite sprite;        GameObject go;        Sprite spriteBack = m_BHGameBase.BullHundredAssetBundle.LoadAsset<Sprite>("puke_back");        int count, index;        for (int k = 0; k < m_vecPoker.Length; k++)        {            count = m_vecPoker[k].Count;            index = 0;            foreach(Transform tfm in m_PokerTfm[k])
            {
                go = tfm.gameObject;

                if (index < CardMax && count > 0)
                {
                    go.SetActive(true);                    sprite = (count > index) ? m_BHGameBase.BullHundredAssetBundle                        .LoadAsset<Sprite>(GameCommon.GetPokerMat(m_vecPoker[k][index])) : spriteBack;                    go.GetComponent<Image>().sprite = sprite;                }
                else if (index <= CardMax)
                    go.SetActive(false); 
                else
                    GameObject.Destroy(go);
                index++;
            }        }    }    public IEnumerator SendPoker()    {        Sprite sprite;        GameObject go;        Vector3 target;        float flyTime = 0.1f;        float scaleTime = 0.05f;        Sprite spriteBack = m_BHGameBase.BullHundredAssetBundle.LoadAsset<Sprite>("puke_back");        m_PokerSource.gameObject.SetActive(true);        GameObject obj = (GameObject)m_BHGameBase.BullHundredAssetBundle.LoadAsset("Image_poker");        GameObject tempObj = GameMain.instantiate(obj) as GameObject;

        for (int i = 0; i < CardMax; i++)        {            for (int j = 0; j < m_vecPoker.Length; j++)            {                try                {
                    go = m_PokerTfm[j].GetChild(i).gameObject;
                }                catch                {
                    continue;
                }
                go.GetComponent<Image>().sprite = spriteBack;
                target = go.transform.localPosition;
                tempObj.SetActive(true);
                tempObj.transform.SetParent(m_PokerTfm[j], false);
                tempObj.transform.position = m_PokerSource.position;
                tempObj.transform.DOLocalMove(target, flyTime);

                yield return new WaitForSecondsRealtime(flyTime);

                go.SetActive(true);
                tempObj.SetActive(false);

                CustomAudioDataManager.GetInstance().PlayAudio(1003);

                if (m_vecPoker[j].Count > i)
                {
                    go.transform.DOScaleX(0.1f, scaleTime);

                    yield return new WaitForSecondsRealtime(scaleTime);

                    sprite = m_BHGameBase.BullHundredAssetBundle.LoadAsset<Sprite>(GameCommon.GetPokerMat(m_vecPoker[j][i]));
                    go.GetComponent<Image>().sprite = sprite;
                    go.transform.DOScaleX(1f, scaleTime);

                    yield return new WaitForSecondsRealtime(scaleTime);
                }
            }        }

        GameObject.DestroyImmediate(tempObj);
        m_PokerSource.gameObject.SetActive(false);    }    public IEnumerator OpenPoker(byte[] pokerType)    {        Sprite sprite;        GameObject go;        float scaleTime = 0.05f;        for (int j = 0; j < m_vecPoker.Length; j++)        {            for (int i = 1; i < CardMax; i++)            {                CustomAudioDataManager.GetInstance().PlayAudio(1003);                go = m_PokerTfm[j].GetChild(i).gameObject;                go.transform.DOScaleX(0.1f, scaleTime);                yield return new WaitForSecondsRealtime(scaleTime);                sprite = m_BHGameBase.BullHundredAssetBundle.LoadAsset<Sprite>(GameCommon.GetPokerMat(m_vecPoker[j][i]));                go.GetComponent<Image>().sprite = sprite;                go.transform.DOScaleX(1f, scaleTime);                yield return new WaitForSecondsRealtime(scaleTime);            }            ShowPokerType((HundredPlayerType)j, pokerType[j]);            yield return new WaitForSecondsRealtime(1.0f);        }    }    void ShowPokerType(HundredPlayerType playerType, byte res)    {        Transform tfm = m_PokerTfm[(int)playerType];        tfm.GetChild(CardMax).gameObject.SetActive(true);        BH_AwardData data = BullHundred_Data.GetInstance().m_AwardData[res];        tfm.GetComponentInChildren<Text>().text = data.m_strName;        CustomAudioDataManager.GetInstance().PlayAudio(1100 + res);    }    public void ShowPlayerNum(int num)    {        m_OtherSeatTfm.Find("Seat_Otherplayers")            .GetComponentInChildren<Text>().text = num.ToString();    }}