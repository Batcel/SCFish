//#define HAVE_LOBBYusing DG.Tweening;using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using USocket.Messages;using XLua;[Hotfix]public class CGame_BullHundred : CGameBase{#if HAVE_LOBBY    public Transform LobbyUITfm { get; private set; }#endif    public Transform MainUITfm { get; private set; }    public Transform ResultUITfm { get; private set; }    public AssetBundle BullHundredAssetBundle { get; private set; }    public CustomCountdownImgMgr CCIMgr { get; private set; }    public Canvas GameCanvas { get; private set; }    public BH_RoomInfo RoomInfo { get; private set; }    byte m_nCurChipIndex = 0;    byte m_nDealerState = 1;    byte m_nLocalSeat = BH_RoomInfo.LocalSeat;    Toggle m_AutoChipToggle;    Button[] m_ChipsBtns;    Button m_ContinuBtn;    Button m_ReqDealerBtn;    Button[] m_GameBtns;    Text m_ChipCountText;    Transform m_CountdownTfm;    Transform m_ChipPointTfm;    bool m_bChiped = false;    Dictionary<byte, long> m_LastChips = new Dictionary<byte, long>();    Dictionary<byte, long> m_CurrentChips = new Dictionary<byte, long>();    List<DragonBones.UnityArmatureComponent> m_UIAnimList = new List<DragonBones.UnityArmatureComponent>();    GameObject m_CoinEffect;    public CGame_BullHundred() : base(GameKind_Enum.GameKind_BullHundred)    {    }    public override void Initialization()    {        base.Initialization();        LoadResource();        InitMsgHandle();        CustomAudioDataManager.GetInstance().ReadAudioCsvData((byte)GameKind_Enum.GameKind_BullHundred, "GameNiu2AudioCsv");        CustomAudioDataManager.GetInstance().PlayAudio(1001, false);        CCIMgr = new CustomCountdownImgMgr();        RoomInfo = new BH_RoomInfo(this);#if !HAVE_LOBBY        OnClickLevelBtn();#endif    }    public override void ProcessTick()    {        base.ProcessTick();        CCIMgr.UpdateTimeImage();        RoomInfo.OnTick();    }    void InitMsgHandle()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_CHOOSElEVEL, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_ENTERROOM, HandleEnterRoom);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_ROOMSTATE, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_BOSSCHANGE, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_BOSSDOWN, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_APPLYBEBOSS, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_APPLYBOSSLIST, HandleDealerList);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_CHIPIN, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_PUBLISHCHIPIN, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_DEALPOKER, HandleDealPoker);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_APPLYSITVIP, HandleVipSit);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_FORCELETSTAND, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_PUBLISHRESULT, HandleGameResult);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_APPLYLEAVEROOM, HandleGameNetMsg);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_PUBLISHROLENUM, HandleGameNetMsg);    }    public override bool HandleGameNetMsg(uint _msgType, UMessage _ms)    {        GameCity.EMSG_ENUM eMsg = (GameCity.EMSG_ENUM)_msgType;        switch (eMsg)        {            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_CHOOSElEVEL:                {                    byte level = _ms.ReadByte();                    byte errorCode = _ms.ReadByte();                    RoomData rd = BlackJack_Data.GetInstance().m_RoomData[level];                    CCustomDialog.OpenCustomConfirmUIWithFormatParam(2214, rd.m_nMinInCoin);                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_ROOMSTATE:                {                    byte state = _ms.ReadByte();                    OnStateChange((HundredRoomState_Enum)state, _ms);                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_BOSSCHANGE:                {                    uint userId = _ms.ReadUInt();                    uint faceid = _ms.ReadUInt();                    string url = _ms.ReadString();                    long coin = _ms.ReadLong();                    string name = _ms.ReadString();                    RoomInfo.ShowDealerInfo(true, coin, faceid, url, userId, name);                    if (userId == GameMain.hall_.GetPlayerId())                    {                        OnReqDealerStateChange(3);//变成申请下庄                        ResetAutoChip();                        UpdatePlayingUI(false);                        CustomAudioDataManager.GetInstance().PlayAudio(1004);                    }                    RoomInfo.m_nDealerUserId = userId;                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_BOSSDOWN:                {                    uint userId = _ms.ReadUInt();                    string name = _ms.ReadString();                    RoomInfo.ShowDealerInfo(false);                    RoomInfo.m_nDealerUserId = 0;                    byte reason = _ms.ReadByte();                    if (userId == GameMain.hall_.GetPlayerId())                    {                        OnReqDealerStateChange(1);//变成申请上庄                        if(reason == 1)                            CCustomDialog.OpenCustomConfirmUI(2409);                        else if(reason == 2)                            CCustomDialog.OpenCustomConfirmUI(2410);                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_FORCELETSTAND:                {                    uint userId = _ms.ReadUInt();                    byte seat = _ms.ReadByte();                    string name = _ms.ReadString();                    RoomInfo.ShowVipInfo(false, seat);                    if (userId == GameMain.hall_.GetPlayerId())                    {                        m_nLocalSeat = BH_RoomInfo.LocalSeat;                        CCustomDialog.OpenCustomConfirmUI(2412);                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_CHIPIN:                {                    byte res = _ms.ReadByte();                    if(res == 0)                    {                        long selfCoin = _ms.ReadLong();                        long chipCoin = _ms.ReadLong();                        long totalCoin = _ms.ReadLong();                        byte nSign = _ms.ReadByte();                        byte nChipIndex = _ms.ReadByte();                        byte num = _ms.ReadByte();                        bool bContinue = _ms.ReadBool();                        GameMain.hall_.GetPlayerData().SetDiamond((uint)selfCoin);                        ResetGameUI();                        UpdateGameBtn(nSign, totalCoin, chipCoin);                        m_CurrentChips[nSign] = chipCoin;                        m_bChiped = true;                        m_AutoChipToggle.interactable = true;                        MoveChipsToGameBtn(nChipIndex, nSign, BH_RoomInfo.LocalSeat, BH_RoomInfo.LocalSeat, num);                    }                    else //error                    {                        uint strId;                        if (res == 1)                            strId = 2411;                        else if (res == 3)                            strId = 2405;                        else if (res == 5)                        {                            strId = 2406;                            ResetAutoChip();                        }                        else if (res == 7)                            strId = 2407;                        else                            strId = 2404;                        CCustomDialog.OpenCustomConfirmUI(strId);                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_PUBLISHCHIPIN:                {                    byte nSign = _ms.ReadByte();                    byte nSeat = _ms.ReadByte();                    long totalCoin = _ms.ReadLong();                    long leftCoin = _ms.ReadLong();                    byte nChipIndex = _ms.ReadByte();                    byte num = _ms.ReadByte();                    if (nSeat < BH_RoomInfo.VipNumMax)                        RoomInfo.ShowVipInfo(true, nSeat, leftCoin);                    UpdateGameBtn(nSign, totalCoin);                    MoveChipsToGameBtn(nChipIndex, nSign, nSeat, BH_RoomInfo.OtherPlayerSeat, num);                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_APPLYBEBOSS:                {                    byte state = _ms.ReadByte();                    byte result = _ms.ReadByte();                    if (result == 0)                    {                        DebugLog.Log("Req dealer success!! state:" + state);                        if (state % 2 == 0)                            state -= 1;                        else                            state += 1;                        OnReqDealerStateChange(state);                    }                    else                    {                        //1 不在房间 2 本人是坐庄 3 已经在申请坐庄列表里了 4 钱不够                        if (result == 4)                        {                            BH_RoomData rd = BullHundred_Data.GetInstance().m_RoomData[RoomInfo.m_nRoomLevel - 1];                            CCustomDialog.OpenCustomConfirmUIWithFormatParam(2408, rd.m_nBeBossCoin);                        }                        else                        {                            DebugLog.LogWarning(string.Format("Request dealer failed, wrong code:{0}", result));                            CCustomDialog.OpenCustomConfirmUI(2404);                        }                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_APPLYLEAVEROOM:                {                    byte state = _ms.ReadByte();                    if (state > 0)                    {                        BackToChooseLevel();                    }                    else                    {                        //failed                        CCustomDialog.OpenCustomConfirmUI(1011);                    }                }                break;            case GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_SM_PUBLISHROLENUM:                {                    RoomInfo.ShowPlayerNum(_ms.ReadInt());                }                break;            default:                break;        }        return true;    }    void BackToChooseLevel()    {        OnEnd();#if HAVE_LOBBY       ResetGameUI();       OnReqDealerStateChange(1);//变成申请上庄       LobbyUITfm.gameObject.SetActive(true);       MainUITfm.gameObject.SetActive(false);#else       GameMain.hall_.SwitchToHallScene();#endif    }    public override void ResetGameUI()    {        base.ResetGameUI();        PlayerData pd = GameMain.hall_.GetPlayerData();        string coinStr = pd.GetDiamond().ToString();        Transform tfm;#if HAVE_LOBBY        tfm = LobbyUITfm.FindChild("Bottom").FindChild("Image_coinframe");        tfm.GetComponentInChildren<Text>().text = coinStr;#endif        tfm = MainUITfm.Find("Bottom/PlayerInfo/Image_coinframe");        tfm.GetComponentInChildren<Text>().text = coinStr;        if (m_nLocalSeat < BH_RoomInfo.VipNumMax)            RoomInfo.ShowVipInfo(true, m_nLocalSeat, pd.GetDiamond());    }    public override void RefreshGamePlayerCoin(uint AddMoney)    {        base.RefreshGamePlayerCoin(AddMoney);        Transform tfm;        long coin;        Text text;#if HAVE_LOBBY        if(LobbyUITfm.gameObject.activeSelf)        {            tfm = LobbyUITfm.FindChild("Bottom").FindChild("Image_coinframe");            text = tfm.GetComponentInChildren<Text>();            long.TryParse(text.text, out coin);            coin += AddMoney;            text.text = coin.ToString();        }        else#endif        {            tfm = MainUITfm.Find("Bottom/PlayerInfo/Image_coinframe");            text = tfm.GetComponentInChildren<Text>();            long.TryParse(text.text, out coin);            coin += AddMoney;            text.text = coin.ToString();            if (m_nLocalSeat < BH_RoomInfo.VipNumMax)                RoomInfo.ShowVipInfo(true, m_nLocalSeat, coin);        }    }    void LoadResource()    {        GameData gamedata = CCsvDataManager.Instance.GameDataMgr.GetGameData((int)GameKind_Enum.GameKind_BullHundred);        if (gamedata == null)            return;        BullHundredAssetBundle = AssetBundleManager.GetAssetBundle(gamedata.ResourceABName);        if (BullHundredAssetBundle == null)            return;        GameCanvas = GameObject.Find("Canvas").GetComponent<Canvas>();        Transform root = GameCanvas.transform.Find("Root");        UnityEngine.Object obj;        Button butn;        Transform tfm;        Sprite sprite;        PlayerData pd = GameMain.hall_.GetPlayerData();        sprite = GameMain.hall_.GetIcon(pd.GetPlayerIconURL(), pd.GetPlayerID(), (int)pd.PlayerIconId);#if HAVE_LOBBY        //load lobby ui---------------------------------------------        obj = (GameObject)BullHundredAssetBundle.LoadAsset("Niu2_Lobby");        LobbyUITfm = ((GameObject)GameMain.instantiate(obj)).transform;        LobbyUITfm.SetParent(root, false);        butn = LobbyUITfm.FindChild("Top/ButtonReturn").GetComponent<Button>();        butn.onClick.AddListener(()=>OnClickReturn(true));        tfm = LobbyUITfm.FindChild("Middle/Middle_Button/Button_1Xinshou");        butn = tfm.GetComponent<Button>();        butn.onClick.AddListener(OnClickLevelBtn);        tfm = LobbyUITfm.FindChild("Bottom/PlayerInfoBG");        tfm.FindChild("TextName").GetComponent<Text>().text = pd.GetPlayerName();        Image vipImg = tfm.FindChild("Image_Vip/Vip_Text/Num").gameObject.GetComponent<Image>();        Image vipTypeImg = tfm.FindChild("Image_Vip").gameObject.GetComponent<Image>();        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle != null)        {            if (pd.PlayerVipLv == 0)                vipTypeImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_hui");            else                vipTypeImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_jin");            vipImg.sprite = bundle.LoadAsset<Sprite>("zjm_word_sz_vip_" + pd.PlayerVipLv.ToString());        }        Image icon = tfm.FindChild("Image_HeadFram/Image_Mask/Image_Head").GetComponent<Image>();        icon.sprite = sprite;        tfm = tfm.parent.FindChild("Image_coinframe");        tfm.GetComponentInChildren<Text>().text = pd.PlayerCoin.ToString();        tfm = tfm.parent.FindChild("Image_DiamondFrame");        tfm.GetComponentInChildren<Text>().text = pd.PlayerDiamond.ToString();        ////////////////////////////////////////////////////////////////////////#endif        //load game ui-----------------------------------------------        obj = (GameObject)BullHundredAssetBundle.LoadAsset("Niu2_MainUI");        MainUITfm = ((GameObject)GameMain.instantiate(obj)).transform;        MainUITfm.SetParent(root, false);        MainUITfm.gameObject.SetActive(false);        butn = MainUITfm.Find("Top/ButtonExpand").GetComponent<Button>();        butn.onClick.AddListener(() => OnClickMenu(0));        butn = MainUITfm.Find("Top/ButtonBG/UiRootBG_Button").GetComponent<Button>();        butn.onClick.AddListener(() => OnClickMenu(0));        Button[] buttons = MainUITfm.Find("Top/ButtonBG/ButtonGroupMask/ButtonGroup").GetComponentsInChildren<Button>(true);        byte index = 1;        foreach (Button btn in buttons)        {            byte temp = index;            btn.onClick.AddListener(() => OnClickMenu(temp));            index++;        }        tfm = MainUITfm.Find("Pop-up");        Slider music = tfm.Find("Set/ImageBG/Slider_Music").gameObject.GetComponent<Slider>();        Slider sound = tfm.Find("Set/ImageBG/Slider_Sound").gameObject.GetComponent<Slider>();        music.value = AudioManager.Instance.MusicVolume;        sound.value = AudioManager.Instance.SoundVolume;        music.onValueChanged.AddListener(delegate (float value) { AudioManager.Instance.MusicVolume = value; });        sound.onValueChanged.AddListener(delegate (float value) { AudioManager.Instance.SoundVolume = value; });        butn = MainUITfm.Find("Middle/Button_Record").GetComponent<Button>();        butn.onClick.AddListener(OnClickRecord);        butn = MainUITfm.Find("Pop-up/Record/Record_BG/UiRootBG_Button").GetComponent<Button>();        butn.onClick.AddListener(OnClickRecord);        butn = MainUITfm.Find("Middle/Button_Rule").GetComponent<Button>();        butn.onClick.AddListener(OnClickRule);        butn = MainUITfm.Find("Pop-up/Rule/Rule_BG/UiRootBG_Button").GetComponent<Button>();        butn.onClick.AddListener(OnClickRule);        tfm = MainUITfm.Find("Bottom/PlayerInfo");        tfm.Find("Head/HeadMask/ImageHead").GetComponent<Image>().sprite = sprite;        tfm.Find("TextName").GetComponent<Text>().text = pd.GetPlayerName();        tfm = tfm.Find("Image_coinframe");        tfm.GetComponentInChildren<Text>().text = pd.GetDiamond().ToString();        tfm = MainUITfm.Find("Bottom/ChouMa_new");        m_ChipsBtns = tfm.GetComponentsInChildren<Button>();        index = 0;        foreach(Button btn in m_ChipsBtns)        {            byte temp = index;            if (btn.transform.Find("ImageLine").gameObject.activeSelf)                m_nCurChipIndex = index;            btn.onClick.AddListener(() => OnClickChips(temp));            index++;        }        m_ContinuBtn = MainUITfm.Find("Bottom/Button_Xuya").GetComponent<Button>();        m_ContinuBtn.onClick.AddListener(()=> OnClickContinue(false));        m_AutoChipToggle = MainUITfm.Find("Bottom/Toggle_zidong").GetComponent<Toggle>();        m_AutoChipToggle.onValueChanged.AddListener(OnClickAutoChip);        m_ReqDealerBtn = MainUITfm.Find("Bottom/Button_ZuoZhuang").GetComponent<Button>();        m_ReqDealerBtn.onClick.AddListener(OnClickReqDealer);        butn = MainUITfm.Find("Bottom/Button_DelaerList").GetComponent<Button>();        butn.onClick.AddListener(OnClickDealerList);        tfm = MainUITfm.Find("Middle/Chip_Point");        m_GameBtns = tfm.GetComponentsInChildren<Button>();        index = 0;        foreach(Button btn in m_GameBtns)        {            byte temp = index;            btn.onClick.AddListener(() => OnClickGameButton(temp));            UpdateGameBtn(index, 0, 0);            index++;        }        m_ChipCountText = tfm.Find("Chip_sum/TextNum").GetComponent<Text>();        m_ChipCountText.text = "0";        m_CountdownTfm = MainUITfm.Find("Middle/CountdownBG");        m_CountdownTfm.gameObject.SetActive(false);        m_ChipPointTfm = MainUITfm.Find("Pop-up/Chip_Point");        tfm = MainUITfm.Find("Middle/Seat");        buttons = tfm.GetComponentsInChildren<Button>();        index = 0;        foreach (Button btn in buttons)        {            byte temp = index;            btn.onClick.AddListener(() => OnClickVipButton(temp, 1));            index++;        }        //load result ui        obj = (GameObject)BullHundredAssetBundle.LoadAsset("Niu2_Result");        ResultUITfm = ((GameObject)GameMain.instantiate(obj)).transform;        ResultUITfm.SetParent(root, false);        ResultUITfm.gameObject.SetActive(false);        tfm = MainUITfm.Find("Pop-up/Animation");        obj = (GameObject)BullHundredAssetBundle.LoadAsset("Anime_Result_red");        GameObject gameObj = (GameObject)GameMain.instantiate(obj);        gameObj.transform.SetParent(tfm, false);        gameObj.SetActive(false);         m_UIAnimList.Add(gameObj.GetComponentInChildren<DragonBones.UnityArmatureComponent>());        obj = (GameObject)BullHundredAssetBundle.LoadAsset("Anime_Result_ping");        gameObj = (GameObject)GameMain.instantiate(obj);        gameObj.transform.SetParent(tfm, false);        gameObj.SetActive(false);        m_UIAnimList.Add(gameObj.GetComponentInChildren<DragonBones.UnityArmatureComponent>());        obj = (GameObject)BullHundredAssetBundle.LoadAsset("Anime_Result_blue");        gameObj = (GameObject)GameMain.instantiate(obj);        gameObj.transform.SetParent(tfm, false);        gameObj.SetActive(false);        m_UIAnimList.Add(gameObj.GetComponentInChildren<DragonBones.UnityArmatureComponent>());        tfm = ResultUITfm.Find("ImageBG/ImageBG_ziji/Image_sum");        obj = (GameObject)AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName).LoadAsset("Coin_Effect");        m_CoinEffect = (GameObject)GameMain.instantiate(obj);        m_CoinEffect.transform.SetParent(tfm, false);        m_CoinEffect.SetActive(false);    }    void OnClickContinue(bool auto)    {        if (!m_ContinuBtn.interactable)            return;        foreach (byte key in m_LastChips.Keys)        {            PlaceChipsByCoin(key, BH_RoomInfo.LocalSeat, BH_RoomInfo.LocalSeat, m_LastChips[key], 2);        }        //m_ContinuBtn.interactable = false;        if(!auto)        {            m_AutoChipToggle.isOn = false;            CustomAudioDataManager.GetInstance().PlayAudio(1002);        }    }    void OnClickAutoChip(bool check)    {        //if (m_AutoChipToggle.isOn)        //    OnClickContinue();        //else            CustomAudioDataManager.GetInstance().PlayAudio(1002);    }    void OnClickReqDealer()    {        CustomAudioDataManager.GetInstance().PlayAudio(1002);        UMessage sitMsg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_CM_APPLYBEBOSS);        sitMsg.Add(GameMain.hall_.GetPlayerId());        sitMsg.Add(m_nDealerState);        HallMain.SendMsgToRoomSer(sitMsg);    }    void OnReqDealerStateChange(byte state)    {        m_nDealerState = state;        string img = "Bj_ZuoZhuan_" + m_nDealerState;        m_ReqDealerBtn.image.sprite = BullHundredAssetBundle.LoadAsset<Sprite>(img);        MainUITfm.Find("Pop-up/Tip_Dealer").gameObject.SetActive(m_nDealerState > 2);    }    void OnClickDealerList()    {        CustomAudioDataManager.GetInstance().PlayAudio(1002);        GameObject obj = MainUITfm.Find("Pop-up/DealerList").gameObject;        if (obj.activeSelf)            obj.SetActive(false);        else        {            UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_CM_APPLYBOSSLIST);            msg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(msg);        }    }    void OnClickReturn(bool playsound)    {        if(playsound)            CustomAudioDataManager.GetInstance().PlayAudio(1002);#if HAVE_LOBBY        if (LobbyUITfm.gameObject.activeSelf)            GameMain.hall_.SwitchToHallScene();        else#endif        {            //TryToLeaveRoom            UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_CM_APPLYLEAVEROOM);            msg.Add(GameMain.hall_.GetPlayerId());            HallMain.SendMsgToRoomSer(msg);        }    }    void OnClickLevelBtn()    {#if HAVE_LOBBY        CustomAudioDataManager.GetInstance().PlayAudio(1002);#else        MainUITfm.gameObject.SetActive(true);#endif        UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_CM_CHOOSElEVEL);        msg.Add(GameMain.hall_.GetPlayerId());        msg.Add((byte)1);        HallMain.SendMsgToRoomSer(msg);    }    void OnClickMenu(int btn)    {        CustomAudioDataManager.GetInstance().PlayAudio(1002);        Button butn = MainUITfm.Find("Top/ButtonExpand").GetComponent<Button>();        if (butn.enabled)        {            butn.enabled = false;            Transform tfm = MainUITfm.Find("Top/ButtonBG");            bool bActive = tfm.gameObject.activeSelf;            tfm.gameObject.SetActive(true);            Transform tfm2 = tfm.Find("ButtonGroupMask/ButtonGroup");            Vector3 vec = tfm2.localPosition;            vec.y *= -1.0f;            Tweener t = DOTween.To(() => tfm2.localPosition, r => tfm2.localPosition = r, vec, 0.5f);            t.OnComplete(() =>            {                butn.enabled = true;                tfm.gameObject.SetActive(!bActive);            });        }        if (btn == 1)//设置        {            MainUITfm.Find("Pop-up/Set").gameObject.SetActive(true);        }        else if (btn == 2)//站起        {            if (m_nLocalSeat < BH_RoomInfo.VipNumMax)                OnClickVipButton(m_nLocalSeat, 2);        }        else if (btn == 3)//换桌        {        }        else if (btn == 4)        {            OnClickReturn(false);        }    }    void OnClickRecord()    {        Button butn = MainUITfm.Find("Middle/Button_Record").GetComponent<Button>();        if (!butn.enabled)            return;        CustomAudioDataManager.GetInstance().PlayAudio(1002);        Transform tfm = MainUITfm.Find("Pop-up/Record");        bool ac = tfm.gameObject.activeSelf;        tfm.gameObject.SetActive(true);        butn.enabled = false;        RectTransform rtfm = tfm.Find("Record_BG/ImageMask/ImageBG") as RectTransform;        Vector3 vec = rtfm.localPosition;        vec.x = ac ? (vec.x - rtfm.rect.width) : (vec.x + rtfm.rect.width);        Tweener t = DOTween.To(() => rtfm.localPosition, r => rtfm.localPosition = r, vec, 0.5f);        t.OnComplete(() =>        {            tfm.gameObject.SetActive(!ac);            butn.enabled = true;        });    }    void OnClickRule()    {        Button butn = MainUITfm.Find("Middle/Button_Rule").GetComponent<Button>();        if (!butn.enabled)            return;        CustomAudioDataManager.GetInstance().PlayAudio(1002);        Transform tfm = MainUITfm.Find("Pop-up/Rule");        bool ac = tfm.gameObject.activeSelf;        tfm.gameObject.SetActive(true);        butn.enabled = false;        RectTransform rtfm = tfm.Find("Rule_BG/ImageMask/ImageBG") as RectTransform;        Vector3 vec = rtfm.localPosition;        vec.x = ac ? (vec.x - rtfm.rect.width) : (vec.x + rtfm.rect.width);        Tweener t = DOTween.To(() => rtfm.localPosition, r => rtfm.localPosition = r, vec, 0.5f);        t.OnComplete(() =>        {            tfm.gameObject.SetActive(!ac);            butn.enabled = true;        });    }    void OnClickChips(byte index)    {        CustomAudioDataManager.GetInstance().PlayAudio(1002);        m_ChipsBtns[m_nCurChipIndex].transform.Find("ImageLine").gameObject.SetActive(false);        m_nCurChipIndex = index;        m_ChipsBtns[m_nCurChipIndex].transform.Find("ImageLine").gameObject.SetActive(true);    }    void OnClickGameButton(byte index, byte num = 1, int chipIndex = -1)    {        if (num < 1)            return;        bool autoClick = (chipIndex >= 0);        if (!autoClick)        {            ResetAutoChip();        }        byte chip =  autoClick ? (byte)chipIndex : m_nCurChipIndex;        BH_BetData bd = BullHundred_Data.GetInstance().m_BetData[RoomInfo.m_nRoomLevel - 1];        long coin = bd.m_nGrades[chip] * num;        UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_CM_CHIPIN);        msg.Add(GameMain.hall_.GetPlayerId());        msg.Add(coin);        msg.Add(index);        msg.Add(chip);        msg.Add(num);        msg.Add(autoClick);        HallMain.SendMsgToRoomSer(msg);    }    void PlaceChipsByCoin(byte btnIndx, byte seat, byte targetSeat, long coin, byte type = 0) //type:(0:placeOnBtn 1:flyToBtn 2:clickBtn)    {        if (coin <= 0)            return;        BH_BetData bd = BullHundred_Data.GetInstance().m_BetData[RoomInfo.m_nRoomLevel - 1];        int[] grades = bd.m_nGrades;        int num;        for(int i = grades.Length - 1; i >= 0 ; i--)        {            num = (int)coin / grades[i];            if (type == 2)                OnClickGameButton(btnIndx, (byte)num, i);            else                MoveChipsToGameBtn((byte)i, btnIndx, seat, targetSeat, (byte)num, type == 1);            coin %= grades[i];        }    }    void MoveChipsToGameBtn(byte chipIndex, byte btnIndex, byte seat, byte targetSeat, byte num, bool bFly = true)    {        if (num < 1)            return;        if(bFly)            CustomAudioDataManager.GetInstance().PlayAudio(1007);        Button btn = m_ChipsBtns[chipIndex];        string str = (targetSeat == BH_RoomInfo.LocalSeat) ? "Player" : "Untagged";        RectTransform targetRtfm = m_ChipPointTfm.GetChild(btnIndex) as RectTransform;        UnityEngine.Object obj = (GameObject)BullHundredAssetBundle.LoadAsset("Icon_Chip");        for (byte i = 0; i < num; i++)        {            GameObject go = (GameObject)GameMain.instantiate(obj);            go.GetComponent<Image>().sprite = btn.image.sprite;            RectTransform goRtfm = go.transform as RectTransform;            goRtfm.tag = str;            goRtfm.SetParent(targetRtfm, false);            Vector2 target = new Vector2();            target.x = Random.Range(targetRtfm.rect.xMin - goRtfm.rect.xMin, targetRtfm.rect.xMax - goRtfm.rect.xMax);            target.y = Random.Range(targetRtfm.rect.yMin - goRtfm.rect.yMin, targetRtfm.rect.yMax - goRtfm.rect.yMax);            if(bFly)            {                if (seat == BH_RoomInfo.LocalSeat)                    goRtfm.position = btn.transform.position;                else if (seat == BH_RoomInfo.OtherPlayerSeat)                {                    Vector2 source = new Vector2();                    source.x = Random.Range(GameCanvas.pixelRect.xMin, GameCanvas.pixelRect.xMax);                    source.y = 0f;                    RectTransformUtility.ScreenPointToLocalPointInRectangle(                       targetRtfm, source, GameCanvas.worldCamera, out source);                    goRtfm.localPosition = source;                }                else                    goRtfm.position = RoomInfo.GetOtherSeatTfm(seat).position;                float length = Vector2.Distance(goRtfm.localPosition, target);                goRtfm.DOLocalMove(target, length * 0.001f);            }            else            {                goRtfm.localPosition = target;            }        }    }    void MoveChipsToPlayer(int btnIndex, byte seat)    {        Transform parentTfm = m_ChipPointTfm.GetChild(btnIndex);        RoomInfo.MoveChipsToPlayer(parentTfm, seat);    }    public void UpdatePlayingUI(bool enable)    {        if (RoomInfo.m_nDealerUserId == GameMain.hall_.GetPlayerId())            return;        foreach(Button t in m_ChipsBtns)        {            t.interactable = enable;        }        m_ChipsBtns[m_nCurChipIndex].transform.Find("ImageLine").gameObject.SetActive(enable);        m_AutoChipToggle.interactable = (m_LastChips.Count > 0);        m_ContinuBtn.interactable = enable && m_AutoChipToggle.interactable;        foreach (Button btn in m_GameBtns)        {            btn.interactable = enable;        }    }    void UpdateGameBtn(int index, long totalCoin = -1, long selfCoin = -1, bool showBonus = false)    {        Transform tfm = m_GameBtns[index].transform;        if(totalCoin >= 0)        {            tfm.Find("Text_chipnum").gameObject.SetActive(totalCoin > 0);            tfm.Find("Text_chipnum").GetComponent<Text>().text = totalCoin.ToString();        }        if (selfCoin >= 0)        {            tfm.Find("Text_chipnum_ziji").GetComponent<Text>().text = selfCoin.ToString();            tfm.Find("Text_chipnum_ziji").gameObject.SetActive(selfCoin > 0);            tfm.Find("outline_Xiazhu").gameObject.SetActive(selfCoin > 0);        }        if(showBonus)        {            tfm.Find("outline_Zhongjiang").gameObject.SetActive(true);        }    }    void ShowResult(bool show, long addCoin = 0, string bossName="", long bossAddCoin = 0, UMessage _ms = null)    {        ResultUITfm.gameObject.SetActive(show);        GameObject go;        Text[] textArray;        Transform tfm1 = ResultUITfm.Find("ImageBG/ImageBG_ziji/Result_ziji_Viewport/Result_ziji_Content");        foreach (Transform child in tfm1)        {            GameObject.Destroy(child.gameObject);        }        Transform tfm2 = ResultUITfm.Find("ImageBG/ImageBG_zong/Result_zong_Viewport/Result_zong_Content");        foreach (Transform child in tfm2)        {            GameObject.Destroy(child.gameObject);        }        if (show)        {            UnityEngine.Object obj = (GameObject)BullHundredAssetBundle.LoadAsset("Result_zong");            byte num = _ms.ReadByte();            uint playerid = 0;            uint faceId = 0;            string url = "";            long coin = 0;            string str = "";            for (byte i = 0; i < num; i++)            {                //playerid = _ms.ReadUInt();                faceId = _ms.ReadUInt();                url = _ms.ReadString();                coin = _ms.ReadLong();                str = _ms.ReadString();                go = (GameObject)GameMain.instantiate(obj);                textArray = go.GetComponentsInChildren<Text>();                textArray[0].text = (i + 1).ToString();                textArray[1].text = str;                textArray[2].text = GameFunction.FormatCoinText(coin);
                go.transform.Find("head/tongxiang").GetComponent<Image>().sprite
                    = GameMain.hall_.GetIcon(url, playerid, (int)faceId);                go.transform.SetParent(tfm2, false);            }            Transform tfm = ResultUITfm.Find("ImageBG/ImageBG_zong/Image_DelaerInfo");            tfm.Find("Text_name").GetComponent<Text>().text = bossName;            tfm.Find("Text_sum").GetComponent<Text>().text = GameFunction.FormatCoinText(bossAddCoin, true);            obj = (GameObject)BullHundredAssetBundle.LoadAsset("Result_ziji");            num = _ms.ReadByte();            byte index = 0;            for (byte i = 0; i < num; i++)            {                index = _ms.ReadByte();                go = (GameObject)GameMain.instantiate(obj);                textArray = go.GetComponentsInChildren<Text>();                textArray[0].text = BullHundred_Data.GetInstance().m_AwardData[index].m_strName;                textArray[1].text = BullHundred_Data.GetInstance().m_AwardData[index].m_strOdds;                textArray[2].text = GameFunction.FormatCoinText(_ms.ReadLong());                textArray[3].text = GameFunction.FormatCoinText(_ms.ReadLong());                go.transform.SetParent(tfm1, false);            }            tfm = ResultUITfm.Find("ImageBG/ImageBG_ziji/Image_sum/Text_sum");            tfm.GetComponent<Text>().text = GameFunction.FormatCoinText(addCoin, true);            if(addCoin > 0)            {                CustomAudioDataManager.GetInstance().PlayAudio(1006);                m_CoinEffect.SetActive(true);            }        }    }    bool HandleEnterRoom(uint _msgType, UMessage _ms)    {        RoomInfo.m_iRoomID = _ms.ReadUInt();        RoomInfo.m_nLocalCoin = _ms.ReadLong();        RoomInfo.m_nRoomLevel = _ms.ReadByte();        HundredRoomState_Enum RoomState = (HundredRoomState_Enum)_ms.ReadByte();//房间的状态        RoomInfo.m_fCountTime = _ms.ReadSingle();                         //此状态下还有多少时间        uint userid = _ms.ReadUInt();        uint faceId;        string url;        long coin;        string name;        if (userid > 0)        {            RoomInfo.m_nDealerUserId = userid;            faceId = _ms.ReadUInt();            url = _ms.ReadString();            coin = _ms.ReadLong();            name = _ms.ReadString();            RoomInfo.ShowDealerInfo(true, coin, faceId, url, userid, name);        }        else            RoomInfo.ShowDealerInfo(false);        byte num = _ms.ReadByte();        for(int i = 0; i < num; i++)            RoomInfo.m_vecPoker[(int)HundredPlayerType.HPT_Red].Add(_ms.ReadByte());        num = _ms.ReadByte();        for (int i = 0; i < num; i++)            RoomInfo.m_vecPoker[(int)HundredPlayerType.HPT_Blue].Add(_ms.ReadByte());        RoomInfo.UpdatePoker();        byte sit = 0;        for (; sit <  BH_RoomInfo.VipNumMax; sit++)            RoomInfo.ShowVipInfo(false, sit);        num = _ms.ReadByte();        for (int i = 0; i < num; i++)        {            sit = _ms.ReadByte();            userid = _ms.ReadUInt();            faceId = _ms.ReadUInt();            url = _ms.ReadString();            coin = _ms.ReadLong();            name = _ms.ReadString();            RoomInfo.ShowVipInfo(true, sit, coin, faceId,url,userid, name);        }        num = _ms.ReadByte();        for (int i = 0; i < num; i++)        {            coin = _ms.ReadLong();            PlaceChipsByCoin((byte)i, BH_RoomInfo.OtherPlayerSeat, BH_RoomInfo.OtherPlayerSeat, coin);        }        ClearRecords();        num = _ms.ReadByte();        byte[] red = new byte[num];        byte[] blue = new byte[num];        for (int i = 0; i < num; i++)        {            red[i] = _ms.ReadByte();            blue[i] = _ms.ReadByte();        }        AddRecords(red, blue);        RoomInfo.ShowPlayerNum(_ms.ReadInt());        OnEnterRoom(RoomState);        return true;    }     void OnEnterRoom(HundredRoomState_Enum RoomState)    {#if HAVE_LOBBY        LobbyUITfm.gameObject.SetActive(false);        MainUITfm.gameObject.SetActive(true);#endif        BH_BetData bd = BullHundred_Data.GetInstance().m_BetData[RoomInfo.m_nRoomLevel - 1];        string text = "";        int grade;        for (int i = 0; i < m_ChipsBtns.Length; i++)        {            grade = bd.m_nGrades[i];            text = GameFunction.FormatCoinText(grade);            m_ChipsBtns[i].transform.GetComponentInChildren<Text>().text = text;        }        ResetAutoChip();        UpdatePlayingUI(false);        OnStateChange(RoomState, null);    }    void OnStateChange(HundredRoomState_Enum state, UMessage _ms)    {        RoomInfo.OnStateChange(state, _ms);    }    public void OnQuitState(HundredRoomState_Enum state)    {        switch (state)        {            case HundredRoomState_Enum.HundredRoomState_WaitBoss:                CCustomDialog.CloseCustomWaitUI();                break;            case HundredRoomState_Enum.HundredRoomState_ChipIn:                {                    m_LastChips.Clear();                    if (!m_bChiped)                        ResetAutoChip();                    else                    {                        m_LastChips = new Dictionary<byte, long>(m_CurrentChips);                        m_CurrentChips.Clear();                    }                    m_CountdownTfm.gameObject.SetActive(false);                    UpdatePlayingUI(false);                }                break;            default:                break;        }    }    public void OnEnterState(HundredRoomState_Enum state, UMessage _ms)    {        switch (state)        {            case HundredRoomState_Enum.HundredRoomState_WaitBoss:                CCustomDialog.OpenCustomWaitUI(2400, false);                break;            case HundredRoomState_Enum.HundredRoomState_BeginPoker:                CustomAudioDataManager.GetInstance().PlayAudio(1005);                break;            case HundredRoomState_Enum.HundredRoomState_ChipIn:                {                    UpdatePlayingUI(true);                    if (m_AutoChipToggle.isOn)                        OnClickContinue(true);                    m_CountdownTfm.gameObject.SetActive(true);                    CCIMgr.AddTimeImage(m_CountdownTfm.Find("ImageCountdown").GetComponent<Image>(),                        RoomInfo.m_fStateTime, RoomInfo.m_fCountTime / RoomInfo.m_fStateTime, null, m_CountdownTfm.GetComponentInChildren<Text>());                    ShowStart();                }                break;            case HundredRoomState_Enum.HundredRoomState_GameWait:                ShowBonus(_ms);                break;            case HundredRoomState_Enum.HundredRoomState_End:                OnEnd();                break;            default:                break;        }    }    void ShowStart()    {        Transform tfm = MainUITfm.Find("Pop-up/Tips_GameStart");        tfm.gameObject.SetActive(true);        tfm.localPosition = new Vector3(-GameCanvas.pixelRect.width, 0f, 0f);        Tweener t = tfm.DOLocalMoveX(0f, 0.5f);        t.OnComplete(() =>        {            t = tfm.DOLocalMoveX(0f, 0.5f);            t.OnComplete(() =>            {                t = tfm.DOLocalMoveX(GameCanvas.pixelRect.width, 0.5f);                t.OnComplete(() =>                {                    tfm.localPosition = Vector3.zero;                    tfm.gameObject.SetActive(false);                });            });        });    }    void ShowBonus(UMessage _ms)    {        if (_ms == null)            return;        byte redPokerType = _ms.ReadByte();        byte bluePokerType = _ms.ReadByte();        byte num = _ms.ReadByte();        byte[] indexs= new byte[num];        long[] selfCoins = new long[num];        long[] otherCoins = new long[num];        int result = 0;        for(byte i = 0; i < num; i++)        {            indexs[i] = _ms.ReadByte();            otherCoins[i] = _ms.ReadLong();            selfCoins[i] = _ms.ReadLong();            otherCoins[i] -= selfCoins[i];            GameKind.AddFlag(indexs[i], ref result);        }        GameMain.SC(ChipsResult(result, redPokerType, bluePokerType, indexs, selfCoins, otherCoins));    }    void ShowUIAnim(int index, bool show = true, string anim = "")    {        m_UIAnimList[index].gameObject.SetActive(show);        if(show)            m_UIAnimList[index].animation.Play(string.IsNullOrEmpty(anim) ? "newAnimation" : anim);    }    IEnumerator ChipsResult(int result, byte red, byte blue, byte[] index, long[] selfCoins, long[] otherCoins)    {        int num = index.Length;        int anim = 0;        if (red == blue)            anim = 1;        else if (red < blue)            anim = 2;        ShowUIAnim(anim);        yield return new WaitForSecondsRealtime(2.0f);        ShowUIAnim(anim, false);        AddRecords(new byte[] { red }, new byte[] { blue }, true);        yield return new WaitForSecondsRealtime(1.0f);        for (byte i = 0; i < num; i++)        {            UpdateGameBtn(index[i], -1, -1, true);        }        yield return new WaitForSecondsRealtime(1.0f);        for (int i = 0; i < BH_RoomInfo.PokerTypeNum; i++)        {            if(!GameKind.HasFlag(i, result))            {                MoveChipsToPlayer(i, BH_RoomInfo.DealerSeat);            }        }        yield return new WaitForSecondsRealtime(1.0f);        for (byte i = 0; i < num; i++)        {            PlaceChipsByCoin(index[i], BH_RoomInfo.DealerSeat, BH_RoomInfo.LocalSeat, selfCoins[i], 1);            PlaceChipsByCoin(index[i], BH_RoomInfo.DealerSeat, BH_RoomInfo.OtherPlayerSeat, otherCoins[i], 1);        }        yield return new WaitForSecondsRealtime(1.0f);        for (int i = 0; i < num; i++)        {            MoveChipsToPlayer(index[i], BH_RoomInfo.LocalSeat);            MoveChipsToPlayer(index[i], BH_RoomInfo.OtherPlayerSeat);        }    }    void OnClickVipButton(int index, byte sitState)//sitState(1:sit 2:stand)    {        if(sitState == 1)            CustomAudioDataManager.GetInstance().PlayAudio(1002);        UMessage msg = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_BULLHUNDRED_CM_APPLYSITVIP);        msg.Add(GameMain.hall_.GetPlayerId());        msg.Add(sitState);        msg.Add(index);        HallMain.SendMsgToRoomSer(msg);    }    bool HandleDealerList(uint _msgType, UMessage _ms)    {        GameObject obj = MainUITfm.Find("Pop-up/DealerList").gameObject;        obj.SetActive(true);        Transform listTfm = obj.transform.Find("Image_BG/Viewport_DealerList/Content_DealerList");        foreach (Transform t in listTfm)        {            GameObject.Destroy(t.gameObject);        }        int num = _ms.ReadInt();        UnityEngine.Object obj0 = (GameObject)BullHundredAssetBundle.LoadAsset("DealerList");        GameObject gameObj;        for (int i = 0; i < num; i++)        {            uint playerid = _ms.ReadUInt();            gameObj = (GameObject)GameMain.instantiate(obj0);            uint faceid = _ms.ReadUInt();            string url = _ms.ReadString();            gameObj.transform.Find("touxiangkuang").GetComponentInChildren<Image>().sprite = GameMain.hall_.GetIcon(url, playerid, (int)faceid);            gameObj.transform.Find("jinbi").GetComponentInChildren<Text>().text = _ms.ReadLong().ToString();            gameObj.transform.Find("touxiangkuang").GetComponentInChildren<Text>().text = _ms.ReadString();            gameObj.transform.SetParent(listTfm, false);        }        return true;    }    void OnEnd()    {        if (GameMain.hall_.isGetRelief)            GameMain.hall_.ShowRelief();        m_bChiped = false;        m_CurrentChips.Clear();        Transform tfm;        for (int i = 0; i < m_GameBtns.Length; i++)        {            tfm = m_GameBtns[i].transform;            tfm.Find("outline_Xiazhu").gameObject.SetActive(false);            tfm.Find("outline_Zhongjiang").gameObject.SetActive(false);            tfm = m_ChipPointTfm.GetChild(i);            foreach (Transform child in tfm)                GameObject.Destroy(child.gameObject);            UpdateGameBtn(i, 0, 0);        }        ShowResult(false);        foreach(DragonBones.UnityArmatureComponent anim in m_UIAnimList)            anim.gameObject.SetActive(false);        m_CoinEffect.SetActive(false);        GameMain.Instance.StopAllCoroutines();        RoomInfo.OnEnd();    }    void ResetAutoChip()    {        m_AutoChipToggle.interactable = m_bChiped;        m_ContinuBtn.interactable = false;        m_AutoChipToggle.isOn = false;    }    bool HandleDealPoker(uint _msgType, UMessage _ms)    {        byte num = _ms.ReadByte();        for (int i = 0; i < num; i++)            RoomInfo.m_vecPoker[(int)HundredPlayerType.HPT_Red].Add(_ms.ReadByte());        for (int i = 0; i < num; i++)            RoomInfo.m_vecPoker[(int)HundredPlayerType.HPT_Blue].Add(_ms.ReadByte());        byte over = _ms.ReadByte();        byte redPokerType, bluePokerType;        if(over > 0)        {            redPokerType = _ms.ReadByte();            bluePokerType = _ms.ReadByte();            GameMain.SC(RoomInfo.OpenPoker(new byte[] { redPokerType, bluePokerType }));        }        else            GameMain.SC(RoomInfo.SendPoker());        return true;    }    bool HandleVipSit(uint _msgType, UMessage _ms)    {        uint userId = _ms.ReadUInt();        byte sitState = _ms.ReadByte();//1:sit 2:stand        byte result = _ms.ReadByte();        if (result == 0)//success        {            byte seat = _ms.ReadByte();            uint faceId = _ms.ReadUInt();            string url = _ms.ReadString();            long coin = _ms.ReadLong();            string name = _ms.ReadString();            if (sitState == 1)            {                RoomInfo.ShowVipInfo(true, seat, coin, faceId, url, userId, name);                if (userId == GameMain.hall_.GetPlayerId())                    m_nLocalSeat = seat;            }            else if (sitState == 2)            {                RoomInfo.ShowVipInfo(false, seat);                if (userId == GameMain.hall_.GetPlayerId())                    m_nLocalSeat = BH_RoomInfo.LocalSeat;            }        }        else        {            if(result == 3)            {                BH_RoomData rd = BullHundred_Data.GetInstance().m_RoomData[RoomInfo.m_nRoomLevel - 1];                CCustomDialog.OpenCustomConfirmUIWithFormatParam(2401, rd.m_nVipSitMin);            }            else            {                uint strId;                if (result == 2)                    strId = 2402;                else if (result == 4)                    strId = 2403;                else                    strId = 2404;                CCustomDialog.OpenCustomConfirmUI(strId);            }        }        return true;    }    bool HandleGameResult(uint _msgType, UMessage _ms)    {        string bossName = _ms.ReadString();        long coin = _ms.ReadLong();        RoomInfo.ShowDealerInfo(true, coin);        long bossAddCoin = _ms.ReadLong();        coin = _ms.ReadLong();        //GameMain.hall_.GetPlayerData().SetCoin(coin);        ResetGameUI();        long addCoin = _ms.ReadLong();        byte num = _ms.ReadByte();        byte seat;        uint userId;        for(byte i = 0; i < num; i++)        {            seat = _ms.ReadByte();            userId = _ms.ReadUInt();            coin = _ms.ReadLong();            RoomInfo.ShowVipInfo(true, seat, coin);        }        //if(m_bChiped)            ShowResult(true, addCoin, bossName, bossAddCoin, _ms);        return true;    }    void ClearRecords()    {        Transform tfm = MainUITfm.Find("Pop-up/Record/Record_BG/ImageMask/ImageBG/Record_Viewport/Record_Content");        foreach (Transform child in tfm)        {            GameObject.Destroy(child.gameObject);        }    }    void AddRecords(byte[] redPokerType, byte[] bluePokerType, bool addBegin = false)    {        int num = redPokerType.Length;        if (num < 1)            return;        Transform tfm = MainUITfm.Find("Pop-up/Record/Record_BG/ImageMask/ImageBG/Record_Viewport/Record_Content");        const int maxCount = 30;        if (num > maxCount)            num = maxCount;        int count = tfm.childCount + num - maxCount;        for (int i = 1; i <= count; i++)            GameObject.Destroy(tfm.GetChild(tfm.childCount - i).gameObject);        UnityEngine.Object obj = (GameObject)BullHundredAssetBundle.LoadAsset("Record_popup");        Dictionary<byte, BH_AwardData> dataList = BullHundred_Data.GetInstance().m_AwardData;        Transform child;        Text text;        for(int i = 0; i < num; i++)        {            child = (GameMain.instantiate(obj) as GameObject).transform;            text = child.Find("Text_red").GetComponent<Text>();            text.transform.GetChild(0).gameObject.SetActive(redPokerType[i] > bluePokerType[i]);            text.text = dataList[redPokerType[i]].m_strName;            text = child.Find("Text_blue").GetComponent<Text>();            text.transform.GetChild(0).gameObject.SetActive(redPokerType[i] < bluePokerType[i]);            text.text = dataList[bluePokerType[i]].m_strName;            child.SetParent(tfm, false);            if (addBegin)                child.SetAsFirstSibling();        }    }    public override void OnDisconnect(bool over)    {        OnEnd();    }


    public override void ReconnectSuccess()
    {
        base.ReconnectSuccess();

        CCustomDialog.OpenCustomConfirmUI(1018, (p) => BackToChooseLevel());
    }}