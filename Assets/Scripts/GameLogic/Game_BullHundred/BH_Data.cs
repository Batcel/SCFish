using System.Collections.Generic;using UnityEngine;using USocket.Messages;using System.IO;using XLua;[LuaCallCSharp]public class BH_RoomData{    public long m_nBeBossCoin;    public long m_nBossDownCoin;    public long m_nBossNum;    public long m_nVipSitMin;}[LuaCallCSharp]public class BH_BetData{    public int m_nMin;    public int m_nKickout;    public int[] m_nGrades = new int[6];}[LuaCallCSharp]public class BH_AwardData{    public string m_strName;    public string m_strOdds;}[Hotfix]public class BullHundred_Data{    BullHundred_Data()    {        ReadBetData();        ReadAwardData();    }    public static BullHundred_Data GetInstance()    {        if (instance == null)            instance = new BullHundred_Data();        return instance;    }    static BullHundred_Data instance;    public float m_fChipInTime;    public float m_fGameWaitTime;    public float m_fEndWaitTime;    public float m_fAddRobotBossTime;    public List<BH_RoomData> m_RoomData = new List<BH_RoomData>();    public List<BH_BetData> m_BetData = new List<BH_BetData>();    public Dictionary<byte, BH_AwardData> m_AwardData = new Dictionary<byte, BH_AwardData>();    public void ReadData(UMessage msg)    {        m_fChipInTime = msg.ReadSingle();        m_fGameWaitTime = msg.ReadSingle();        m_fEndWaitTime = msg.ReadSingle();        m_fAddRobotBossTime = msg.ReadSingle();        m_RoomData.Clear();        byte levelNum = msg.ReadByte();        for(int i = 0; i < levelNum; i++)        {            BH_RoomData data = new BH_RoomData();            data.m_nBeBossCoin = msg.ReadLong();            data.m_nBossDownCoin = msg.ReadLong();            data.m_nBossNum = msg.ReadLong();            data.m_nVipSitMin = msg.ReadLong();            m_RoomData.Add(data);        }    }    void ReadBetData()    {        List<string[]> strList;        CReadCsvBase.ReaderCsvDataFromAB(GameDefine.CsvAssetbundleName, "GameNiu2BetCsv.txt", out strList);        int columnCount = strList.Count;        int j;        for (int i = 2; i < columnCount; i++)        {            j = 0;            BH_BetData gamedata = new BH_BetData();            int.TryParse(strList[i][j++], out gamedata.m_nMin);            int.TryParse(strList[i][j++], out gamedata.m_nKickout);            for (int k = 0; k < gamedata.m_nGrades.Length; k++)                int.TryParse(strList[i][j++], out gamedata.m_nGrades[k]);            m_BetData.Add(gamedata);        }    }    void ReadAwardData()    {        List<string[]> strList;        CReadCsvBase.ReaderCsvDataFromAB(GameDefine.CsvAssetbundleName, "GameNiu2awardsCsv.txt", out strList);        int columnCount = strList.Count;        int j;        byte id;        for (int i = 2; i < columnCount; i++)        {            j = 0;            byte.TryParse(strList[i][j++], out id);            BH_AwardData gamedata = new BH_AwardData();            gamedata.m_strName = strList[i][j++];            gamedata.m_strOdds = strList[i][j++];            m_AwardData.Add(id, gamedata);        }    }}