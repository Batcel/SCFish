using System.Collections.Generic;using USocket.Messages;using System;using XLua;[Hotfix]public class Ex_MFNormallimit{    public int playscore_pro; //分数比例    public int startcutcoin;//刚开始 减少的钱币    public int fakerreward;//反杀增加的奖励    public int mincarryin; //最小带入    public int maxcarryin; //最大带入}public class Ex_MFPlayerData{    public uint uid; //uid    public uint point; //当前点数    public int winScore; //总得分    public uint medal; //当前奖牌    public Int64 silver; //当前银两    public byte isBoom; //是否Boom 0-否 1-是    public byte isShakalaka; //是否反超 0-否 1-是    public byte isWin; //是否win 0-否 1-是  3-牌打完    public List<byte> usercardList; //当前手牌}public class Ex_MFStandardlimit{    public int reward; //奖励    public int registmoney; //报名费    public int maxnum; //最多场数    public int standardscore; //达标线    public int fakerreward; //反杀奖励}public class DDLMessageBase{    public uint diuMsgType;}public class Ex_CMLogin:DDLMessageBase{    public void SetSendData(UMessage msg)    {        //msg.Add(diuMsgType);        msg.Add(userid);    }    public uint userid;//账号}public class Ex_CMRegion:DDLMessageBase{    public void SetSendData(UMessage msg)    {        //msg.Add(diuMsgType);        msg.Add(userid);        msg.Add(areaId);        msg.Add(regionId);    }    public uint userid; //账号    public byte areaId; //大场id    public byte regionId; //小场id}public class Ex_CMAction:DDLMessageBase{    public void SetSendData(UMessage msg)    {        //msg.Add(diuMsgType);        msg.Add(userid);        msg.Add(fromType);        msg.Add(wantAppend);        msg.Add(changeCard);        msg.Add((byte)cardIdxList.Count);        for (int i = 0;i < cardIdxList.Count; i++)        {            msg.Add(cardIdxList[i]);        }    }    public uint userid; //账号    public byte fromType; //0取丢堆,1还是桌面牌,3追打    public byte wantAppend; //是否可以追加 0 放弃追加，1追加，3 正常牌型    public byte changeCard; //换取的牌    public List<byte> cardIdxList; //丢牌列表}public class Ex_CMGameEnd:DDLMessageBase{    public void SetSendData(UMessage msg)    {        //msg.Add(diuMsgType);        msg.Add(userid);    }    public uint userid; //账号}public class Ex_CMGameAuto:DDLMessageBase{    public void SetSendData(UMessage msg)    {        //msg.Add(diuMsgType);        msg.Add(userid);    }    public uint userid; //账号}public class Ex_CMGameEmotion:DDLMessageBase{    public void SetSendData(UMessage msg)    {        //msg.Add(diuMsgType);        msg.Add(userid);        msg.Add(emotionId);    }    public uint userid; //账号    public uint emotionId; //表情ID}public class Ex_CMGameExit:DDLMessageBase{    public void SetSendData(UMessage msg)    {        //msg.Add(diuMsgType);        msg.Add(userid);    }    public uint userid;//账号}public class Ex_CMGamelimit:DDLMessageBase{    public void SetSendData(UMessage msg)    {        //msg.Add(diuMsgType);        msg.Add(userid);    }    public uint userid;//账号}public class Ex_CMGameScene : DDLMessageBase{    public void SetSendData(UMessage msg)    {        msg.Add(diuMsgType);        msg.Add(userid);    }    public uint userid;}//public struct Ex_SMRegion//{//    public int code; //状态码//    public string msg; //消息//    public int uid; //玩家ID//    public int uintscore; //底分//    public int standardscore; //达标分数分//    public int gameTotalCount; //总局数//    public int reward; //获胜的奖励//}public class Ex_SMSitDown{    public uint roomid; //房间id    public byte nNum; //房间人数    public List<Ex_SitDownPlayer> ps;//玩家数据}public class Ex_SitDownPlayer{    public uint userid;//用户id    public string userName;//用户名字    public Int64 userCoin;//用户钱币    public uint faceId;//用户faceId
    public string url;}public class Ex_SMGameStart{    public uint userid; //优先出牌人的uid    public byte roomType;//1普通场 2达标场    public byte roomLevel;//4个场次    public uint scorePro;//底分    public uint standardScore;//达标分    public uint maxNum;//最大场次    public uint countNum;//当前场次    public uint rewardCoin;//奖金分    public List<byte> usercardList; //当前手牌}public class Ex_SMAction{    public byte canAppend;//是否可以追加 0 不可以追加，1可以追加    public uint curUserId;//当前出牌椅子号    public uint nextUserId;//下一个出牌椅子号    public byte fromType;//取丢堆-0还是桌面牌-1    public List<byte> cardIdxList;//丢牌列表    public byte changeCard;//换取的牌    public uint score;//本次得分(倍数)}public class Ex_SMGameEnd{    public uint score; //最终倍数    public byte finish; //完成标志 1-完成 0 未完成    public byte gameCount; //对局数    public List<Ex_MFPlayerData> playerDataList; //玩家数据信息}public class Ex_SMGameScene{    public uint myUid; //自己userID    public long myCarryInCoin;//自己的钱    public uint myStandardScore;//自己达标场的分数    public uint otherUid; //对手的userID    public string otherName;//对手的名字    public uint otherFaceId;//对手的faceid    public long otherCarryInCoin;//对手的钱    public byte otherIsTruste;//对手是否托管    public uint otherStandardScore;//对手达标场的分数    public byte otherNum;//对手的牌张数    public byte areaId; //大场id   1,2    public byte regionId; //小场id     1,2,3,4    //public List<Ex_MFPlayer> player; //玩家基本信息    public uint curActionCID; //当前出牌椅子号    //public int cardAppend; //0不追加，大于0 为追加值    public uint playcount; //竞技场连续局数，达标赛传0(当前场数)    public uint scorePro;//分数比例(底分)    public uint standardScore;//达标场的达标分    public uint rewardCoin;//奖励的钱    public uint maxNum; //竞技场对局数(总场数)    public uint addMultiple;//倍数    public List<byte> outCardList;//当前扔在桌上的牌    //public Ex_MFTable table; //桌子信息    public List<byte> usercardList; //当前手牌    //public List<int> awards_list; //奖励列表 [0]是奖牌值，[1]是银两}public class Ex_SMGameAuto{    public uint userid; //托管user椅子ID    public bool isAuto; //托管状态 1-托管 0-取消}public class Ex_SMGameEmotion{    public uint userid; //账号    public uint emotionId;//表情ID}public class Ex_SMGamelimit{    public List<Ex_MFNormallimit> normallimit; //普通各场的比例    public List<Ex_MFStandardlimit> standardlimit; //达标各场的限制}public class Ex_SMNoGameScene{    public long coin;//玩家身上的钱}public class Ex_DataCenter{    private static Ex_DataCenter instance;    public Ex_CMLogin ex_CMLogin;    public Ex_CMRegion ex_CMRegion;    public Ex_CMAction ex_CMAction;    public Ex_CMGameEnd ex_CMGameEnd;    public Ex_CMGameAuto ex_CMGameAuto;    public Ex_CMGameEmotion ex_CMGameEmotion;    public Ex_CMGameExit ex_CMGameExit;    public Ex_CMGamelimit ex_CMGamelimit;    //public Ex_SMLogin ex_SMLogin;    //public Ex_SMRegion ex_SMRegion;    public Ex_SMSitDown ex_SMSitDown;    public Ex_SMGameStart ex_SMGameStart;    public Ex_SMAction ex_SMAction;    public Ex_SMGameEnd ex_SMGameEnd;    public Ex_SMGameScene ex_SMGameScene;    public Ex_SMGameAuto ex_SMGameAuto;    public Ex_SMGameEmotion ex_SMGameEmotion;    //public Ex_SMGamelimit ex_SMGamelimit;    private Ex_DataCenter()    {        //ex_CMLogin = new Ex_CMLogin();        //ex_CMRegion = new Ex_CMRegion();        //ex_CMAction = new Ex_CMAction();        //ex_CMGameEnd = new Ex_CMGameEnd();        //ex_CMGameAuto = new Ex_CMGameAuto();        //ex_CMGameEmotion = new Ex_CMGameEmotion();        //ex_CMGameExit = new Ex_CMGameExit();        //ex_CMGamelimit = new Ex_CMGamelimit();        //ex_SMLogin = new Ex_SMLogin();        //ex_SMRegion = new Ex_SMRegion();        //ex_SMSitDown = new Ex_SMSitDown();        //ex_SMGameStart = new Ex_SMGameStart();        //ex_SMAction = new Ex_SMAction();        //ex_SMGameEnd = new Ex_SMGameEnd();        //ex_SMGameScene = new Ex_SMGameScene();        //ex_SMGameAuto = new Ex_SMGameAuto();        //ex_SMGameEmotion = new Ex_SMGameEmotion();        //ex_SMGamelimit = new Ex_SMGamelimit();    }    public static Ex_DataCenter Instance()    {        if (Ex_DataCenter.instance == null)            Ex_DataCenter.instance = new Ex_DataCenter();        return Ex_DataCenter.instance;    }}