using System.Collections.Generic;using XLua;[Hotfix]public class Ex_JudgeCard
{    /**     * 判断可不可以出牌     * @param arr 已经选的牌     * @param card 将要选的牌     * @returns {boolean} 是否可以选出牌     */    public static bool isCanOut(List<byte> arr, byte card, List<byte> allCard)    {        if (arr.Count == 0)        {            return true;        }        List<byte> arrCard = new List<byte>(arr);        arrCard.Add(card);        //判断所选牌是否符合牌型        if (GetCardsTypeKing(arrCard) != -1)        {            return true;        }        //判断所选牌在手牌中，是否有符合牌型的情况        if (allCard.Count - arrCard.Count == 1)        {            if (GetCardsTypeKing(allCard) != -1)            {                return true;            }        }        if (allCard.Count - arrCard.Count == 2)        {            List<byte> newArr = new List<byte>();            for (int i = 0; i < allCard.Count; i++)            {                bool tem = false;                for (int j = 0; j < arrCard.Count; j++)                {                    if (allCard[i] == arrCard[j])                    {                        tem = true;                        break;                    }                }                if (!tem)                {                    newArr.Add(allCard[i]);                }            }            List<byte> _arr = new List<byte>(arrCard.ToArray());            _arr.Add(newArr[0]);            if (GetCardsTypeKing(_arr) != -1)            {                return true;            }            List<byte> _arr1 = new List<byte>(arrCard.ToArray());            _arr1.Add(newArr[1]);            if (GetCardsTypeKing(_arr1) != -1)            {                return true;            }            if (GetCardsTypeKing(allCard) != -1)            {                return true;            }        }        if (allCard.Count - arrCard.Count == 3)        {            List<byte> newArr = new List<byte>();            for (int i = 0; i < allCard.Count; i++)            {                bool tem = false;                for (int j = 0; j < arrCard.Count; j++)                {                    if (allCard[i] == arrCard[j])                    {                        tem = true;                        break;                    }                }                if (!tem)                {                    newArr.Add(allCard[i]);                }            }            List<byte> _arr = new List<byte>(arrCard.ToArray());            _arr.Add(newArr[0]);            if (GetCardsTypeKing(_arr) != -1)            {                return true;            }            List<byte> _arr1 = new List<byte>(arrCard.ToArray());            _arr1.Add(newArr[1]);            if (GetCardsTypeKing(_arr1) != -1)            {                return true;            }            List<byte> _arr2 = new List<byte>(arrCard.ToArray());            _arr2.Add(newArr[2]);            if (GetCardsTypeKing(_arr2) != -1)            {                return true;            }            List<byte> _arr3 = new List<byte>(arrCard.ToArray());            _arr3.Add(newArr[0]);            _arr3.Add(newArr[1]);            if (GetCardsTypeKing(_arr3) != -1)            {                return true;            }            List<byte> _arr4 = new List<byte>(arrCard.ToArray());            _arr4.Add(newArr[0]);            _arr4.Add(newArr[2]);            if (GetCardsTypeKing(_arr4) != -1)            {                return true;            }            List<byte> _arr5 = new List<byte>(arrCard.ToArray());            _arr5.Add(newArr[1]);            _arr5.Add(newArr[2]);            if (GetCardsTypeKing(_arr5) != -1)            {                return true;            }            if (GetCardsTypeKing(allCard) != -1)            {                return true;            }        }        return false;    }    /**     * 获取牌型     * @param arr     * @returns {any} 可以带大小王 0五连同花顺 1炸弹 2四联同花顺 3三联同花顺 4三张 5对子 6单张     */    public static int GetCardsTypeKing(List<byte> arr)    {        int num = 0;        List<byte> cardArr = new List<byte>();        for (int i = 0; i < arr.Count; i++)        {            if (GameCommon.GetCardColor(arr[i]) == 4)            {                num++;            }            else            {                cardArr.Add(arr[i]);            }        }        if (num == 0)        {            List<byte> _arr = new List<byte>();            for (int i = 0; i < arr.Count; i++)                    {                _arr.Add(arr[i]);            }            return GetCardsType(_arr);        }        if (arr.Count == 2 && num >= 1)        {            return 5;        }        if (arr.Count == 3 && num == 2)        {            return 4;        }        if (num == 1)        {            for (int i = 0; i < Ex_GameData.STD_CARDS.Length - 2; i++)            {                List<byte> tempCA = new List<byte>(cardArr);                tempCA.Add(Ex_GameData.STD_CARDS[i]);                int idx = GetCardsType(tempCA);                if (idx != -1)                {                    return idx;                }            }        }        if (num == 2)        {            for (int i = 0; i < Ex_GameData.STD_CARDS.Length - 2; i++)            {                for (int j = 0; j < Ex_GameData.STD_CARDS.Length - 2; j++)                {                    List<byte> tempCA = new List<byte>(cardArr);                    tempCA.Add(Ex_GameData.STD_CARDS[i]);                    tempCA.Add(Ex_GameData.STD_CARDS[j]);                    int idx = GetCardsType(tempCA);                    if (idx != -1)                    {                        return idx;                    }                }            }        }        return -1;    }    /**     *     * @param arr     * @returns {any} 不能带大小王 0五连同花顺 1炸弹 2四联同花顺 3三联同花顺 4三张 5对子 6单张     */    private static int GetCardsType(List<byte> arr)    {        if (arr.Count == 1)        {            return 6;        }        if (arr.Count == 2)        {            if (GameCommon.GetCardValue(arr[0]) == GameCommon.GetCardValue(arr[1]))            {                return 5;            }        }        List<byte> arrCard = new List<byte>(arr);        arrCard.Sort();        if (arrCard.Count == 3)        {            if (GameCommon.GetCardColor(arrCard[0]) == GameCommon.GetCardColor(arrCard[1]) && GameCommon.GetCardColor(arrCard[1]) == GameCommon.GetCardColor(arrCard[2]))            {                if (GameCommon.GetCardValue(arrCard[0]) == GameCommon.GetCardValue(arrCard[1]) - 1 && GameCommon.GetCardValue(arrCard[1]) == GameCommon.GetCardValue(arrCard[2]) - 1)                {                    return 3;                }            }            if (GameCommon.GetCardValue(arrCard[0]) == GameCommon.GetCardValue(arrCard[1]) && GameCommon.GetCardValue(arrCard[1]) == GameCommon.GetCardValue(arrCard[2]))            {                return 4;            }        }        if (arrCard.Count == 4)        {            if (GameCommon.GetCardValue(arrCard[0]) == GameCommon.GetCardValue(arrCard[1]) && GameCommon.GetCardValue(arrCard[1]) == GameCommon.GetCardValue(arrCard[2]) && GameCommon.GetCardValue(arrCard[2]) == GameCommon.GetCardValue(arrCard[3]))            {                return 1;            }            if (GameCommon.GetCardColor(arrCard[0]) == GameCommon.GetCardColor(arrCard[1]) && GameCommon.GetCardColor(arrCard[1]) == GameCommon.GetCardColor(arrCard[2]) && GameCommon.GetCardColor(arrCard[2]) == GameCommon.GetCardColor(arrCard[3]))            {                bool tmp = true;                for (int i = 0; i < arrCard.Count - 1; i++)                {                    if (GameCommon.GetCardValue(arrCard[i]) != GameCommon.GetCardValue(arrCard[i + 1]) - 1)                    {                        tmp = false;                        break;                    }                }                if (tmp)                {                    return 2;                }            }        }        if (arrCard.Count == 5)        {            if (GameCommon.GetCardColor(arrCard[0]) == GameCommon.GetCardColor(arrCard[1]) && GameCommon.GetCardColor(arrCard[1]) == GameCommon.GetCardColor(arrCard[2]) && GameCommon.GetCardColor(arrCard[2]) == GameCommon.GetCardColor(arrCard[3]) && GameCommon.GetCardColor(arrCard[3]) == GameCommon.GetCardColor(arrCard[4]))            {                bool tmp = true;                for (int i = 0; i < arrCard.Count - 1; i++)                {                    if (GameCommon.GetCardValue(arrCard[i]) != GameCommon.GetCardValue(arrCard[i + 1]) - 1)                    {                        tmp = false;                        break;                    }                }                if (tmp)                {                    return 0;                }            }        }        return -1;    }}