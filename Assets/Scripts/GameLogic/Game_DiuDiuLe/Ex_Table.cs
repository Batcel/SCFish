using UnityEngine;using DG.Tweening;using System.Collections.Generic;using UnityEngine.UI;using USocket.Messages;using DragonBones;using UnityEngine.EventSystems;using System.Linq;using System;using XLua;[Hotfix]public class Ex_Table : Ex_IBaseUI{    enum type {        putong = 1,        dabiao    }    public int stype = 1;    GameObject tableUI;    GameObject go_bg;    GameObject go_top;    GameObject go_top_turns;    GameObject go_tru2Icon;    GameObject go_returnBtn;    GameObject go_otherInfo;    GameObject go_otherHead;    GameObject go_otherMoney;    GameObject go_otherName;    GameObject go_otherScore;    Ex_PicFont pf_otherScore;    GameObject go_bottom;    GameObject go_bottom_turns;    GameObject go_tru1Icon;    GameObject go_myInfo;    GameObject go_myHead;    GameObject go_myMoney;    GameObject go_myName;    GameObject go_boomBtn;    GameObject go_myScore;    Ex_PicFont pf_myScore;    GameObject go_combo;    GameObject go_combo_ok;    GameObject go_combo_cancel;    GameObject go_middle;    GameObject go_card_close;    GameObject go_countdown;    GameObject go_card_closeBtn;    GameObject go_card_group;    GameObject go_putongM;    GameObject go_dizhu;    GameObject go_beishu;    Ex_PicFont pf_beishu;    GameObject go_ruleBtn;    GameObject go_dabiaoM;//达标场    GameObject go_mubiaofen;    Ex_PicFont pf_mubiaofen;    GameObject go_huihe;    GameObject go_fenshuBG;    GameObject go_xiaojie;    GameObject go_xiaojie_top;    GameObject go_top_result_win;    GameObject go_top_result_lose;    GameObject go_top_dianshu;    Ex_PicFont pf_top_dianshu;    GameObject go_top_fenshu1;    Ex_PicFont pf_top_fenshu1;    GameObject go_top_fuhao;    GameObject go_top_fenshu2;    Ex_PicFont pf_top_fenshu2;    GameObject go_top_boom;    GameObject go_top_shaka;    GameObject go_xiaojie_bottom;    GameObject go_bottom_result_win;    GameObject go_bottom_result_lose;    GameObject go_bottom_dianshu;    Ex_PicFont pf_bottom_dianshu;    GameObject go_bottom_fenshu1;    Ex_PicFont pf_bottom_fenshu1;    GameObject go_bottom_fuhao;    GameObject go_bottom_fenshu2;    Ex_PicFont pf_bottom_fenshu2;    GameObject go_bottom_boom;    GameObject go_bottom_shaka;    GameObject go_myFen;    Ex_PicFont pf_myFen;    GameObject go_otherFen;    Ex_PicFont pf_otherFen;    GameObject go_huihe_tip;    GameObject go_huihe_text;    GameObject go_face;    GameObject go_otherEmotionA;    GameObject go_ani_otherEmotion;    UnityArmatureComponent uac_otherEmotion;    GameObject go_expression;    GameObject go_emotionBtn;    GameObject go_emotionGroup;    GameObject go_emotion1;    GameObject go_emotion2;    GameObject go_emotion3;    List<GameObject> emotionArr;    GameObject go_myEmotionA;    GameObject go_ani_myEmotion;    UnityArmatureComponent uac_myEmotion;    GameObject go_trusteeship;    GameObject go_trusteeship_cancel;    GameObject go_pop_up;    GameObject go_rule;    GameObject go_rule_closeBtn;    GameObject go_ani_boom2;//boom或shakalaka动画 自己    GameObject go_ani_boom1;//boom或shakalaka动画 对手    List<GameObject> aniArr;//达标场使用    Ex_Time ex_time;    bool canTouch = false;//true 可以 false 不可以    bool isZhuijia = false;    byte zhuijiaNum = (byte)0;    float handJiange = 8f;    float faPaiSpeed = 0.4f;    int myScore = 0;    int otherScore = 0;    bool isCanClick = false;//是否可以出牌    uint curPlayer = 1;//1 自己 2 对手    int lastChuNum = 0;    int beiNum = 1;    int isSha = 0;// 1 上边 2 下边    int boomNum = 0;// 1 上边 2 下边    long isWinNum = 0;//赢了多少钱    int diFen = 0;//底分    int result_dianShu = 0;//普通场结算点数    //达标场    int myFen = 0;    int otherFen = 0;    int isOtherWinNum = 0;    Dictionary<GameObject, Ex_Card> cardsArr;    Dictionary<GameObject, Ex_Card> myHandCardArr;    Dictionary<GameObject, Ex_Card> otherHandCardArr;    Dictionary<GameObject, Ex_Card> chooseArr;    List<List<float>> myHandCardPosArr;    List<List<float>> otherHandCardPosArr;    Dictionary<GameObject, Ex_Card> outCardArr;//已经出的牌    Ex_Table ex_table;    public void Update()    {        if (ex_time != null)        {            ex_time.Update();        }    }    public void InitUI(GameObject _tableUI, Ex_Table _ex_table, bool isReconect,int _stype)    {        tableUI = _tableUI;        ex_table = _ex_table;        stype = _stype;        CGame_DiuDiuLe.SetCurUI(ex_table);        Ex_GameData.ISPLAYING = true;        go_bg = tableUI.transform.Find("MainBG_").gameObject;        go_top = tableUI.transform.Find("Top").gameObject;        go_top_turns = go_top.transform.Find("ImageTurns").gameObject;        go_tru2Icon = go_top.transform.Find("Tru2Icon").gameObject;        go_returnBtn = go_top.transform.Find("ButtonReturn").gameObject;        go_otherInfo = go_top.transform.Find("ImageHeadBG").gameObject;        go_otherHead = go_otherInfo.transform.Find("Image_Mask").Find("Image_Head").gameObject;        go_otherMoney = go_otherInfo.transform.Find("TextMoney").gameObject;        go_otherName = go_otherInfo.transform.Find("TextName").gameObject;        go_otherScore = go_top.transform.Find("TextScoreBG").gameObject;        pf_otherScore = new Ex_PicFont();        pf_otherScore.Init("Text_bai_", go_otherScore);        go_bottom = tableUI.transform.Find("Bottom").gameObject;        go_bottom_turns = go_bottom.transform.Find("ImageTurns").gameObject;        go_tru1Icon = go_bottom.transform.Find("Tru1Icon").gameObject;        go_myInfo = go_bottom.transform.Find("BottomBG").Find("ImageHeadBG").gameObject;        go_myHead = go_myInfo.transform.Find("Image_Mask").Find("Image_Head").gameObject;        go_myMoney = go_myInfo.transform.Find("TextMoney").gameObject;        go_myName = go_myInfo.transform.Find("TextName").gameObject;        go_boomBtn = go_bottom.transform.Find("BottomBG").Find("ButtonBoom").gameObject;        go_myScore = go_bottom.transform.Find("BottomBG").Find("TextScoreBG").gameObject;        pf_myScore = new Ex_PicFont();        pf_myScore.Init("Text_bai_", go_myScore);        go_combo = go_bottom.transform.Find("GoOn").gameObject;        go_combo_ok = go_combo.transform.Find("ButtonOk").gameObject;        go_combo_cancel = go_combo.transform.Find("ButtonCancel").gameObject;        go_middle = tableUI.transform.Find("Middle").gameObject;        go_card_close = go_middle.transform.Find("Card_Close").gameObject;        go_countdown = go_card_close.transform.Find("CountDown").gameObject;        go_card_closeBtn = go_card_close.transform.Find("ButtonCard_Close").gameObject;        go_card_group = go_middle.transform.Find("Card_Group").gameObject;        go_putongM = go_middle.transform.Find("Mode_PoTong").gameObject;        go_dizhu = go_putongM.transform.Find("ImageDiZhuBG").Find("Text").gameObject;        go_beishu = go_putongM.transform.Find("ImageBeiShuBG").gameObject;        pf_beishu = new Ex_PicFont();        pf_beishu.Init("Text_bai_", go_beishu);        pf_beishu.SetText(beiNum.ToString());        go_ruleBtn = go_putongM.transform.Find("ButtonRule").gameObject;        go_dabiaoM = go_middle.transform.Find("Mode_DaBiao").gameObject;        GameObject go_huiheBG = go_dabiaoM.transform.Find("HuiheBG_Text").gameObject;        go_mubiaofen = go_huiheBG.transform.Find("Mubiaofen").gameObject;        pf_mubiaofen = new Ex_PicFont();        pf_mubiaofen.Init("Text_xiaobai_",go_mubiaofen);        go_huihe = go_huiheBG.transform.Find("Huihe").Find("Text").gameObject;        go_fenshuBG = go_dabiaoM.transform.Find("ImageFenshuBG").gameObject;        if (stype == (int)type.dabiao)        {            aniArr = new List<GameObject>();            go_xiaojie = go_fenshuBG.transform.Find("FenshuBG_Xiaojie").gameObject;            go_xiaojie_top = go_xiaojie.transform.Find("Image_Top").gameObject;            go_top_result_win = go_xiaojie_top.transform.Find("ImageResult").Find("ImageWin").gameObject;            go_top_result_lose = go_xiaojie_top.transform.Find("ImageResult").Find("ImageLose").gameObject;            go_top_dianshu = go_xiaojie_top.transform.Find("ImageDianshu").Find("ImageTextBG").gameObject;            pf_top_dianshu = new Ex_PicFont();            pf_top_dianshu.Init("Text_bai_", go_top_dianshu);            go_top_fenshu1 = go_xiaojie_top.transform.Find("ImageFenshu").Find("ImageFenshu_1").gameObject;            pf_top_fenshu1 = new Ex_PicFont();            pf_top_fenshu1.Init("Text_xiaobai_", go_top_fenshu1);            go_top_fuhao = go_xiaojie_top.transform.Find("ImageFenshu").Find("Text_Fuhao").gameObject;            go_top_fenshu2 = go_xiaojie_top.transform.Find("ImageFenshu").Find("ImageFenshu_2").gameObject;            pf_top_fenshu2 = new Ex_PicFont();            pf_top_fenshu2.Init("Text_xiaobai_", go_top_fenshu2);            go_top_boom = go_xiaojie_top.transform.Find("ImageBoom").Find("ImageBoom").gameObject;            go_top_shaka = go_xiaojie_top.transform.Find("ImageBoom").Find("ImageShakalaka").gameObject;            go_xiaojie_bottom = go_xiaojie.transform.Find("Image_Bottom").gameObject;            go_bottom_result_win = go_xiaojie_bottom.transform.Find("ImageResult").Find("ImageWin").gameObject;            go_bottom_result_lose = go_xiaojie_bottom.transform.Find("ImageResult").Find("ImageLose").gameObject;            go_bottom_dianshu = go_xiaojie_bottom.transform.Find("ImageDianshu").Find("ImageTextBG").gameObject;            pf_bottom_dianshu = new Ex_PicFont();            pf_bottom_dianshu.Init("Text_bai_", go_bottom_dianshu);            go_bottom_fenshu1 = go_xiaojie_bottom.transform.Find("ImageFenshu").Find("ImageFenshu_1").gameObject;            pf_bottom_fenshu1 = new Ex_PicFont();            pf_bottom_fenshu1.Init("Text_xiaobai_", go_bottom_fenshu1);            go_bottom_fuhao = go_xiaojie_bottom.transform.Find("ImageFenshu").Find("Text_Fuhao").gameObject;            go_bottom_fenshu2 = go_xiaojie_bottom.transform.Find("ImageFenshu").Find("ImageFenshu_2").gameObject;            pf_bottom_fenshu2 = new Ex_PicFont();            pf_bottom_fenshu2.Init("Text_xiaobai_", go_bottom_fenshu2);            go_bottom_boom = go_xiaojie_bottom.transform.Find("ImageBoom").Find("ImageBoom").gameObject;            go_bottom_shaka = go_xiaojie_bottom.transform.Find("ImageBoom").Find("ImageShakalaka").gameObject;        }        go_myFen = go_fenshuBG.transform.Find("FenshuBG_Bottom").gameObject;        pf_myFen = new Ex_PicFont();        pf_myFen.Init("Text_xiaobai_",go_myFen);        go_otherFen = go_fenshuBG.transform.Find("FenshuBG_Top").gameObject;        pf_otherFen = new Ex_PicFont();        pf_otherFen.Init("Text_xiaobai_",go_otherFen);        go_huihe_tip = go_dabiaoM.transform.Find("HuiheBG_Tip").gameObject;        go_huihe_text = go_huihe_tip.transform.Find("ImageTextBG").Find("ImageText").gameObject;        go_face = tableUI.transform.Find("Face").gameObject;        go_otherEmotionA = go_face.transform.Find("Face_Top").Find("FaceShow").gameObject;        go_expression = go_face.transform.Find("Face_Bottom").gameObject;        go_emotionBtn = go_expression.transform.Find("ButtonFace").gameObject;        go_emotionGroup = go_expression.transform.Find("FaceSelectBG").gameObject;        go_emotion1 = go_emotionGroup.transform.Find("Face_01").gameObject;        go_emotion2 = go_emotionGroup.transform.Find("Face_02").gameObject;        go_emotion3 = go_emotionGroup.transform.Find("Face_03").gameObject;        emotionArr = new List<GameObject>();        emotionArr.Add(go_emotion1);        emotionArr.Add(go_emotion2);        emotionArr.Add(go_emotion3);        go_myEmotionA = go_expression.transform.Find("FaceShow").gameObject;        go_trusteeship = tableUI.transform.Find("Trusteeship").gameObject;        go_trusteeship_cancel = go_trusteeship.transform.Find("ButtonCancel").gameObject;        go_pop_up = tableUI.transform.Find("Pop-up").gameObject;        go_rule = go_pop_up.transform.Find("Rule").gameObject;        go_rule_closeBtn = go_rule.transform.Find("ButtonClose").gameObject;        XPointEvent.AutoAddListener(go_returnBtn, TuiChuFunc, go_returnBtn);        XPointEvent.AutoAddListener(go_card_closeBtn, TouchFunc, go_card_closeBtn);        XPointEvent.AutoAddListener(go_combo_ok, TouchFunc, go_combo_ok);        XPointEvent.AutoAddListener(go_combo_cancel, TouchFunc, go_combo_cancel);        XPointEvent.AutoAddListener(go_ruleBtn, ShowRuleFunc, go_ruleBtn);        XPointEvent.AutoAddListener(go_rule_closeBtn, ShowRuleFunc, go_rule_closeBtn);        XPointEvent.AutoAddListener(go_emotionBtn, ShowExpression, go_emotionBtn);        XPointEvent.AutoAddListener(go_trusteeship_cancel, CancelTuoGuanFunc, go_trusteeship_cancel);        foreach (GameObject _go in emotionArr)        {            XPointEvent.AutoAddListener(_go, EmotionFunc, _go);        }        Sprite tempSprite = null;        if (stype == (int)type.putong)        {            go_putongM.SetActive(true);            tempSprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Main_BG");            go_dabiaoM.SetActive(false);        } else if (stype == (int)type.dabiao)        {            go_dabiaoM.SetActive(true);            tempSprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Main_BG_1");            go_putongM.SetActive(false);            if (!isReconect)            {                pf_myFen.SetText("0");                pf_otherFen.SetText("0");            }        }        go_bg.GetComponent<Image>().sprite = tempSprite;        ex_time = new Ex_Time();        ex_time.InitUI(go_countdown);        go_countdown.SetActive(false);        go_boomBtn.GetComponent<Image>().sprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Button_boom_02");        XPointEvent.AutoAddListener(go_boomBtn, BoomFunc, go_boomBtn);        cardsArr = new Dictionary<GameObject, Ex_Card>();        myHandCardArr = new Dictionary<GameObject, Ex_Card>();        otherHandCardArr = new Dictionary<GameObject, Ex_Card>();        chooseArr = new Dictionary<GameObject, Ex_Card>();        outCardArr = new Dictionary<GameObject, Ex_Card>();        myHandCardPosArr = GetMyHandCardPos(5);        otherHandCardPosArr = GetSanxingPos(5);        //StartSendCard(1,0);        canTouch = false;        ShowTuoGuan(0, false);        ShowTuoGuan(1, false);        ShowTip(0);        ShowCombo(false);        go_otherScore.SetActive(false);        go_myScore.SetActive(false);        if (isReconect)        {            SMGameScene();        }        else        {            SMSitDown();            SMGameStart();        }        if (Ex_GameData.BGSOUNDCONFIG)        {            if (stype == (int)type.putong)            {                AudioManager.Instance.PlayBGMusic("diu.resource", "ex_sPutngBg");            }            else if (stype == (int)type.dabiao)            {                AudioManager.Instance.PlayBGMusic("diu.resource", "ex_sDabiaoBg");            }        }        InitDDLMsg();    }    void SMSitDown()    {        Ex_SMSitDown msg = Ex_GameData.SMSitDownData;        for (int i = 0; i < 2; i++)        {            if (msg.ps[i].userid == GameMain.hall_.GetPlayerData().GetPlayerID())            {                Ex_GameData.myUserId = msg.ps[i].userid;                go_myName.GetComponent<Text>().text = msg.ps[i].userName;                go_myMoney.GetComponent<Text>().text = msg.ps[i].userCoin.ToString();                go_myHead.GetComponent<Image>().sprite = GameMain.hall_.GetIcon(GameMain.hall_.GetPlayerData().GetPlayerIconURL(),                     GameMain.hall_.GetPlayerId(), (int)GameMain.hall_.GetPlayerData().PlayerIconId);            }            else            {                Ex_GameData.otherUserId = msg.ps[i].userid;                go_otherName.GetComponent<Text>().text = msg.ps[i].userName;                go_otherMoney.GetComponent<Text>().text = msg.ps[i].userCoin.ToString();                go_otherHead.GetComponent<Image>().sprite = GameMain.hall_.GetIcon(Ex_GameData.otherUrl, Ex_GameData.otherUserId, (int)Ex_GameData.otherFaceId);            }        }    }    void SMGameStart()    {        Ex_GameData.IsInGame = true;        if (stype == (int)type.putong)        {            StartSendCard();        }        else if (stype == (int)type.dabiao)        {            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource","ex_sRound");            }            Ex_SMGameStart msg = Ex_GameData.SMGameStartData;            Ex_GameData.TotalCount = (int)msg.maxNum;            go_huihe_tip.SetActive(true);            Sprite temp_sprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Text_JSbai_"+(msg.countNum+1));            go_huihe_text.GetComponent<Image>().sprite = temp_sprite;            int a = 0;            Tweener t = DOTween.To(() => a, r => a = r, 0, 1);            t.OnComplete(() => {                go_huihe_tip.SetActive(false);                StartSendCard();            });        }    }    void TweenWait(int index, GameObject cardUI, Ex_Card ex_card)    {        Sequence s1 = DOTween.Sequence();        int a = 0;        Tweener t = DOTween.To(() => a, r => a = r, 0, index * faPaiSpeed / 2);        s1.Append(t);        GameObject go = cardUI;        if (index % 2 == 0)        {            myHandCardArr.Add(go, ex_card);            XPointEvent.AutoAddListener(go, TouchFunc, go);            List<float> posArr = myHandCardPosArr[index / 2];            s1.AppendCallback(() =>            {                if (Ex_GameData.SOUNDCONFIG)                {                    AudioManager.Instance.PlaySound("diu.resource", "ex_sFapai");                }                DOTween.To(() => go.transform.localPosition, r => go.transform.localPosition = r, new Vector3(posArr[0], posArr[1], 0), faPaiSpeed).SetEase(Ease.InOutSine);                DOTween.To(() => go.transform.eulerAngles, x => go.transform.eulerAngles = x, new Vector3(0f, 0f, posArr[2]), faPaiSpeed).SetEase(Ease.InOutSine);            }            );        }        else        {            otherHandCardArr.Add(go, ex_card);            List<float> posArr = otherHandCardPosArr[index / 2];            s1.AppendCallback(() =>            {                if (Ex_GameData.SOUNDCONFIG)                {                    AudioManager.Instance.PlaySound("diu.resource", "ex_sFapai");                }                DOTween.To(() => go.transform.localPosition, r => go.transform.localPosition = r, new Vector3(posArr[0], posArr[1], 0), faPaiSpeed).SetEase(Ease.InOutSine);                DOTween.To(() => go.transform.eulerAngles, x => go.transform.eulerAngles = x, new Vector3(0f, 0f, posArr[2]), faPaiSpeed).SetEase(Ease.InOutSine);            }            );        }    }    /**     * chairId 0:自己 1:对手     */    void ShowTuoGuan(int chairID, bool isTuoGuan)    {        if (chairID == 0)        {            if (isTuoGuan)            {                go_tru1Icon.SetActive(true);                go_trusteeship.SetActive(true);            }            else            {                go_tru1Icon.SetActive(false);                go_trusteeship.SetActive(false);            }        }        else if (chairID == 1)        {            if (isTuoGuan)            {                go_tru2Icon.SetActive(true);            }            else            {                go_tru2Icon.SetActive(false);            }        }    }    /**     * type 0,全部不显示     */    void ShowTip(uint type)    {        isCanClick = false;        ex_time.StopTime();        if (type == GameMain.hall_.GetPlayerData().GetPlayerID())        {            go_top_turns.transform.localPosition = new Vector3(0f, -62f, 0f);            DOTween.To(() => go_top_turns.transform.localPosition, r => go_top_turns.transform.localPosition = r, new Vector3(0, 62f, 0f), 0.2f).SetEase(Ease.InOutSine);            go_bottom_turns.transform.localPosition = new Vector3(0f, -163f, 0f);            DOTween.To(() => go_bottom_turns.transform.localPosition, r => go_bottom_turns.transform.localPosition = r, new Vector3(0, 163f, 0f), 0.2f).SetEase(Ease.InOutSine);            ex_time.StartTime();            isCanClick = true;            if (!Ex_GameData.isXinshou)            {                if (GetMyScore() <= 7 && !isZhuijia)                {                    ShowBoom(true);                }            }        } else if (type == Ex_GameData.otherUserId)        {            go_top_turns.transform.localPosition = new Vector3(0f, 62f, 0f);            DOTween.To(() => go_top_turns.transform.localPosition, r => go_top_turns.transform.localPosition = r, new Vector3(0, -62f, 0f), 0.2f).SetEase(Ease.InOutSine);            go_bottom_turns.transform.localPosition = new Vector3(0f, 163f, 0f);            DOTween.To(() => go_bottom_turns.transform.localPosition, r => go_bottom_turns.transform.localPosition = r, new Vector3(0, -163f, 0f), 0.2f).SetEase(Ease.InOutSine);            ex_time.StartTime();            ShowBoom(false);        } else if (type == 0)        {            go_top_turns.transform.localPosition = new Vector3(0f, 62f, 0f);            go_bottom_turns.transform.localPosition = new Vector3(0f, -163f, 0f);        }    }    void ShowCombo(bool isCombo)    {        if (isCombo)        {            go_combo.SetActive(true);        }        else        {            go_combo.SetActive(false);        }    }    void TuiChuFunc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource", "ex_sBtn");            }            //UnityFactory.factory.Clear();            CGame_DiuDiuLe.RemoveChildrens();            GameObject homeUI = CGame_DiuDiuLe.LoadPrefab("DiuDiuLe_Lobby");            Ex_Home ex_home = new Ex_Home();            ex_home.InitUI(homeUI, ex_home);            Ex_GameData.ISPLAYING = false;            tableUI = null;        }    }    void AgainFunc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource", "ex_sBtn");            }            //UnityFactory.factory.Clear();            CGame_DiuDiuLe.RemoveChildrens();            GameObject homeUI = CGame_DiuDiuLe.LoadPrefab("DiuDiuLe_Lobby");            Ex_Home ex_home = new Ex_Home();            ex_home.InitUI(homeUI, ex_home);            ex_home.RegionFunc(Ex_GameData.areaId, Ex_GameData.regionId);            tableUI = null;        }    }    //localposition    List<List<float>> GetMyHandCardPos(int num)    {        List<List<float>> rt_list = new List<List<float>>();        if (num > 0)        {            for (var i = 0; i < num; i++)            {                List<float> pos = new List<float>();                float startX = (540 - num * 86 - (num - 1) * handJiange) / 2 + 86 / 2;                pos.Add(startX + i * (86 + handJiange) - 540/2);    //x                pos.Add(150-960/2);       //y                pos.Add(360);       //r                rt_list.Add(pos);            }        }        return rt_list;    }    //localposition    List<List<float>> GetSanxingPos(int num)    {        List<List<float>> rt_list = new List<List<float>>();        if (num > 0)        {            float jian = 12f;            float banjin = 180f;            for (var i = 0; i < num; i++)            {                List<float> pos = new List<float>();                float r = (180 - jian * (num - 1)) / 2 + i * jian;                float x = 290 - Mathf.Cos(r * 2 * Mathf.PI / 360) * banjin;                float y = 960 + 170 - Mathf.Sin(r * 2 * Mathf.PI / 360) * banjin;                pos.Add(x-540/2);                pos.Add(y-960/2);                pos.Add(90 + r);                rt_list.Add(pos);            }        }        return rt_list;    }    void TouchFunc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            if (!canTouch)            {                return;            }            if (isZhuijia)            {                //追加                if (button == (object)go_combo_cancel)                {                    if (!Ex_GameData.isXinshou)                    {                        //              MyNet.i().sendMsg(CMAction({                        //                  'userid':GameData.myUserId,                        //	'fromType': -1,                        //	'wantAppend' : 0,                        //	'cardIdxList': [],                        //	'changeCard' : 0                        //}));                        //发送CMAction消息                        UMessage app = new UMessage((uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_ACTION);                        Ex_CMAction ex_CMAction = new Ex_CMAction();                        ex_CMAction.diuMsgType = (uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_ACTION;                        ex_CMAction.userid = GameMain.hall_.GetPlayerData().GetPlayerID();                        ex_CMAction.fromType = (byte)3;                        ex_CMAction.wantAppend = (byte)0;                        ex_CMAction.changeCard = (byte)0;                        ex_CMAction.cardIdxList = new List<byte>();                        ex_CMAction.SetSendData(app);                        if (HallMain.gametcpclient.IsSocketConnected)                        {                            HallMain.SendMsgToRoomSer(app);                        }                    }                    go_combo.SetActive(false);                    canTouch = false;                    ShowBoom(false);                    foreach (GameObject _go in chooseArr.Keys)                    {                        chooseArr[_go].setState(false);                    }                    chooseArr.Clear();                } else if (button == (object)go_combo_ok)                {                    PlaySound(lastChuNum + 1);                    if (!Ex_GameData.isXinshou)                    {                        //              MyNet.i().sendMsg(CMAction({                        //                  'userid':GameData.myUserId,                        //	'fromType': -1,                        //	'wantAppend' : 1,                        //	'cardIdxList': [this.zuijiaNum],                        //	'changeCard' : 0                        //}));                        //发送CMAction消息                        UMessage app = new UMessage((uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_ACTION);                        Ex_CMAction ex_CMAction = new Ex_CMAction();                        ex_CMAction.diuMsgType = (uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_ACTION;                        ex_CMAction.userid = GameMain.hall_.GetPlayerData().GetPlayerID();                        ex_CMAction.fromType = (byte)3;                        ex_CMAction.wantAppend = (byte)1;                        ex_CMAction.changeCard = (byte)0;                        ex_CMAction.cardIdxList = new List<byte>();                        ex_CMAction.cardIdxList.Add(zhuijiaNum);                        ex_CMAction.SetSendData(app);                        if (HallMain.gametcpclient.IsSocketConnected)                        {                            HallMain.SendMsgToRoomSer(app);                        }                    }                    go_combo.SetActive(false);                    canTouch = false;                    ShowBoom(false);                    foreach (GameObject _go in chooseArr.Keys)                    {                        chooseArr[_go].setState(false);                    }                    chooseArr.Clear();                }                return;            }            //手牌区域            List<GameObject> my_keys = new List<GameObject>(myHandCardArr.Keys);            foreach (GameObject _go in my_keys)            {                if (button == (object)_go)                {                    if (myHandCardArr[_go].isSelect)                    {                        myHandCardArr[_go].setState(false);                        chooseArr.Remove(_go);                    }                    else                    {                        List<byte> cArr = new List<byte>();                        foreach (GameObject _choose in chooseArr.Keys)                        {                            cArr.Add(chooseArr[_choose].cardCode);                        }                        List<byte> aArr = new List<byte>();                        foreach (GameObject _myHandCard in myHandCardArr.Keys)                        {                            aArr.Add(myHandCardArr[_myHandCard].cardCode);                        }                        if (!Ex_JudgeCard.isCanOut(cArr, myHandCardArr[_go].cardCode, aArr))                        {                            foreach (GameObject _choose in chooseArr.Keys)                            {                                chooseArr[_choose].setState(false);                            }                            chooseArr.Clear();                        }                        myHandCardArr[_go].setState(true);                        chooseArr.Add(_go, myHandCardArr[_go]);                        PlaySound(chooseArr.Count);                    }                    return;                }            }            if (!isCanClick) return;            //中间牌区域            if (button == (object)go_card_closeBtn)            {                if (chooseArr.Count == 0) return;                List<byte> arr = new List<byte>();                foreach (GameObject _go in chooseArr.Keys)                {                    arr.Add(chooseArr[_go].cardCode);                }                if (Ex_JudgeCard.GetCardsTypeKing(arr) == -1) return;                isCanClick = false;                Dictionary<GameObject, Ex_Card> cardArr = new Dictionary<GameObject, Ex_Card>();                cardArr = ChuPaiOrder(chooseArr);                List<byte> arr1 = new List<byte>();                foreach (GameObject _go in cardArr.Keys)                {                    arr1.Add(cardArr[_go].cardCode);                }                MyChupai(arr1, (byte)0);                return;            }            //出牌区域（弃牌堆）            if (chooseArr.Count == 0) return;            Ex_Card card = null;            List<GameObject> out_keys = new List<GameObject>(outCardArr.Keys);            foreach (GameObject _go in out_keys)            {                if (_go == (GameObject)button)                {                    card = outCardArr[_go];                }            }            if (card != null)            {                List<byte> _arr = new List<byte>();                foreach (GameObject _go in chooseArr.Keys)                {                    _arr.Add(chooseArr[_go].cardCode);                }                if (Ex_JudgeCard.GetCardsTypeKing(_arr) == -1) return;                isCanClick = false;                Dictionary<GameObject, Ex_Card> cardArr = new Dictionary<GameObject, Ex_Card>();                cardArr = ChuPaiOrder(chooseArr);                List<byte> arr1 = new List<byte>();                foreach (GameObject _go in cardArr.Keys)                {                    arr1.Add(cardArr[_go].cardCode);                }                MyChupai(arr1, card.cardCode);            }        }    }    void PlaySound(int num)    {        if (Ex_GameData.SOUNDCONFIG)        {            AudioManager.Instance.PlaySound("diu.resource", "ex_sClick" + num);        }    }    Sequence s_boom;    //显示亮牌按钮    void ShowBoom(bool b)    {        if (b)        {            go_boomBtn.GetComponent<Image>().sprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Button_boom_01");            s_boom = DOTween.Sequence();            Tweener t1 = go_boomBtn.transform.DOScale(new Vector3(1.2f, 1.2f, 1f), 0.4f);            s_boom.Append(t1);            Tweener t2 = go_boomBtn.transform.DOScale(new Vector3(0.9f, 0.9f, 1f), 0.2f);            s_boom.Append(t2);            s_boom.SetLoops(-1);        } else        {            s_boom.Kill();            go_boomBtn.GetComponent<Image>().sprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Button_boom_02");            go_boomBtn.transform.localScale = new Vector3(1f, 1f, 1f);        }    }    int SortList(byte a, byte b)    {        return GameCommon.GetCardValue(a) - GameCommon.GetCardValue(b);    }    void StartSendCard()    {        Ex_SMGameStart msg = Ex_GameData.SMGameStartData;        if (stype == (int)type.putong)        {            diFen = (int)msg.scorePro;            go_dizhu.GetComponent<Text>().text = diFen.ToString();        }        else if (stype == (int)type.dabiao)        {            Ex_GameData.TotalCount = (int)msg.maxNum;            go_huihe.GetComponent<Text>().text = (msg.countNum + 1) + "/" + msg.maxNum;            pf_mubiaofen.SetText(msg.standardScore.ToString());            Ex_GameData.DabiaoFen = (int)msg.standardScore;            Ex_GameData.JiangjinFen = (int)msg.rewardCoin;        }        curPlayer = msg.userid;        msg.usercardList.Sort(SortList);        for (int i = 0; i < 10; i++)        {            GameObject cardUI = CGame_DiuDiuLe.InsPrefab("DiuDiuLe_Card", go_card_group);            Ex_Card ex_card = new Ex_Card();            if (i == 0)            {                ex_card.InitUI(cardUI, msg.usercardList[0]);            }            else if (i == 2)            {                ex_card.InitUI(cardUI, msg.usercardList[1]);            }            else if (i == 4)            {                ex_card.InitUI(cardUI, msg.usercardList[2]);            }            else if (i == 6)            {                ex_card.InitUI(cardUI, msg.usercardList[3]);            }            else if (i == 8)            {                ex_card.InitUI(cardUI, msg.usercardList[4]);            }            else            {                ex_card.InitUI(cardUI, (byte)0x00);            }            cardUI.transform.localPosition = go_card_close.transform.localPosition;            cardUI.transform.eulerAngles = new Vector3(0f, 0f, -70f);            cardsArr.Add(cardUI, ex_card);            TweenWait(i, cardUI, ex_card);        }        int a = 0;        Tweener t = DOTween.To(() => a, r => a = r, 0, 10 * faPaiSpeed / 2);        t.OnComplete(() => {            ShowMyCardCount();            ////发桌牌            //GameObject cardUI = Ex_Main.InsPrefab("DiuDiuLe_Card", go_card_group);            //Ex_Card ex_card = new Ex_Card();            //ex_card.InitUI(cardUI,_num);            //cardUI.transform.localPosition = go_card_close.transform.localPosition;            //cardUI.transform.eulerAngles = new Vector3(0f,0f,-70f);            //DOTween.To(() => cardUI.transform.position, r => cardUI.transform.position = r, new Vector3(cardUI.transform.localPosition.x, 960-470, 0), faPaiSpeed).SetEase(Ease.InOutSine);            //DOTween.To(() => cardUI.transform.eulerAngles, x => cardUI.transform.eulerAngles = x, new Vector3(0f, 0f, 0f), faPaiSpeed).SetEase(Ease.InOutSine);            canTouch = true;            ShowTip(curPlayer);        });    }    //自己开始出牌    void MyChupai(List<byte> arr, byte num)    {        foreach (GameObject _go in chooseArr.Keys)        {            chooseArr[_go].setState(false);        }        chooseArr.Clear();        int type = num == 0 ? 1 : 0;        if (!Ex_GameData.isXinshou)        {            //发送CMAction消息            UMessage app = new UMessage((uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_ACTION);            Ex_CMAction ex_CMAction = new Ex_CMAction();            ex_CMAction.diuMsgType = (uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_ACTION;            ex_CMAction.userid = GameMain.hall_.GetPlayerData().GetPlayerID();            ex_CMAction.fromType = (byte)type;            ex_CMAction.wantAppend = (byte)3;            ex_CMAction.changeCard = num;            ex_CMAction.cardIdxList = arr;            ex_CMAction.SetSendData(app);            if (HallMain.gametcpclient.IsSocketConnected)            {                HallMain.SendMsgToRoomSer(app);            }        }        canTouch = false;        ShowBoom(false);    }    void SMAction(Ex_SMAction msg)    {        curPlayer = msg.nextUserId;        int b = msg.fromType;        if (msg.curUserId == GameMain.hall_.GetPlayerData().GetPlayerID())        {            if (msg.canAppend == 1)            {                zhuijiaNum = msg.changeCard;                isZhuijia = true;            }            if (msg.canAppend == 0)            {                go_combo.SetActive(false);                isZhuijia = false;            }            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource", "ex_sFapai");            }            lastChuNum = msg.cardIdxList.Count;            MyFapai(msg.cardIdxList, msg.changeCard, b);        }        else        {            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource", "ex_sFapai");            }            OtherFapai(msg.cardIdxList, msg.changeCard, b);        }        if (stype == (int)type.putong)        {            beiNum = (int)msg.score;            pf_beishu.SetText(beiNum.ToString());        }    }    /**	* 对方发牌	* @param arr 丢牌列表	* @param num 换取的牌	* @param b true 牌堆 false 桌面	*/    void OtherFapai(List<byte> arr, int num, int b)    {        Dictionary<GameObject, Ex_Card> cardArr = new Dictionary<GameObject, Ex_Card>();        int i = 0;        List<GameObject> other_keys = new List<GameObject>(otherHandCardArr.Keys);        foreach (GameObject _go in other_keys)        {            if (i < arr.Count)            {                Ex_Card card = otherHandCardArr[_go];                otherHandCardArr[_go].SetCardType(arr[i]);                cardArr.Add(_go, otherHandCardArr[_go]);                otherHandCardArr.Remove(_go);            }            i++;        }        Dictionary<GameObject, Ex_Card> temp_ohca = new Dictionary<GameObject, Ex_Card>(otherHandCardArr);        otherHandCardArr = temp_ohca;        Chupai(cardArr);        GameObject go_temp = null;        if (b == 0)        {            List<GameObject> out_keys = new List<GameObject>(outCardArr.Keys);            foreach (GameObject _go in out_keys)            {                if (outCardArr[_go].cardCode == num)                {                    go_temp = _go;                    outCardArr[_go].SetCardType((byte)0);                    otherHandCardArr.Add(_go, outCardArr[_go]);                    outCardArr.Remove(_go);                }            }        }        if (b == 1)        {            GameObject cardUI = CGame_DiuDiuLe.InsPrefab("DiuDiuLe_Card", go_card_group);            Ex_Card card = new Ex_Card();            card.InitUI(cardUI, (byte)0);            cardUI.transform.localPosition = go_card_close.transform.localPosition;            cardUI.transform.eulerAngles = new Vector3(0f, 0f, -70f);            otherHandCardArr.Add(cardUI, card);            go_temp = cardUI;        }        OtherSortHandCard(go_temp);    }    /**    * 自己发牌    * @param arr 丢牌列表    * @param num 换取的牌    * @param b true 牌堆 false 桌面    */    void MyFapai(List<byte> arr, byte num, int b)    {        Dictionary<GameObject, Ex_Card> cardArr = new Dictionary<GameObject, Ex_Card>();        for (int i = 0; i < arr.Count; i++)        {            List<GameObject> my_keys = new List<GameObject>(myHandCardArr.Keys);            foreach (GameObject _go in my_keys)            {                if (myHandCardArr[_go].cardCode == arr[i])                {                    cardArr.Add(_go, myHandCardArr[_go]);                    myHandCardArr.Remove(_go);                    break;                }            }        }        Chupai(cardArr);        GameObject go_temp = null;        if (b == 0)        {            List<GameObject> out_keys = new List<GameObject>(outCardArr.Keys);            foreach (GameObject _go in out_keys)            {                if (outCardArr[_go].cardCode == num)                {                    go_temp = _go;                    myHandCardArr.Add(_go, outCardArr[_go]);                    outCardArr.Remove(_go);                }            }        }        if (b == 1)        {            GameObject cardUI = CGame_DiuDiuLe.InsPrefab("DiuDiuLe_Card", go_card_group);            Ex_Card card = new Ex_Card();            card.InitUI(cardUI, num);            cardUI.transform.localPosition = go_card_close.transform.localPosition;            cardUI.transform.eulerAngles = new Vector3(0f, 0f, -70f);            myHandCardArr.Add(cardUI, card);            go_temp = cardUI;        }        MySortHandCard(go_temp);    }    //自己的手牌排序  添加事件监听    void MySortHandCard(GameObject _cardUI)    {        Dictionary<GameObject, Ex_Card> myHandCardArr1 = myHandCardArr.OrderBy(o => o.Value.cardNum).ToDictionary(p => p.Key, o => o.Value);        myHandCardArr = myHandCardArr1;        int len = (int)(540 - myHandCardArr.Count * 86 - 4 * handJiange) / 2 + 86 / 2;        int i = 0;        List<GameObject> my_keys = new List<GameObject>(myHandCardArr.Keys);        foreach (GameObject _go in my_keys)        {            myHandCardArr[_go].SetAlpha(1f);            if (_go == _cardUI)            {                DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(len + i * (86 + handJiange)-540/2, 150-960/2, 0), faPaiSpeed).SetEase(Ease.InOutSine);                DOTween.To(() => _go.transform.eulerAngles, x => _go.transform.eulerAngles = x, new Vector3(0f, 0f, 360f), faPaiSpeed).SetEase(Ease.InOutSine);                XPointEvent.AutoAddListener(_go, TouchFunc, _go);            }            else            {                DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(len + i * (86 + handJiange)-540/2, 150-960/2, 0), faPaiSpeed).SetEase(Ease.InOutSine);            }            i++;        }        int a = 0;        Tweener t = DOTween.To(() => a, r => a = r, 0, faPaiSpeed);        t.OnComplete(() => {            ShowTip(curPlayer);            ShowMyCardCount();            canTouch = true;            if (isZhuijia)            {                go_combo.SetActive(true);                foreach (GameObject _go in myHandCardArr.Keys)                {                    if (myHandCardArr[_go].cardCode == zhuijiaNum)                    {                        myHandCardArr[_go].setState(true);                        chooseArr.Add(_go, myHandCardArr[_go]);                    }                }            }        });        //float startX = (540 - num * 86 - (num - 1) * handJiange) / 2 + 86 / 2;        //pos.Add(startX + i * (86 + handJiange));    //x        //pos.Add(150);       //y        //pos.Add(360);       //r        //rt_list.Add(pos);    }    //对方手牌顺序    void OtherSortHandCard(GameObject _cardUI)    {        int other_count = otherHandCardArr.Count;        List<List<float>> p = GetSanxingPos(other_count);        int i = 0;        List<GameObject> other_keys = new List<GameObject>(otherHandCardArr.Keys);        foreach (GameObject _go in other_keys)        {            Ex_Card card = otherHandCardArr[_go];            card.SetAlpha(1f);            if (_go == _cardUI)            {                DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(p[other_count - 1][0], p[other_count - 1][1], 0), faPaiSpeed).SetEase(Ease.InOutSine);                DOTween.To(() => _go.transform.eulerAngles, x => _go.transform.eulerAngles = x, new Vector3(0f, 0f, p[other_count - 1][2]), faPaiSpeed).SetEase(Ease.InOutSine);                i--;            }            else            {                DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(p[i][0], p[i][1], 0), faPaiSpeed).SetEase(Ease.InOutSine);                DOTween.To(() => _go.transform.eulerAngles, x => _go.transform.eulerAngles = x, new Vector3(0f, 0f, p[i][2]), faPaiSpeed).SetEase(Ease.InOutSine);            }            XPointEvent.AutoAddListener(_go, null, null);            i++;        }        int a = 0;        Tweener t = DOTween.To(() => a, r => a = r, 0, faPaiSpeed);        t.OnComplete(() => {            ShowTip(curPlayer);        });    }    //出牌动作    void Chupai(Dictionary<GameObject, Ex_Card> cardArr)    {        if (cardArr.Count == 0) return;        List<int> xxArr;        List<int> rrArr;        cardArr = ChuPaiOrder(cardArr);        Dictionary<string, List<int>> obj = Ex_GameData.chupaiPos(cardArr.Count);        xxArr = obj["xArr"];        rrArr = obj["rArr"];        List<GameObject> out_keys = new List<GameObject>(outCardArr.Keys);        foreach (GameObject _go in out_keys)        {            Color c = _go.GetComponent<Image>().color;            outCardArr[_go].SetAlpha(c.a - 0.3f);            XPointEvent.AutoAddListener(_go, null, null);            if (c.a <= 0.1)            {                outCardArr.Remove(_go);                UnityEngine.Object.Destroy(_go);            }        }        int i = 0;        List<GameObject> card_keys = new List<GameObject>(cardArr.Keys);        foreach (GameObject _go in card_keys)        {            Ex_Card card = cardArr[_go];            card.setState(false);            DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(xxArr[i], 960 - 470 -960/2, 0), faPaiSpeed).SetEase(Ease.InOutSine);            DOTween.To(() => _go.transform.eulerAngles, x => _go.transform.eulerAngles = x, new Vector3(0f, 0f, rrArr[i]), faPaiSpeed).SetEase(Ease.InOutSine);            outCardArr.Add(_go, card);            XPointEvent.AutoAddListener(_go, TouchFunc, _go);            if (cardArr.Count > 2)            {                if (i == 0 || i == cardArr.Count - 1)                {                    _go.transform.SetAsLastSibling();                }                else                {                    Color c = _go.GetComponent<Image>().color;                    cardArr[_go].SetAlpha(c.a - 0.3f);                    XPointEvent.AutoAddListener(_go, null, null);                }            }            else            {                _go.transform.SetAsLastSibling();            }            i++;        }    }    void BoomFunc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerDown)        {            if (!isCanClick) return;            if (go_boomBtn.GetComponent<Image>().sprite.name == "Button_boom_02") return;            isCanClick = false;            if (!Ex_GameData.isXinshou)            {                //发送boom消息                UMessage app = new UMessage((uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_GAMEEND);                Ex_CMGameEnd ex_CMGameEnd = new Ex_CMGameEnd();                ex_CMGameEnd.diuMsgType = (uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_GAMEEND;                ex_CMGameEnd.userid = GameMain.hall_.GetPlayerData().GetPlayerID();                ex_CMGameEnd.SetSendData(app);                if (HallMain.gametcpclient.IsSocketConnected)                {                    HallMain.SendMsgToRoomSer(app);                }            }        }    }    int isMyWin = 0;//-1平局 0 输 1 赢    int isFinish = 0;// 1 结束 0 开始  -1 没开始    void SMGameEnd(Ex_SMGameEnd msg)    {        if (stype == (int)type.putong)        {            Ex_GameData.IsInGame = false;            beiNum = (int)msg.score;            pf_beishu.SetText(beiNum.ToString());        }        else if (stype == (int)type.dabiao)         {            isCanClick = false;        }        canTouch = false;        ShowTip((byte)0);        ShowBoom(false);        isFinish = msg.finish;        ShowTuoGuan(0, false);        ShowTuoGuan(1, false);        boomNum = 0;// 1 上边 2 下边        isSha = 0;//0没有出现shkalaka 	1对方胜利    2自己胜利        isWinNum = 0;        int win1 = 0;        int win2 = 0;        for (int i = 0; i < msg.playerDataList.Count; i++)        {            if (msg.playerDataList[i].uid == GameMain.hall_.GetPlayerData().GetPlayerID())            {                if (msg.playerDataList[i].isShakalaka == 1)                {                    isSha = 2;                }                if (msg.playerDataList[i].isBoom == 1)                {                    boomNum = 2;                    if (go_ani_boom2 == null)                    {                        go_ani_boom2 = CGame_DiuDiuLe.InsPrefab("Anime_shakalaka", tableUI);                    }                    go_ani_boom2.transform.localPosition = new Vector3(270-540/2, 960 / 3-960/2, 0f);                    UnityArmatureComponent uac2 = go_ani_boom2.GetComponent<UnityArmatureComponent>();                    uac2.animation.Play("b_01", 1);                    if (stype == (int)type.dabiao)                    {                        aniArr.Add(go_ani_boom2);                    }                    uac2.AddEventListener(EventObject.COMPLETE, AnimationEventHandler);                    if (Ex_GameData.SOUNDCONFIG)                    {                        AudioManager.Instance.PlaySound("diu.resource", "ex_sBoom");                    }                }                win1 = msg.playerDataList[i].isWin;                if (stype == (int)type.putong)                {                    if (Ex_GameData.isXinshou)                    {                        isWinNum = msg.playerDataList[i].winScore;                    }                    else                    {                        isWinNum = msg.playerDataList[i].silver - Convert.ToInt64(go_myMoney.GetComponent<Text>().text);                    }                } else if (stype == (int)type.dabiao)                {                    isWinNum = msg.playerDataList[i].winScore;                }                go_myMoney.GetComponent<Text>().text = msg.playerDataList[i].silver.ToString();            }            else            {                if (msg.playerDataList[i].isShakalaka == 1)                {                    isSha = 1;                }                if (msg.playerDataList[i].isBoom == 1)                {                    boomNum = 1;                    if (go_ani_boom1 == null)                    {                        go_ani_boom1 = CGame_DiuDiuLe.InsPrefab("Anime_shakalaka", tableUI);                    }                    go_ani_boom1.transform.localPosition = new Vector3(270-540/2, 960f * 2 / 3-960/2, 0f);                    UnityArmatureComponent uac1 = go_ani_boom1.GetComponent<UnityArmatureComponent>();                    uac1.animation.Play("b_02", 1);                    if (stype == (int)type.dabiao)                    {                        aniArr.Add(go_ani_boom1);                    }                    uac1.AddEventListener(EventObject.COMPLETE, AnimationEventHandler);                    if (Ex_GameData.SOUNDCONFIG)                    {                        AudioManager.Instance.PlaySound("diu.resource", "ex_sBoom");                    }                }                win2 = msg.playerDataList[i].isWin;                if (stype == (int)type.dabiao)                {                    isOtherWinNum = msg.playerDataList[i].winScore;                }                ShowOtherHandCard(msg.playerDataList[i].usercardList, (int)msg.playerDataList[i].point);                go_otherMoney.GetComponent<Text>().text = msg.playerDataList[i].silver.ToString();            }        }        if (win1 == 3 && win2 == 3)        {            isMyWin = -1;        }        else        {            isMyWin = win1;        }        if (boomNum == 0)        {            IsPlayShaka();        }    }    void AnimationEventHandler(string _type, EventObject eventObject)    {        switch (_type)        {            case EventObject.COMPLETE:                if (eventObject.animationState.name == "b_01")                {                    IsPlayShaka();                }                else if (eventObject.animationState.name == "b_02")                {                    IsPlayShaka();                }                else if (eventObject.animationState.name == "s_02")                {                    if (stype == (int)type.putong)                    {                        GameOver();                    } else if (stype == (int)type.dabiao)                    {                        FlyScore();                    }                }                else if (eventObject.animationState.name == "s_01")                {                    if (stype == (int)type.putong)                    {                        GameOver();                    }                    else if (stype == (int)type.dabiao)                    {                        FlyScore();                    }                }                else if (eventObject.animationState.name == "win_01")                {                    ShowResult();                }                else if (eventObject.animationState.name == "win_02")                {                    ShowResult();                }                else if (eventObject.animationState.name == "lose_01")                {                    ShowResult();                }                else if (eventObject.animationState.name == "lose_02")                {                    ShowResult();                }                else if (eventObject.animationState.name == "1")                {                    uac_jinbi.animation.Play("2",0);                }                break;            default:                break;        }    }    void IsPlayShaka()    {        if (isSha == 0)        {            if (stype == (int)type.putong)            {                GameOver();            } else if (stype == (int)type.dabiao)            {                FlyScore();            }        }        if (isSha == 1)        {            if (go_ani_boom1 == null)            {                go_ani_boom1 = CGame_DiuDiuLe.InsPrefab("Anime_shakalaka", tableUI);            }            go_ani_boom1.transform.localPosition = new Vector3(270-540/2, 960 * 2 / 3-960/2, 0f);            UnityArmatureComponent uac1 = go_ani_boom1.GetComponent<UnityArmatureComponent>();            uac1.animation.Play("s_02", 1);            if (stype == (int)type.dabiao)            {                aniArr.Add(go_ani_boom1);            }            uac1.AddEventListener(EventObject.COMPLETE, AnimationEventHandler);            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource", "ex_sSha");            }        }        if (isSha == 2)        {            if (go_ani_boom2 == null)            {                go_ani_boom2 = CGame_DiuDiuLe.InsPrefab("Anime_shakalaka", tableUI);            }            go_ani_boom2.transform.localPosition = new Vector3(270-540/2, 960 * 1 / 3-960/2, 0f);            UnityArmatureComponent uac2 = go_ani_boom2.GetComponent<UnityArmatureComponent>();            uac2.animation.Play("s_01", 1);            if (stype == (int)type.dabiao)            {                aniArr.Add(go_ani_boom2);            }            uac2.AddEventListener(EventObject.COMPLETE, AnimationEventHandler);            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource", "ex_sSha");            }        }    }    GameObject go_result;    GameObject go_result_putong;    GameObject go_putong_info;    GameObject go_ptInfo_dianshu;    GameObject go_ptInfo_beishu;    GameObject go_ptInfo_dizhu;    GameObject go_ptInfo_zongfen;    Ex_PicFont pf_ptInfo_zongfen;    GameObject go_btnGroup;//公用    GameObject go_exitBtn;//公用    GameObject go_againBtn;//公用    GameObject go_result_dabiao;//达标    GameObject go_dabiao_icon;//达标    GameObject go_dabiao_zongfen;//达标    Ex_PicFont pf_dabiao_zongfen;//达标    GameObject go_dabiao_pingju;//达标    GameObject go_ani_jinbi;//达标    UnityArmatureComponent uac_jinbi;//达标    void GameOver()    {        if (stype == (int)type.putong)        {            go_result = CGame_DiuDiuLe.InsPrefab("DiuDiuLe_Result", tableUI);            go_result_putong = go_result.transform.Find("ResultInfo_PoTong").gameObject;            go_putong_info = go_result_putong.transform.Find("ImageBG_Info").gameObject;            go_ptInfo_dianshu = go_putong_info.transform.Find("TextBG_Dianshu").Find("TextNum").gameObject;            go_ptInfo_beishu = go_putong_info.transform.Find("TextBG_Beishu").Find("TextNum").gameObject;            go_ptInfo_dizhu = go_putong_info.transform.Find("TextBG_Dizhu").Find("TextNum").gameObject;            go_ptInfo_zongfen = go_putong_info.transform.Find("TextBG_Zongfen").gameObject;            pf_ptInfo_zongfen = new Ex_PicFont();            pf_ptInfo_zongfen.Init("Text_JSbai_", go_ptInfo_zongfen);            go_btnGroup = go_result_putong.transform.Find("ImageBG_Button").gameObject;            go_exitBtn = go_btnGroup.transform.Find("Button_out").gameObject;            go_againBtn = go_btnGroup.transform.Find("Button_again").gameObject;            go_result_dabiao = go_result.transform.Find("ResultInfo_DaBiao").gameObject;            go_result_putong.SetActive(false);            go_result_dabiao.SetActive(false);            XPointEvent.AutoAddListener(go_exitBtn, TuiChuFunc, go_exitBtn);            XPointEvent.AutoAddListener(go_againBtn, AgainFunc, go_againBtn);            bool b = false;            if (isSha > 0) b = true;            string str_ani_result = null;            if (isMyWin > 0)            {                if (b)                {                    result_dianShu = otherScore - myScore + 30;                    str_ani_result = "win_01";                }                else                {                    result_dianShu = otherScore;                    str_ani_result = "win_02";                }            }            else if (isMyWin == 0)            {                if (b)                {                    result_dianShu = myScore - otherScore + 30;                    str_ani_result = "lose_02";                }                else                {                    result_dianShu = myScore;                    str_ani_result = "lose_01";                }            }            else if (isMyWin == -1)            {                GameObject go_ping_bg = new GameObject();                Image img_ping_bg = go_ping_bg.AddComponent<Image>();                Sprite sprite_ping_bg = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Result_PjBG_01");                img_ping_bg.sprite = sprite_ping_bg;                img_ping_bg.SetNativeSize();                go_ping_bg.transform.SetParent(go_result.transform, false);                go_ping_bg.transform.localPosition = new Vector3(0f, 130f, 0f);                GameObject go_ping_text = new GameObject();                Image img_ping_text = go_ping_text.AddComponent<Image>();                Sprite sprite_ping_text = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Result_PjText_01");                img_ping_text.sprite = sprite_ping_text;                img_ping_text.SetNativeSize();                go_ping_text.transform.SetParent(go_result.transform, false);                go_ping_text.transform.localPosition = new Vector3(0f, 100f, 0f);                go_result_putong.SetActive(true);                go_putong_info.SetActive(false);                return;            }            else            {                return;            }            GameObject go_ani_result = CGame_DiuDiuLe.InsPrefab("Anime_jiesuan", go_result);            go_ani_result.transform.SetAsFirstSibling();            go_ani_result.transform.localPosition = new Vector3(0f, 110f, 0f);            UnityArmatureComponent uac_result = go_ani_result.GetComponent<UnityArmatureComponent>();            uac_result.animation.Play(str_ani_result, 1);            uac_result.AddEventListener(EventObject.COMPLETE, AnimationEventHandler);        }        else if (stype == (int)type.dabiao)        {            //UnityFactory.factory.Clear();            if (isFinish > 0)            {                DOTween.To(() => go_myFen.transform.localPosition, r => go_myFen.transform.localPosition = r, new Vector3(-100f, 0f, 0), 0.5f);                DOTween.To(() => go_otherFen.transform.localPosition, r => go_otherFen.transform.localPosition = r, new Vector3(100f, 0f, 0), 0.5f);                GameObject go_crown = new GameObject();                go_crown.transform.SetParent(go_fenshuBG.transform, false);                Image image_crown = go_crown.AddComponent<Image>();                image_crown.sprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Result_Crown");                image_crown.SetNativeSize();                //-1平局 0 输 1 赢                if (isMyWin == 1)                {                    go_crown.transform.localPosition = new Vector3(150f, Screen.height / 2 + 43, 0f);                    DOTween.To(() => go_crown.transform.localPosition, r => go_crown.transform.localPosition = r, new Vector3(-50f, 43f, 0), 0.5f);                    if (Ex_GameData.SOUNDCONFIG)                    {                        AudioManager.Instance.PlaySound("diu.resource", "ex_sHuangguan");                    }                }                else if (isMyWin == 0)                {                    go_crown.transform.localPosition = new Vector3(-50f, Screen.height / 2 + 43, 0f);                    DOTween.To(() => go_crown.transform.localPosition, r => go_crown.transform.localPosition = r, new Vector3(150f, 43f, 0), 0.5f);                    if (Ex_GameData.SOUNDCONFIG)                    {                        AudioManager.Instance.PlaySound("diu.resource", "ex_sHuangguan");                    }                }                int a = 0;                Tweener t = DOTween.To(() => a, r => a = r, 0, 1);                t.OnComplete(() =>                {                    go_result = CGame_DiuDiuLe.InsPrefab("DiuDiuLe_Result", tableUI);                    go_result_dabiao = go_result.transform.Find("ResultInfo_DaBiao").gameObject;                    go_dabiao_icon = go_result_dabiao.transform.Find("Result_Icon").gameObject;                    go_dabiao_zongfen = go_result_dabiao.transform.Find("TextBG_Zongfen").gameObject;                    pf_dabiao_zongfen = new Ex_PicFont();                    pf_dabiao_zongfen.Init("Text_JSbai_", go_dabiao_zongfen);                    go_dabiao_pingju = go_result_dabiao.transform.Find("TextBG_Pingju").gameObject;                    go_btnGroup = go_result_dabiao.transform.Find("ImageBG_Button").gameObject;                    go_againBtn = go_btnGroup.transform.Find("Button_again").gameObject;                    go_exitBtn = go_btnGroup.transform.Find("Button_out").gameObject;                    XPointEvent.AutoAddListener(go_exitBtn, TuiChuFunc, go_exitBtn);                    XPointEvent.AutoAddListener(go_againBtn, AgainFunc, go_againBtn);                    //-1平局 0 输 1 赢                    if (isMyWin == 1)                    {                        GameObject go_ani_result = CGame_DiuDiuLe.InsPrefab("Anime_vscar", go_dabiao_icon);                        if (Ex_GameData.SOUNDCONFIG)                        {                            AudioManager.Instance.PlaySound("diu.resource", "ex_sDabiaoWin");                        }                        UnityArmatureComponent uac_result = go_ani_result.GetComponent<UnityArmatureComponent>();                        uac_result.animation.Play("win_0", 1);                        go_ani_jinbi = CGame_DiuDiuLe.InsPrefab("Anime_coinCar", go_result_dabiao);                        uac_jinbi = go_ani_jinbi.GetComponent<UnityArmatureComponent>();                        uac_jinbi.animation.Play("1", 1);                        uac_jinbi.AddEventListener(EventObject.COMPLETE, AnimationEventHandler);                        pf_dabiao_zongfen.SetText("+" + Ex_GameData.JiangjinFen);                    }                    else if (isMyWin == 0)                    {                        go_result_dabiao.GetComponent<Image>().sprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Result_BG_04");                        GameObject go_ani_result = CGame_DiuDiuLe.InsPrefab("Anime_vscar", go_dabiao_icon);                        if (Ex_GameData.SOUNDCONFIG)                        {                            AudioManager.Instance.PlaySound("diu.resource", "ex_sDabiaoLose");                        }                        UnityArmatureComponent uac_result = go_ani_result.GetComponent<UnityArmatureComponent>();                        uac_result.animation.Play("lose_0", 1);                        pf_dabiao_zongfen.SetText("-" + Ex_GameData.JiangjinFen);                    }                    else if (isMyWin == -1)                    {                        go_dabiao_zongfen.SetActive(false);                        go_dabiao_pingju.SetActive(true);                    }                });            }            else            {                SMGameStart();            }        }    }    void ShowResult()    {        if (stype == (int)type.putong)        {            go_result_putong.SetActive(true);            go_ptInfo_dianshu.GetComponent<Text>().text = result_dianShu.ToString();            go_ptInfo_beishu.GetComponent<Text>().text = beiNum.ToString();            go_ptInfo_dizhu.GetComponent<Text>().text = diFen.ToString();            if (isMyWin > 0)            {                pf_ptInfo_zongfen.SetText("+" + isWinNum);            }            else if (isMyWin == 0)             {                pf_ptInfo_zongfen.SetText(isWinNum.ToString());            }        }    }    void FlyScore()    {        for (int i = 0; i < aniArr.Count;i++)        {            UnityEngine.Object.DestroyImmediate(aniArr[i]);            aniArr[i] = null;        }        aniArr.Clear();        go_xiaojie.SetActive(true);        if (boomNum > 0 && isSha == 0)        {            Tweener t = null;            GameObject temp_fenshu1 = null;            //对手胜利            if (boomNum == 1)            {                go_xiaojie_top.SetActive(true);                go_xiaojie_bottom.SetActive(false);                go_top_result_win.SetActive(true);                go_top_result_lose.SetActive(false);                if (otherScore > 7)                {                    pf_top_dianshu.Init("Text_bai_", go_top_dianshu);                }                else                {                    pf_top_dianshu.Init("Text_huang_", go_top_dianshu);                }                pf_top_dianshu.SetText(otherScore.ToString());                pf_top_fenshu1.SetText(myScore.ToString());                go_top_fuhao.SetActive(false);                go_top_fenshu2.SetActive(false);                go_top_boom.SetActive(false);                go_top_shaka.SetActive(false);                temp_fenshu1 = UnityEngine.Object.Instantiate(go_top_fenshu1, go_fenshuBG.transform);                t = DOTween.To(() => temp_fenshu1.transform.localPosition, r => temp_fenshu1.transform.localPosition = r, go_otherFen.transform.localPosition, 1f);            }            //自己胜利            else if (boomNum == 2)            {                go_xiaojie_top.SetActive(false);                go_xiaojie_bottom.SetActive(true);                go_bottom_result_win.SetActive(true);                go_top_result_lose.SetActive(false);                if (myScore > 7)                {                    pf_bottom_dianshu.Init("Text_bai_", go_bottom_dianshu);                }                else                {                    pf_bottom_dianshu.Init("Text_huang_", go_bottom_dianshu);                }                pf_bottom_dianshu.SetText(myScore.ToString());                pf_bottom_fenshu1.SetText(otherScore.ToString());                go_bottom_fuhao.SetActive(false);                go_bottom_fenshu2.SetActive(false);                go_bottom_boom.SetActive(false);                go_bottom_shaka.SetActive(false);                temp_fenshu1 = UnityEngine.Object.Instantiate(go_bottom_fenshu1, go_fenshuBG.transform);                t = DOTween.To(() => temp_fenshu1.transform.localPosition, r => temp_fenshu1.transform.localPosition = r, go_myFen.transform.localPosition, 1f);            }            t.OnComplete(() => {                UnityEngine.Object.Destroy(temp_fenshu1);                go_xiaojie.SetActive(false);                for (int i = 0; i < go_card_group.transform.childCount; i++)                {                    GameObject _go = go_card_group.transform.GetChild(i).gameObject;                    UnityEngine.Object.Destroy(_go);                }                myHandCardArr.Clear();                otherHandCardArr.Clear();                chooseArr.Clear();                outCardArr.Clear();                cardsArr.Clear();                isZhuijia = false;                pf_myFen.SetText(isWinNum.ToString());                pf_otherFen.SetText(isOtherWinNum.ToString());                go_otherScore.SetActive(false);                GameOver();            });        }        if (isSha > 0)        {            Tweener t = null;            GameObject temp_fenshu1 = null;            GameObject temp_fenshu2 = null;            GameObject temp_fenshu3 = null;            go_xiaojie_top.SetActive(true);            go_xiaojie_bottom.SetActive(true);            if (myScore > 7)            {                pf_bottom_dianshu.Init("Text_bai_", go_bottom_dianshu);            }            else            {                pf_bottom_dianshu.Init("Text_huang_", go_bottom_dianshu);            }            pf_bottom_dianshu.SetText(myScore.ToString());            pf_bottom_fenshu1.SetText(otherScore.ToString());            if (otherScore > 7)            {                pf_top_dianshu.Init("Text_bai_", go_top_dianshu);            }            else            {                pf_top_dianshu.Init("Text_huang_", go_top_dianshu);            }            pf_top_dianshu.SetText(otherScore.ToString());            pf_top_fenshu1.SetText(myScore.ToString());            //对手胜利            if (isSha == 1)            {                go_top_result_win.SetActive(true);                go_top_result_lose.SetActive(false);                go_bottom_result_win.SetActive(false);                go_bottom_result_lose.SetActive(true);                go_top_fuhao.SetActive(true);                go_top_fenshu2.SetActive(true);                go_top_boom.SetActive(false);                go_top_shaka.SetActive(true);                go_bottom_fuhao.SetActive(false);                go_bottom_fenshu2.SetActive(false);                go_bottom_boom.SetActive(true);                go_bottom_shaka.SetActive(false);                temp_fenshu1 = UnityEngine.Object.Instantiate(go_bottom_fenshu1, go_fenshuBG.transform);                t = DOTween.To(() => temp_fenshu1.transform.localPosition, r => temp_fenshu1.transform.localPosition = r, go_myFen.transform.localPosition, 1f);                temp_fenshu2 = UnityEngine.Object.Instantiate(go_top_fenshu1, go_fenshuBG.transform);                DOTween.To(() => temp_fenshu2.transform.localPosition, r => temp_fenshu2.transform.localPosition = r, go_otherFen.transform.localPosition, 1f);                temp_fenshu3 = UnityEngine.Object.Instantiate(go_top_fenshu2, go_fenshuBG.transform);                DOTween.To(() => temp_fenshu3.transform.localPosition, r => temp_fenshu3.transform.localPosition = r, go_otherFen.transform.localPosition, 1f);            }            //自己胜利            else if (isSha == 2)            {                go_top_result_win.SetActive(false);                go_top_result_lose.SetActive(true);                go_bottom_result_win.SetActive(true);                go_bottom_result_lose.SetActive(false);                go_top_fuhao.SetActive(false);                go_top_fenshu2.SetActive(false);                go_top_boom.SetActive(true);                go_top_shaka.SetActive(false);                go_bottom_fuhao.SetActive(true);                go_bottom_fenshu2.SetActive(true);                go_bottom_boom.SetActive(false);                go_bottom_shaka.SetActive(true);                temp_fenshu1 = UnityEngine.Object.Instantiate(go_bottom_fenshu1, go_fenshuBG.transform);                t = DOTween.To(() => temp_fenshu1.transform.localPosition, r => temp_fenshu1.transform.localPosition = r, go_myFen.transform.localPosition, 1f);                temp_fenshu2 = UnityEngine.Object.Instantiate(go_top_fenshu1, go_fenshuBG.transform);                DOTween.To(() => temp_fenshu2.transform.localPosition, r => temp_fenshu2.transform.localPosition = r, go_otherFen.transform.localPosition, 1f);                temp_fenshu3 = UnityEngine.Object.Instantiate(go_bottom_fenshu2, go_fenshuBG.transform);                DOTween.To(() => temp_fenshu3.transform.localPosition, r => temp_fenshu3.transform.localPosition = r, go_myFen.transform.localPosition, 1f);            }            t.OnComplete(() =>            {                UnityEngine.Object.Destroy(temp_fenshu1);                UnityEngine.Object.Destroy(temp_fenshu2);                UnityEngine.Object.Destroy(temp_fenshu3);                go_xiaojie.SetActive(false);                for (int i = 0; i < go_card_group.transform.childCount; i++)                {                    GameObject _go = go_card_group.transform.GetChild(i).gameObject;                    UnityEngine.Object.Destroy(_go);                }                myHandCardArr.Clear();                otherHandCardArr.Clear();                chooseArr.Clear();                outCardArr.Clear();                cardsArr.Clear();                isZhuijia = false;                pf_myFen.SetText(isWinNum.ToString());                pf_otherFen.SetText(isOtherWinNum.ToString());                go_otherScore.SetActive(false);                GameOver();            });        }        if (boomNum == 0)        {            pf_myFen.SetText(isWinNum.ToString());            pf_otherFen.SetText(isOtherWinNum.ToString());            GameOver();        }    }    bool BackDiuDiuLeGameAuto(uint msgType, UMessage _ms)    {        Ex_SMGameAuto ex_SMGameAuto = new Ex_SMGameAuto();        uint userid = _ms.ReadUInt();        bool isAuto = _ms.ReadBool();        ex_SMGameAuto.userid = userid;        ex_SMGameAuto.isAuto = isAuto;        if (ex_SMGameAuto.userid == GameMain.hall_.GetPlayerData().GetPlayerID())        {            ShowTuoGuan(0, ex_SMGameAuto.isAuto);        }        else        {            ShowTuoGuan(1, ex_SMGameAuto.isAuto);        }        return true;    }    bool BackDiuDiuLeGameAction(uint msgType, UMessage _ms)    {        Ex_SMAction ex_SMAction = new Ex_SMAction();        ex_SMAction.cardIdxList = new List<byte>();        byte num = _ms.ReadByte();        for (int i = 0; i < num; i++)        {            byte v = _ms.ReadByte();            ex_SMAction.cardIdxList.Add(v);        }        uint curUserId = _ms.ReadUInt();        uint nextUserId = _ms.ReadUInt();        byte fromType = _ms.ReadByte();        uint score = _ms.ReadUInt();        byte canAppend = _ms.ReadByte();        byte changeCard = _ms.ReadByte();        ex_SMAction.curUserId = curUserId;        ex_SMAction.nextUserId = nextUserId;        ex_SMAction.fromType = fromType;        ex_SMAction.score = score;        ex_SMAction.canAppend = canAppend;        ex_SMAction.changeCard = changeCard;        SMAction(ex_SMAction);        return true;    }    bool BackDiuDiuLeGameGameEnd(uint msgTypw, UMessage _ms)    {        Ex_SMGameEnd ex_SMGameEnd = new Ex_SMGameEnd();        ex_SMGameEnd.playerDataList = new List<Ex_MFPlayerData>();        uint multiple = _ms.ReadUInt();        byte finish = _ms.ReadByte();        byte gameCount = _ms.ReadByte();        for (int i = 0; i < 2; i++)        {            Ex_MFPlayerData p = new Ex_MFPlayerData();            p.uid = _ms.ReadUInt();            p.point = _ms.ReadUInt();            p.winScore = _ms.ReadInt();            p.medal = _ms.ReadUInt();            p.silver = _ms.ReadLong();            p.isBoom = _ms.ReadByte();            p.isShakalaka = _ms.ReadByte();            p.isWin = _ms.ReadByte();            p.usercardList = new List<byte>();            byte num = _ms.ReadByte();            for (int j = 0; j < num; j++)            {                byte v = _ms.ReadByte();                p.usercardList.Add(v);            }            ex_SMGameEnd.playerDataList.Add(p);        }        ex_SMGameEnd.score = multiple;        ex_SMGameEnd.finish = finish;        ex_SMGameEnd.gameCount = gameCount;        //Debug.Log("score:" + ex_SMGameEnd.score + ",finish:" + (int)ex_SMGameEnd.finish + ",gameCount:" + (int)ex_SMGameEnd.gameCount);        //for (int i = 0; i < 2; i++)        //{        //    Ex_MFPlayerData p = ex_SMGameEnd.playerDataList[i];        //    string cards = "(";        //    for (int j = 0; j < p.usercardList.Count; j++)        //    {        //        if (j == p.usercardList.Count - 1)        //        {        //            cards += Ex_JudgeCard.GetCardValue(p.usercardList[j]) + ")";        //        }        //        else        //        {        //            cards += Ex_JudgeCard.GetCardValue(p.usercardList[j]) + ",";        //        }        //    }        //    Debug.Log("uid:" + p.uid        //        + ",point:" + p.point        //        + ",winScore:" + p.winScore        //        + ",medal:" + p.medal        //        + ",silver:" + p.silver        //        );        //    Debug.Log(",isBoom:" + (int)p.isBoom        //        + ",isShakalaka:" + (int)p.isShakalaka        //        + ",isWin:" + (int)p.isWin        //        + ",cards:" + cards);        //}        Ex_GameData.ISPLAYING = false;        SMGameEnd(ex_SMGameEnd);        return true;    }    bool BackDiuDiuLeGameGameStart(uint msgType, UMessage _ms)    {        Ex_GameData.SMGameStartData = new Ex_SMGameStart();        Ex_GameData.SMGameStartData.usercardList = new List<byte>();        uint userid = _ms.ReadUInt();//第一个出牌的userid        byte roomType = _ms.ReadByte();//1普通场 2达标场        byte roomLevel = _ms.ReadByte();//4个场次        uint scorePro = _ms.ReadUInt();//底分        uint standardScore = _ms.ReadUInt();//达标分        uint maxNum = _ms.ReadUInt();//最大场次        uint countNum = _ms.ReadUInt();//当前场次        uint rewardCoin = _ms.ReadUInt();//奖金分                                         //5张手牌牌值        for (int i = 0; i < 5; i++)        {            byte num = _ms.ReadByte();            Ex_GameData.SMGameStartData.usercardList.Add(num);        }        Ex_GameData.SMGameStartData.userid = userid;        Ex_GameData.SMGameStartData.roomType = roomType;        Ex_GameData.SMGameStartData.roomLevel = roomLevel;        Ex_GameData.SMGameStartData.scorePro = scorePro;        Ex_GameData.SMGameStartData.standardScore = standardScore;        Ex_GameData.SMGameStartData.maxNum = maxNum;        Ex_GameData.SMGameStartData.countNum = countNum;        Ex_GameData.SMGameStartData.rewardCoin = rewardCoin;        return true;    }    bool BackDiuDiuLeEmotion(uint msgType, UMessage _ms)    {        Ex_SMGameEmotion ex_SMGameEmotion = new Ex_SMGameEmotion();        uint userid = _ms.ReadUInt();        uint emotionId = _ms.ReadUInt();        ex_SMGameEmotion.userid = userid;        ex_SMGameEmotion.emotionId = emotionId;        ShowEmotion(ex_SMGameEmotion.userid, ex_SMGameEmotion.emotionId);        return true;    }    public void InitDDLMsg()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.Diudiule_enum.DiudiuleMsg_SM_GAMEAUTO, BackDiuDiuLeGameAuto);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.Diudiule_enum.DiudiuleMsg_SM_ACTION, BackDiuDiuLeGameAction);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.Diudiule_enum.DiudiuleMsg_SM_GAMEEND, BackDiuDiuLeGameGameEnd);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.Diudiule_enum.DiudiuleMsg_SM_GAMESTART, BackDiuDiuLeGameGameStart);        CMsgDispatcher.GetInstance().RegMsgDictionary(            (uint)GameCity.Diudiule_enum.DiudiuleMsg_SM_EMOTION, BackDiuDiuLeEmotion);    }    void ShowEmotion(uint userid,uint emotionId)    {        if (userid == GameMain.hall_.GetPlayerData().GetPlayerID())        {            if (go_ani_myEmotion == null)            {                go_ani_myEmotion = CGame_DiuDiuLe.InsPrefab("Anime_Biaoqing",go_myEmotionA);            }            go_ani_myEmotion.SetActive(true);            uac_myEmotion = go_ani_myEmotion.GetComponent<UnityArmatureComponent>();            uac_myEmotion.animation.Play(GetEmotionAniStrById(emotionId),3);            uac_myEmotion.AddEventListener(EventObject.COMPLETE, MyEmotionAniEH);        }        else        {            if (go_ani_otherEmotion == null)            {                go_ani_otherEmotion = CGame_DiuDiuLe.InsPrefab("Anime_Biaoqing", go_otherEmotionA);            }            go_ani_otherEmotion.SetActive(true);            uac_otherEmotion = go_ani_otherEmotion.GetComponent<UnityArmatureComponent>();            uac_otherEmotion.animation.Play(GetEmotionAniStrById(emotionId), 3);            uac_otherEmotion.AddEventListener(EventObject.COMPLETE, OtherEmotionAniEH);        }    }    void MyEmotionAniEH(string _type, EventObject eventObject)    {        switch (_type)        {            case EventObject.COMPLETE:                uac_myEmotion.animation.Stop();                go_ani_myEmotion.SetActive(false);                break;            default:                break;        }    }    void OtherEmotionAniEH(string _type, EventObject eventObject)    {        switch (_type)        {            case EventObject.COMPLETE:                uac_otherEmotion.animation.Stop();                go_ani_otherEmotion.SetActive(false);                break;            default:                break;        }    }    string GetEmotionAniStrById(uint emotionId)    {        string rt_str = "a_2";        switch (emotionId)        {            case 1:                rt_str = "a_2";                break;            case 2:                rt_str = "a_0";                break;            case 3:                rt_str = "a_1";                break;            default:                break;        }        return rt_str;    }    void EmotionFunc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource", "ex_sBtn");            }            uint emotionId = 1;            if (button == (object)go_emotion1)            {                emotionId = 1;            }            else if (button == (object)go_emotion2)            {                emotionId = 2;            }            else if (button == (object)go_emotion3)            {                emotionId = 3;            }            //发送表情消息            UMessage app = new UMessage((uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_EMOTION);            Ex_CMGameEmotion ex_CMGameEmotion = new Ex_CMGameEmotion();            ex_CMGameEmotion.diuMsgType = (uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_EMOTION;            ex_CMGameEmotion.userid = GameMain.hall_.GetPlayerData().GetPlayerID();            ex_CMGameEmotion.emotionId = emotionId;            ex_CMGameEmotion.SetSendData(app);            if (HallMain.gametcpclient.IsSocketConnected)            {                HallMain.SendMsgToRoomSer(app);            }            _ShowExpression(false);        }    }    void ShowExpression(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            if (button == (object)go_emotionBtn)            {                if (Ex_GameData.SOUNDCONFIG)                {                    AudioManager.Instance.PlaySound("diu.resource", "ex_sBtn");                }                if (go_emotionGroup.activeSelf)                {                    _ShowExpression(false);                }                else                {                    _ShowExpression(true);                }            }        }    }    void _ShowExpression(bool _b)    {        //打开        if (_b)        {            go_emotionGroup.SetActive(true);            go_emotionBtn.GetComponent<Image>().sprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Main_face_02");            float tempX = 0f;            for (int i = 0; i < emotionArr.Count; i++)            {                GameObject _go = emotionArr[i];                Color c = _go.GetComponent<Image>().color;                _go.GetComponent<Image>().color = new Color(c.r, c.g, c.b, 0f);                if (i == 1)                {                    _go.transform.localPosition = new Vector3(-220f, 10f, 0f);                }                else                {                    _go.transform.localPosition = new Vector3(-220f, 0f, 0f);                }                if (i == 0)                {                    tempX = -90f;                }                else if (i == 1)                {                    tempX = 0f;                }                else if (i == 2)                {                    tempX = 85f;                }                DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(tempX, _go.transform.localPosition.y, 0f), 0.3f);                DOTween.To(() => _go.GetComponent<Image>().color, r => _go.GetComponent<Image>().color = r, new Color(c.r, c.g, c.b, 1f), 0.3f);            }        }        //关闭        else        {            go_emotionBtn.GetComponent<Image>().sprite = CGame_DiuDiuLe.BundleIns().LoadAsset<Sprite>("Main_face_01");            float tempX = 0f;            for (int i = 0; i < emotionArr.Count; i++)            {                GameObject _go = emotionArr[i];                Color c = _go.GetComponent<Image>().color;                _go.GetComponent<Image>().color = new Color(c.r, c.g, c.b, 1f);                if (i == 0)                {                    tempX = -90f;                }                else if (i == 1)                {                    tempX = 0f;                }                else if (i == 2)                {                    tempX = 85f;                }                _go.transform.localPosition = new Vector3(-tempX, _go.transform.localPosition.y, 0f);                DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(-220f, _go.transform.localPosition.y, 0f), 0.3f);                Tweener t = DOTween.To(() => _go.GetComponent<Image>().color, r => _go.GetComponent<Image>().color = r, new Color(c.r, c.g, c.b, 0f), 0.3f);                t.OnComplete(() =>                {                    go_emotionGroup.SetActive(false);                });            }        }    }    void CancelTuoGuanFunc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerDown)        {            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource","ex_sBtn");            }            ShowTuoGuan(0,false);            if (!Ex_GameData.isXinshou)            {                //发送取消托管消息                UMessage app = new UMessage((uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_GAMEAUTO);                Ex_CMGameAuto ex_CMGameAuto = new Ex_CMGameAuto();                ex_CMGameAuto.diuMsgType = (uint)GameCity.Diudiule_enum.DiudiuleMsg_CM_GAMEAUTO;                ex_CMGameAuto.userid = GameMain.hall_.GetPlayerData().GetPlayerID();                ex_CMGameAuto.SetSendData(app);                if (HallMain.gametcpclient.IsSocketConnected)                {                    HallMain.SendMsgToRoomSer(app);                }            }        }    }    void ShowOtherHandCard(List<byte> arr, int num)    {        otherScore = num;        go_otherScore.SetActive(true);        if (num > 7)        {            pf_otherScore.Init("Text_bai_", go_otherScore);        }        else        {            pf_otherScore.Init("Text_huang_", go_otherScore);        }        pf_otherScore.SetText(num.ToString());        arr.Sort(SortList);        Dictionary<GameObject, Ex_Card> des_ohca = otherHandCardArr.OrderByDescending(p => p.Key.transform.GetSiblingIndex()).ToDictionary(p => p.Key, o => o.Value);        List<GameObject> des_ohca_keys = new List<GameObject>(des_ohca.Keys);        int i = 0;        foreach (GameObject _go in des_ohca_keys)        {            otherHandCardArr[_go].SetCardType(arr[i],true);            _go.transform.SetAsLastSibling();            i++;        }    }    void ShowMyCardCount()    {        int num = GetMyScore();        if (num > 7)        {            pf_myScore.Init("Text_bai_", go_myScore);        }        else        {            pf_myScore.Init("Text_huang_", go_myScore);        }        pf_myScore.SetText(num.ToString());        //if(!go_myScore.activeSelf)            go_myScore.SetActive(true);    }    int GetMyScore()    {        myScore = 0;        foreach (GameObject _go in myHandCardArr.Keys)        {            if (myHandCardArr[_go].cardColor != 4)            {                if (myHandCardArr[_go].cardNum > 10)                {                    myScore += 10;                }                else                {                    myScore += myHandCardArr[_go].cardNum;                }            }        }        return myScore;    }    void ShowRuleFunc(EventTriggerType eventtype, object button, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            if (Ex_GameData.SOUNDCONFIG)            {                AudioManager.Instance.PlaySound("diu.resource", "ex_sBtn");            }            if (button == (object)go_ruleBtn)            {                go_pop_up.SetActive(true);                go_rule.transform.localScale = new Vector3(0,0,1);                Tweener t = go_rule.transform.DOScale(new Vector3(1, 1, 1), 0.3f).SetEase(Ease.OutBack);                t.OnComplete(() =>                {                    XPointEvent.AutoAddListener(go_pop_up, ShowRuleFunc, go_pop_up);                });            }            else if (button == (object)go_rule_closeBtn || button == (object)go_pop_up)            {                DOTween.Kill(go_rule);                Tweener t = go_rule.transform.DOScale(new Vector3(0, 0, 0), 0.3f);                t.OnComplete(() =>                {                    go_pop_up.SetActive(false);                });            }        }    }    void SMGameScene()    {        Ex_SMGameScene msg = Ex_GameData.SMGameScene;        ClearScene();        Ex_GameData.IsInGame = true;        canTouch = true;        if (stype == (int)type.putong)        {            beiNum = (int)msg.addMultiple;            pf_beishu.SetText(beiNum.ToString());            Ex_GameData.Difen = (int)msg.scorePro;            diFen = Ex_GameData.Difen;            go_dizhu.GetComponent<Text>().text = Ex_GameData.Difen.ToString();        } else if (stype == (int)type.dabiao)        {            Ex_GameData.TotalCount = (int)msg.maxNum;            go_huihe.GetComponent<Text>().text = (msg.playcount+1) + "/" + msg.maxNum;            pf_mubiaofen.SetText(msg.standardScore.ToString());            Ex_GameData.DabiaoFen = (int)msg.standardScore;            Ex_GameData.JiangjinFen = (int)msg.rewardCoin;            myFen = (int)msg.myStandardScore;            otherFen = (int)msg.otherStandardScore;            pf_myFen.SetText(myFen.ToString());            pf_otherFen.SetText(otherFen.ToString());        }        ShowChuPai(msg.outCardList);        Ex_GameData.myUserId = msg.myUid;        go_myName.GetComponent<Text>().text = GameMain.hall_.GetPlayerData().GetPlayerName();        go_myMoney.GetComponent<Text>().text = msg.myCarryInCoin.ToString();        go_myHead.GetComponent<Image>().sprite = GameMain.hall_.GetIcon(GameMain.hall_.GetPlayerData().GetPlayerIconURL(),             GameMain.hall_.GetPlayerId(), (int)GameMain.hall_.GetPlayerData().PlayerIconId);        Ex_GameData.otherUserId = msg.otherUid;        Ex_GameData.otherFaceId = msg.otherFaceId;        go_otherName.GetComponent<Text>().text = msg.otherName;        go_otherMoney.GetComponent<Text>().text = msg.otherCarryInCoin.ToString();        go_otherHead.GetComponent<Image>().sprite = GameMain.hall_.GetIcon(Ex_GameData.otherUrl, Ex_GameData.otherUserId, (int)Ex_GameData.otherFaceId);        ShowTuoGuan(0, false);        if (msg.otherIsTruste == 0)        {            ShowTuoGuan(1, false);        }        else if(msg.otherIsTruste == 1)        {            ShowTuoGuan(1, true);        }        //myHeadIcon        //otherHeadIcon        curPlayer = msg.curActionCID;        ShowAllOtherHandCard(msg.otherNum);        ShowAllMyHandCard(msg.usercardList);        ShowTip(curPlayer);        ShowCombo(false);        isZhuijia = false;    }    void ClearScene()    {        //foreach (GameObject _go in outCardArr.Keys)        //{        //    XPointEvent.AutoAddListener(_go, null, null);        //}        //outCardArr.Clear();        //foreach (GameObject _go in otherHandCardArr.Keys)        //{        //    XPointEvent.AutoAddListener(_go, null, null);        //}        //otherHandCardArr.Clear();        //foreach (GameObject _go in myHandCardArr.Keys)        //{        //    myHandCardArr[_go].setState(false);        //    XPointEvent.AutoAddListener(_go, null, null);        //}        //myHandCardArr.Clear();        //ShowTip(0);        //ShowBoom(false);        //go_otherScore.SetActive(false);        //pf_myScore.SetText("");        //ShowTuoGuan(0, false);        //ShowTuoGuan(1, false);        isZhuijia = false;        isFinish = 0;    }    void ShowChuPai(List<byte> cardNumArr)    {        if (cardNumArr.Count == 0) return;        Dictionary<GameObject, Ex_Card> cardArr = new Dictionary<GameObject, Ex_Card>();        for (int j = 0;j < cardNumArr.Count;j++)        {            GameObject cardUI = CGame_DiuDiuLe.InsPrefab("DiuDiuLe_Card", go_card_group);            Ex_Card card = new Ex_Card();            card.InitUI(cardUI,cardNumArr[j]);            cardArr.Add(cardUI,card);        }        List<int> xxArr = new List<int>();        List<int> rrArr = new List<int>();        Dictionary<string,List<int>> obj = Ex_GameData.chupaiPos(cardArr.Count);        xxArr = obj["xArr"];        rrArr = obj["rArr"];        cardArr = ChuPaiOrder(cardArr);        int i = 0;        foreach (GameObject _go in cardArr.Keys)        {            _go.transform.localPosition = new Vector3(xxArr[i], 960 - 470-960/2, 0);            _go.transform.eulerAngles = new Vector3(0f, 0f, rrArr[i]);            outCardArr.Add(_go,cardArr[_go]);            XPointEvent.AutoAddListener(_go, TouchFunc, _go);            if (cardArr.Count > 2)            {                if (i == 0 || i == cardArr.Count - 1)                {                    _go.transform.SetAsLastSibling();                }                else                {                    Color c = _go.GetComponent<Image>().color;                    cardArr[_go].SetAlpha(c.a - 0.3f);                    XPointEvent.AutoAddListener(_go, null, null);                }            }            else            {                _go.transform.SetAsLastSibling();            }            i++;        }    }    /**    * 得到出牌顺序    * @param _cardArr 要出的牌组    * @returns {Card[]} 排序好的牌组    */    Dictionary<GameObject, Ex_Card> ChuPaiOrder(Dictionary<GameObject, Ex_Card>_cardArr)    {        Dictionary<GameObject, Ex_Card> cardArr = new Dictionary<GameObject, Ex_Card>(_cardArr);        if (cardArr.Count <= 1)        {            return cardArr;        }        else        {            Dictionary<GameObject, Ex_Card> cardArr1 = cardArr.OrderBy(o => o.Value.cardNum).ToDictionary(p => p.Key, o => o.Value);            cardArr = cardArr1;            List<GameObject> arr0 = new List<GameObject>();            List<GameObject> arr1 = new List<GameObject>();            foreach (GameObject _go in cardArr.Keys)            {                if (cardArr[_go].cardColor == 4)                {                    arr0.Add(_go);                }                else                {                    arr1.Add(_go);                }            }            if (arr0.Count != 0)            {                List<byte> arr = new List<byte>();                foreach (GameObject _go in cardArr.Keys)                {                    arr.Add(cardArr[_go].cardCode);                }                int idx = Ex_JudgeCard.GetCardsTypeKing(arr);                if (idx == 0 || idx == 2 || idx == 3)                {                    int tmp = cardArr[arr1[0]].cardNum;                    int arrCounts = arr1.Count;                    for (int i = 0; i < cardArr.Count; i++)                    {                        if (i <= arrCounts - 1)                        {                            if (cardArr[arr1[i]].cardNum != tmp + i)                            {                                if (tmp + i < 14)                                {                                    arr1.Insert(i, arr0[0]);                                    arr0.RemoveAt(0);                                }                                else                                {                                    arr1.Insert(0, arr0[0]);                                    arr0.RemoveAt(0);                                }                            }                        } else if (arr0.Count != 0)                        {                            if (tmp + i < 14)                            {                                arr1.Add(arr0[0]);                                arr0.RemoveAt(0);                            }                            else                            {                                arr1.Insert(0, arr0[0]);                                arr0.RemoveAt(0);                            }                        }                    }                    Dictionary<GameObject, Ex_Card> tempArr = new Dictionary<GameObject, Ex_Card>();                    foreach (GameObject _go in arr1)                    {                        tempArr.Add(_go, cardArr[_go]);                    }                    cardArr = tempArr;                }                else if (idx == 1 || idx == 4)                {                    for (int i = arr0.Count-1;i >= 0;i--)                    {                        arr1.Insert(1,arr0[i]);                    }                    Dictionary<GameObject, Ex_Card> tempArr = new Dictionary<GameObject, Ex_Card>();                    foreach (GameObject _go in arr1)                    {                        tempArr.Add(_go, cardArr[_go]);                    }                    cardArr = tempArr;                }            }            return cardArr;        }    }    void ShowAllOtherHandCard(int num)    {        for (int j = 0;j < num;j++)        {            GameObject cardUI = CGame_DiuDiuLe.InsPrefab("DiuDiuLe_Card", go_card_group);            Ex_Card card = new Ex_Card();            card.InitUI(cardUI, (byte)0);            otherHandCardArr.Add(cardUI, card);        }        int other_count = otherHandCardArr.Count;        List<List<float>> p = GetSanxingPos(other_count);        int i = 0;        List<GameObject> other_keys = new List<GameObject>(otherHandCardArr.Keys);        foreach (GameObject _go in other_keys)        {            DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(p[i][0], p[i][1], 0), faPaiSpeed).SetEase(Ease.InOutSine);            DOTween.To(() => _go.transform.eulerAngles, x => _go.transform.eulerAngles = x, new Vector3(0f, 0f, p[i][2]), faPaiSpeed).SetEase(Ease.InOutSine);            i++;        }    }    void ShowAllMyHandCard(List<byte> numArr)    {        for (int j = 0;j < numArr.Count;j++)        {            GameObject cardUI = CGame_DiuDiuLe.InsPrefab("DiuDiuLe_Card", go_card_group);            Ex_Card card = new Ex_Card();            card.InitUI(cardUI, numArr[j]);            myHandCardArr.Add(cardUI, card);        }        Dictionary<GameObject, Ex_Card> myHandCardArr1 = myHandCardArr.OrderBy(o => o.Value.cardNum).ToDictionary(p => p.Key, o => o.Value);        myHandCardArr = myHandCardArr1;        int len = (int)(540 - myHandCardArr.Count * 86 - 4 * handJiange) / 2 + 86 / 2;        int i = 0;        List<GameObject> my_keys = new List<GameObject>(myHandCardArr.Keys);        foreach (GameObject _go in my_keys)        {            DOTween.To(() => _go.transform.localPosition, r => _go.transform.localPosition = r, new Vector3(len + i * (86 + handJiange)-540/2, 150-960/2, 0), faPaiSpeed).SetEase(Ease.InOutSine);            DOTween.To(() => _go.transform.eulerAngles, x => _go.transform.eulerAngles = x, new Vector3(0f, 0f, 360f), faPaiSpeed).SetEase(Ease.InOutSine);            XPointEvent.AutoAddListener(_go,TouchFunc,_go);            i++;        }        ShowMyCardCount();    }}