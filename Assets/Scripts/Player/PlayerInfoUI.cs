using System.Collections.Generic;using UnityEngine;using UnityEngine.EventSystems;using UnityEngine.UI;using USocket.Messages;public struct GiveRecordData{    public uint GiveId;    public byte GiveType;    public long GiveDate;    public long GiveCoinNum;    public string GivePlayerName;    public int Faceid;    public uint GivePlayerId;    public string url;    public GiveRecordData(uint giveid,byte givetype,long givedate,long givecoin,string playername, int faceid, uint giveplayerid)    {        GiveId = giveid;        GiveType = givetype;        GiveDate = givedate;        GiveCoinNum = givecoin;        GivePlayerName = playername;        Faceid = faceid;        GivePlayerId = giveplayerid;        url = "";    }}public class PlayerInfoUI{    public static PlayerInfoUI Instance = new PlayerInfoUI();    //个人信息界面    private GameObject PlayerInfoMainUI = null;    private bool RegisterChangeNameBtnFlag = false;    private bool RegisterChangeIconBtnFlag = false;    private GameObject PlayerIconToggleOnObj = null;    private GameObject BindCellPhoneNumberUIObj = null;    bool isAskTotalData = false;    //验证码计时器    private CTimerPersecondCall BindMobileCodeTimer;    //赠送记录数据是否已请求    public bool bHaveRequestGiveRecordData;    private Object SingleGiveRecordPrefabObj;    private Transform GiveRecordContentObjTf;    private GameObject CurrentSelectSingleRecordObj;    public List<GiveRecordData> m_GiveRecordDataList;    private bool bNeedResetGiveRecordUIFlag;    PlayerInfoUI()    {        RegisterChangeNameBtnFlag = false;        RegisterChangeIconBtnFlag = false;        bHaveRequestGiveRecordData = false;        bNeedResetGiveRecordUIFlag = true;        PlayerIconToggleOnObj = null;        BindCellPhoneNumberUIObj = null;        SingleGiveRecordPrefabObj = null;        CurrentSelectSingleRecordObj = null;        m_GiveRecordDataList = new List<GiveRecordData>();        InitPlayerInfoUI();        RegisterMsgHangle();    }    private void RegisterMsgHangle()    {        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CrazyCityMsg_BACKCHANGENAME, ChangeNickNameSuccess);   //改名        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CrazyCityMsg_SENDROLECLUBGIVEDATATOCLINT, RecvRoleGiveRecordData);        CMsgDispatcher.GetInstance().RegMsgDictionary(                (uint)GameCity.EMSG_ENUM.CrazyCityMsg_SENDPLAYERGAMESTATISTICSDATA, BackPlayerTotalData);    }    bool BackPlayerTotalData(uint _msgType, UMessage msg)    {        byte length = msg.ReadByte();        if(GameMain.hall_.GetPlayerData().totalinfo.Count == 0)        {            TotalInfo zeroti7 = new TotalInfo();            GameMain.hall_.GetPlayerData().totalinfo.Add((byte)7, zeroti7);            TotalInfo zeroti13 = new TotalInfo();            GameMain.hall_.GetPlayerData().totalinfo.Add((byte)13, zeroti13);        }        for(int index = 0; index < length; index++)        {            byte gamekind = msg.ReadByte();            if (GameMain.hall_.GetPlayerData().totalinfo.ContainsKey(gamekind))            {                GameMain.hall_.GetPlayerData().totalinfo[gamekind].matchtimes = msg.ReadUInt();                GameMain.hall_.GetPlayerData().totalinfo[gamekind].totaltimes = msg.ReadUInt();                GameMain.hall_.GetPlayerData().totalinfo[gamekind].finaltimes = msg.ReadUInt();                GameMain.hall_.GetPlayerData().totalinfo[gamekind].bestsort = (ushort)msg.ReadShort();                GameMain.hall_.GetPlayerData().totalinfo[gamekind].special1 = msg.ReadUInt();                GameMain.hall_.GetPlayerData().totalinfo[gamekind].special2 = msg.ReadUInt();                GameMain.hall_.GetPlayerData().totalinfo[gamekind].glory.Clear();                for (int gloryindex = 0; gloryindex < 3; gloryindex++)                    GameMain.hall_.GetPlayerData().totalinfo[gamekind].glory.Add(msg.ReadUInt());            }            else            {                TotalInfo ti = new TotalInfo();                ti.matchtimes = msg.ReadUInt();                ti.totaltimes = msg.ReadUInt();                ti.finaltimes = msg.ReadUInt();                ti.bestsort = (ushort)msg.ReadShort();                ti.special1 = msg.ReadUInt();                ti.special2 = msg.ReadUInt();                ti.glory.Clear();                for (int gloryindex = 0; gloryindex < 3; gloryindex++)                    ti.glory.Add(msg.ReadUInt());                GameMain.hall_.GetPlayerData().totalinfo.Add(gamekind, ti);            }        }        InitPlayerInfoPanel();        return true;    }    public void InitPlayerInfoUI()    {        if(PlayerInfoMainUI == null)        {            AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);            if (bundle == null)                return;            Object obj0 = bundle.LoadAsset("Lobby_PlayerInfo_new") as Object;            SingleGiveRecordPrefabObj = bundle.LoadAsset("PlayerInfo_GiveRecord") as Object;            PlayerInfoMainUI = GameMain.instantiate(obj0) as GameObject;            Transform CanvasUItf = GameObject.Find("Canvas/Root").transform;            PlayerInfoMainUI.transform.SetParent(CanvasUItf, false);            PlayerInfoMainUI.SetActive(false);        }                InitPlayerDataInfo();        InitPlayerInfoUIBtnEvent();    }    public void Ask4PlayerTotalData(sbyte kind = -1)    {        if (isAskTotalData)            return;        UMessage totaldatamsg = new UMessage((byte)GameCity.EMSG_ENUM.CrazyCityMsg_APPLYPLAYERGAMESTATISTICSDATA);        totaldatamsg.Add(GameMain.hall_.GetPlayerId());        totaldatamsg.Add(kind);        NetWorkClient.GetInstance().SendMsg(totaldatamsg);        isAskTotalData = true;    }    //填充玩家数据到界面    private void InitPlayerDataInfo()    {        PlayerData playerdata = GameMain.hall_.GetPlayerData();        //头像ICON        Image icon = PlayerInfoMainUI.transform.Find("ImageBG").Find("Middle").Find("Image_HeadFram").Find("Image_Mask")            .Find("Image_Head").gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(playerdata.GetPlayerIconURL(), playerdata.GetPlayerID(), (int)playerdata.PlayerIconId);        //名称        Text NameText = PlayerInfoMainUI.transform.Find("ImageBG").Find("Middle").Find("Image_Name").Find("Text")            .gameObject.GetComponent<Text>();        NameText.text = playerdata.GetPlayerName();        Text IDText = PlayerInfoMainUI.transform.Find("ImageBG/Middle/Text_ID").gameObject.GetComponent<Text>();        IDText.text = GameMain.hall_.GetPlayerId().ToString();        //玩家账号        //Text UseridText = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_ID").FindChild("Text")        //   .gameObject.GetComponent<Text>();        //UseridText.text = playerdata.GetPlayerID().ToString();        //金币        //Text cointxt = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_coinframe").FindChild("Text_Coin")        //  .gameObject.GetComponent<Text>();        //cointxt.text = playerdata.GetCoin().ToString();        //钻石        Text diamondtxt = PlayerInfoMainUI.transform.Find("ImageBG").Find("Middle").Find("Image_DiamondFrame").Find("Text_Diamond")          .gameObject.GetComponent<Text>();        diamondtxt.text = (playerdata.GetDiamond() + playerdata.GetCoin()).ToString();        //奖券        //Text lotterytxt = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_TicketFrame").FindChild("Text_Ticket")        //  .gameObject.GetComponent<Text>();        //lotterytxt.text = playerdata.GetLottery().ToString();        //vip        //Image VipIamge = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_Vip").FindChild("Vip_Text")        // .FindChild("Num").gameObject.GetComponent<Image>();        //AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        //if (playerdata.GetVipLevel() == 0)        //{        //    Image VipHui = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_Vip").gameObject.GetComponent<Image>();        //    VipHui.sprite = bundle.LoadAsset<Sprite>("zjm_word_vip_hui");        //}        //VipIamge.sprite = bundle.LoadAsset<Sprite>("zjm_word_sz_vip_" + playerdata.GetVipLevel().ToString());        Text masterScoreTx = PlayerInfoMainUI.transform.Find("ImageBG").Find("Middle").            Find("Image_dashi").Find("Text_num").gameObject.GetComponent<Text>();        masterScoreTx.text = GameMain.hall_.GetPlayerData().MasterScoreKindArray.ToString();        //Text contestTimesTx = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").        //    FindChild("Text_bisaichangci").FindChild("Text").gameObject.GetComponent<Text>();        //contestTimesTx.text = "";        //Text finalContestTimesTx = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").        //    FindChild("Text_juesai").FindChild("Text").gameObject.GetComponent<Text>();        //finalContestTimesTx.text = "";        //Text bestSortTx = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").        //    FindChild("Text_zuijia").FindChild("Text").gameObject.GetComponent<Text>();        //bestSortTx.text = "";        //Text sumTimesTx = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").        //    FindChild("Text_zongshu").FindChild("Text").gameObject.GetComponent<Text>();        //sumTimesTx.text = "";        //Text winRateTx = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").        //    FindChild("Text_shenglv").FindChild("Text").gameObject.GetComponent<Text>();        //winRateTx.text = "";        //Text creditScore = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").        //    FindChild("Text_xinyu").FindChild("Text").gameObject.GetComponent<Text>();        //creditScore.text = "";        //俱乐部        //Text clubname = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_Club")        //               .FindChild("Text").gameObject.GetComponent<Text>();        //if (playerdata.GetGuildID() == 0)        //{        //    clubname.text = "尚未加入俱乐部";        //}        //else        //{        //    if(!string.IsNullOrEmpty(GuildData.Instance().GuildName))        //      clubname.text = GuildData.Instance().GuildName;        //    else        //    {        //        clubname.text = playerdata.GetGuildName();        //    }        //}        Text masterstep = PlayerInfoMainUI.transform.Find("ImageBG/Middle/Image_dashi/Text_num").gameObject.GetComponent<Text>();        masterstep.text = CCsvDataManager.Instance.GameDataMgr.GetMasterLv(GameMain.hall_.GetPlayerData().MasterScoreKindArray[(int)GameKind_Enum.GameKind_LandLords]);        Text masterscore = PlayerInfoMainUI.transform.Find("ImageBG/Middle/Image_dashi/Text_fen").gameObject.GetComponent<Text>();        masterscore.text = GameMain.hall_.GetPlayerData().MasterScoreKindArray[(int)GameKind_Enum.GameKind_LandLords].ToString();        //InitPlayerInfoPanel();    }    //注册个人信息界面各按钮点击事件    private void InitPlayerInfoUIBtnEvent()    {        if (PlayerInfoMainUI == null)            return;        GameObject returnBtn = PlayerInfoMainUI.transform.Find("ImageBG").Find("ButtonClose").gameObject;        XPointEvent.AutoAddListener(returnBtn, ClickClosePlayerInfoBtn, null);        //GameObject changNameBtn = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_Name")        //              .FindChild("ButtonXiugai").gameObject;        PlayerData playerdata = GameMain.hall_.GetPlayerData();        ////已经修改过昵称        //if (playerdata != null && playerdata.IsChangeName)        //{        //    changNameBtn.SetActive(false);                 //}        //else        //{        //    XPointEvent.AutoAddListener(changNameBtn, ClickChangeNameBtn, null);        //}        //修改ICON        //GameObject changIconBtn = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_HeadFram")        //    .FindChild("Button_Head").gameObject;        //XPointEvent.AutoAddListener(changIconBtn, ClickChangeIconBtn, null);        //切换账号        //GameObject ChangeAccountBtn = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_ID")        //    .FindChild("ButtonQiehuan").gameObject;        //XPointEvent.AutoAddListener(ChangeAccountBtn, ClickChangeAccountBtn, null);        //俱乐部        //GameObject joinclubBtn = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Middle").FindChild("Image_Club")        //       .FindChild("ButtonJoinClub").gameObject;        // XPointEvent.AutoAddListener(joinclubBtn, ClickJoinClubBtn, null);        // if (playerdata.GetGuildID() == 0)        //     joinclubBtn.SetActive(true);        // else        //     joinclubBtn.SetActive(false);        //绑定手机号        //GameObject bindphoneBtn = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Bottom").FindChild("Button_Safe").gameObject;        //XPointEvent.AutoAddListener(bindphoneBtn, ClickBindPhoneBtn, null);        //赠送记录        //GameObject GiveBtn = PlayerInfoMainUI.transform.FindChild("ImageBG").FindChild("Bottom").FindChild("Button_Zengsongjilu").gameObject;        //XPointEvent.AutoAddListener(GiveBtn, ClickGiveRecordBtn, null);        //邀请码        /*GameObject InviteBtn = PlayerInfoMainUI.transform.FindChild("Bottom").FindChild("Button_invitecode").gameObject;        if (playerdata.nIsBindInvite == 0)        {            InviteBtn.SetActive(true);            XPointEvent.AutoAddListener(InviteBtn, ClickInviteCodeBtn, null);        }        else        {            InviteBtn.SetActive(false);                   }*/        Toggle guandanInfo = PlayerInfoMainUI.transform.Find("ImageBG/Left/Toggle (1)").gameObject.GetComponent<Toggle>();        guandanInfo.onValueChanged.AddListener(delegate (bool value) { ChangeInfoPanel((int)GameKind_Enum.GameKind_LandLords, 1, value); });        Toggle landlordInfo = PlayerInfoMainUI.transform.Find("ImageBG/Left/Toggle (2)").gameObject.GetComponent<Toggle>();        landlordInfo.onValueChanged.AddListener(delegate (bool value) { ChangeInfoPanel((int)GameKind_Enum.GameKind_GuanDan, 2, value); });        GameObject exitbtn = PlayerInfoMainUI.transform.Find("ImageBG/bottom/Button_exit").gameObject;        XPointEvent.AutoAddListener(exitbtn, Exit2Login, null);    }    //回到登录界面    private void Exit2Login(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            PlayerInfoMainUI.SetActive(false);            CGameContestRankingTifings.GetChessRankingInstance(false).ClearContestRankingData();            GameMain.hall_.AnyWhereBackToLoginUI();        }    }    void ChangeInfoPanel(int gameid,int pick, bool ison)    {        GameObject panel = PlayerInfoMainUI.transform.Find("ImageBG/Middle/GameInfo_" + pick.ToString()).gameObject;        panel.SetActive(ison);        SetChangeInfoData(gameid, pick);    }    void SetChangeInfoData(int gameid, int pick)    {        Text masterstep = PlayerInfoMainUI.transform.Find("ImageBG/Middle/Image_dashi/Text_num").gameObject.GetComponent<Text>();        masterstep.text = CCsvDataManager.Instance.GameDataMgr.GetMasterLv(GameMain.hall_.GetPlayerData().MasterScoreKindArray[gameid]);        Text masterscore = PlayerInfoMainUI.transform.Find("ImageBG/Middle/Image_dashi/Text_fen").gameObject.GetComponent<Text>();        masterscore.text = GameMain.hall_.GetPlayerData().MasterScoreKindArray[gameid].ToString();        for (int gloryindex = 1; gloryindex < 4; gloryindex++)        {            GameObject glorybg = PlayerInfoMainUI.transform.Find("ImageBG/bottom/ImageIcon_" + gloryindex.ToString()).gameObject;            Text tempglory = glorybg.transform.Find("Text").gameObject.GetComponent<Text>();            tempglory.text = GameMain.hall_.GetPlayerData().totalinfo[(byte)gameid].glory[gloryindex - 1].ToString();        }    }    public void InitPlayerInfoPanel()    {        if (PlayerInfoMainUI == null)            return;        if (GameMain.hall_.GetPlayerData().totalinfo.Count == 0)            return;        Text credit = PlayerInfoMainUI.transform.Find("ImageBG/Middle/Image_xinyu/Text_num").gameObject.GetComponent<Text>();        credit.text = GameMain.hall_.GetPlayerData().creditScore.ToString();        for (int index = 1; index < 3; index++)        {            GameObject infobg = PlayerInfoMainUI.transform.Find("ImageBG/Middle/GameInfo_" + index.ToString()).gameObject;            byte key = (index == 1) ? (byte)7 : (byte)13;            if (!GameMain.hall_.GetPlayerData().totalinfo.ContainsKey(key))                continue;            Text matchtimes = infobg.transform.Find("Text_bisaichangci/Text").gameObject.GetComponent<Text>();            matchtimes.text = GameMain.hall_.GetPlayerData().totalinfo[key].matchtimes.ToString();            Text finaltimes = infobg.transform.Find("Text_juesai/Text").gameObject.GetComponent<Text>();            finaltimes.text = GameMain.hall_.GetPlayerData().totalinfo[key].finaltimes.ToString();            Text bestscore = infobg.transform.Find("Text_zuijia/Text").gameObject.GetComponent<Text>();            bestscore.text = GameMain.hall_.GetPlayerData().totalinfo[key].bestsort.ToString();            Text alltimes = infobg.transform.Find("Text_zongshu/Text").gameObject.GetComponent<Text>();            alltimes.text = GameMain.hall_.GetPlayerData().totalinfo[key].totaltimes.ToString();            Text info1 = infobg.transform.Find("Text_info_1/Text").gameObject.GetComponent<Text>();            info1.text = GameMain.hall_.GetPlayerData().totalinfo[key].special1.ToString();            Text info2 = infobg.transform.Find("Text_info_2/Text").gameObject.GetComponent<Text>();            info2.text = GameMain.hall_.GetPlayerData().totalinfo[key].special2.ToString();        }        SetChangeInfoData((int)GameKind_Enum.GameKind_LandLords, 1);    }    public void OpenOrClosePlayerInfoUI(bool bShow)    {        if (PlayerInfoMainUI == null && bShow)            InitPlayerInfoUI();        //主动刷新一下玩家数据        if (bShow)        {            InitPlayerDataInfo();            InitPlayerInfoUIBtnEvent();            InitPlayerInfoPanel();        }        PlayerInfoMainUI.SetActive(bShow);        Ask4PlayerTotalData();    }    //关闭角色信息    private void ClickClosePlayerInfoBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenOrClosePlayerInfoUI(false);        }    }    //修改昵称按钮    private void ClickChangeNameBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ShowTopChildUI(1);        }    }    //更新头像ICON按钮    private void ClickChangeIconBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            ShowTopChildUI(2);        }    }    //更换账号按钮    private void ClickChangeAccountBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            // 回到登陆界面            //PlayerData playerdata = GameMain.hall_.GetPlayerData();            //if(playerdata.nBindMobileNum != 0)            {                OpenOrClosePlayerInfoUI(false);                GameMain.hall_.HallBackToLoginUI();            }//             else//             {//                 //当前角色还未绑定 手机//                 CCustomDialog.OpenCustomDialogWithTipsID(1006, BindMobileTipsDialogCallBack);//             }        }    }    public void BindMobileTipsDialogCallBack(object pragma)    {        int exitSelectState = (int)pragma;        //绑定        if (exitSelectState == 1)        {            OpenOrCloseBindPhoneUI(true);        }    }    //点击加入俱乐部按钮    private void ClickJoinClubBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenOrClosePlayerInfoUI(false);            GameMain.hall_.AskForClubData();            if (GameMain.hall_.club_ == null)            {                GameObject canvas = GameObject.Find("Canvas/Root");                GameMain.hall_.club_ = new Club(canvas);                GameMain.hall_.club_.Start();            }            GameMain.hall_.club_.ShowClub();        }    }    //赠送记录按钮    private void ClickGiveRecordBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenOrCloseGiveRecordUI(true);        }    }    //邀请码按钮    private void ClickInviteCodeBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenOrCloseInviteCodeUI(true);        }    }    //打开或关闭赠送记录界面    private void OpenOrCloseGiveRecordUI(bool bShow)    {        GameObject popobj = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").gameObject;        popobj.SetActive(bShow);        popobj.transform.Find("PopUp_GiveRecord").gameObject.SetActive(bShow);        //请求记录数据        if(bShow )        {            GiveRecordContentObjTf = popobj.transform.Find("PopUp_GiveRecord").Find("ImageBG")                .Find("Viewport_GiveRecord").Find("Content_GiveRecord");            if (bNeedResetGiveRecordUIFlag)            {                GameObject closebtn = popobj.transform.Find("PopUp_GiveRecord").Find("ButtonClose").gameObject;                XPointEvent.AutoAddListener(closebtn, onClickCloseGiveRecordUIBtn, null);                GameObject clearbtn = popobj.transform.Find("PopUp_GiveRecord").Find("ButtonClear").gameObject;                XPointEvent.AutoAddListener(clearbtn, onClickClearGiveRecordDataBtn, null);                RefreshGiveRecordContentUIObj();                        }            if (!bHaveRequestGiveRecordData)            {                bHaveRequestGiveRecordData = true;                m_GiveRecordDataList.Clear();                RequestGiveRecordData(0);            }            }    }    //点击关闭赠送记录界面按钮    private void onClickCloseGiveRecordUIBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenOrCloseGiveRecordUI(false);        }    }    //点击一键清空赠送记录按钮    private void onClickClearGiveRecordDataBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (m_GiveRecordDataList.Count > 0)               CCustomDialog.OpenCustomDialogWithTipsID(1307, CallBackClearGiveRecord);        }    }    //确认清空赠送记录    private void CallBackClearGiveRecord(object pragma)    {        int SelectState = (int)pragma;        //确认清空        if(SelectState == 1)        {            RefreshGiveRecordContentUIObj(true);            RequestDeleteGiveRecord(0);                    }    }    //打开或关闭邀请码界面    private void OpenOrCloseInviteCodeUI(bool bShow)    {        GameObject popobj = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").gameObject;        popobj.SetActive(bShow);        popobj.transform.Find("PopUp_invitecode").gameObject.SetActive(bShow);        if(bShow)        {            GameObject OkBtn = popobj.transform.Find("PopUp_invitecode").Find("ButtonOk").gameObject;            XPointEvent.AutoAddListener(OkBtn, ClickSetInviteCodeOkBtn, null);            GameObject cancelBtn = popobj.transform.Find("PopUp_invitecode").Find("ButtonCancel").gameObject;            XPointEvent.AutoAddListener(cancelBtn, ClickSetInviteCodeCancelBtn, null);        }    }    //点击设置邀请码确定按钮    private void ClickSetInviteCodeOkBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            Transform invitetf = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").Find("PopUp_invitecode");            InputField invitecodeInput = invitetf.Find("ImageBG").Find("InputNum").gameObject.GetComponent<InputField>();            string codestr = invitecodeInput.text;            if (string.IsNullOrEmpty(codestr))                return;            //检测是否有效邀请码            if (codestr.Length != 6)                return;            //发送验证码到服务器            SendSetInviteCodeMsg(codestr);            OpenOrCloseInviteCodeUI(false);        }    }    //点击设置邀请码确定按钮    private void ClickSetInviteCodeCancelBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenOrCloseInviteCodeUI(false);        }    }    //点击绑定手机号按钮    private void ClickBindPhoneBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if(eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (BindCellPhoneNumberUIObj == null)                InitBindCellPhoneUI();            OpenOrCloseBindPhoneUI(true);        }    }    //打开或关闭绑定手机界面    public void OpenOrCloseBindPhoneUI(bool bShow)    {        if (BindCellPhoneNumberUIObj == null)        {            InitBindCellPhoneUI();        }        if (BindCellPhoneNumberUIObj == null)            return;        //主动刷新界面的数据，防止玩家切换过账号显示为旧数据        if(bShow)        {            InitBindCellPhoneUIData();        }        GameObject popobj = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").gameObject;        popobj.SetActive(bShow);        BindCellPhoneNumberUIObj.SetActive(bShow);    }    private void InitBindCellPhoneUIData()    {        //绑定的手机号码        Text BindPhoneText = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")          .Find("Text_CurBinding").gameObject.GetComponent<Text>();        PlayerData playerdata = GameMain.hall_.GetPlayerData();        if (playerdata.GetBindPhoneNumber() == 0)            BindPhoneText.text = "当前未绑定手机";        else        {            string phonenumstr = playerdata.GetBindPhoneNumber().ToString();            string tempstr = phonenumstr.Substring(0, 3) + "****" + phonenumstr.Substring(7, 4);            BindPhoneText.text = "当前绑定手机:" + tempstr;        }        //重置输入手机号提示        BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding").Find("ImageBG")            .Find("InputPhoneNum").gameObject.GetComponent<InputField>().text = "";        //重置输入验证码提示        BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding").Find("ImageBG")            .Find("InputVerificationCode").gameObject.GetComponent<InputField>().text = "";    }    //初始绑定手机号界面    private void InitBindCellPhoneUI()    {        if (PlayerInfoMainUI == null)            return;        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        Object bindperfab = bundle.LoadAsset<Object>("PopUp_Verify");        BindCellPhoneNumberUIObj = GameMain.instantiate(bindperfab) as GameObject;        BindCellPhoneNumberUIObj.transform.SetParent(PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up"),false);        BindCellPhoneNumberUIObj.SetActive(false);        GameObject sendcodeBtn = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")            .Find("ImageBG").Find("ButtonSend").gameObject;        XPointEvent.AutoAddListener(sendcodeBtn, ClickSendVerificationCodeBtn, null);        GameObject okBtn = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")            .Find("ButtonOk").gameObject;        XPointEvent.AutoAddListener(okBtn, ClickBindPhoneOkBtn, null);        GameObject cancelBtn = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")            .Find("ButtonCancel").gameObject;        XPointEvent.AutoAddListener(cancelBtn, ClickBindPhoneCancelBtn, null);    }    //绑定手机号结果处理    public void HandleBindMobileResult(bool bSuccess)    {        if (BindMobileCodeTimer != null)            BindMobileCodeTimer.SetDeleteFlag(true);        if (BindCellPhoneNumberUIObj == null)            return;        GameObject getcodeBtn = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")               .Find("ImageBG").Find("ButtonSend").gameObject;        getcodeBtn.GetComponent<Image>().raycastTarget = true;        getcodeBtn.GetComponent<Button>().interactable = true;        Text strCode = getcodeBtn.transform.Find("Text").gameObject.GetComponent<Text>();        strCode.text = "获取验证码";    }    //点击获取验证码按钮    private void ClickSendVerificationCodeBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (BindCellPhoneNumberUIObj == null)                return;            InputField phoneInput = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")            .Find("ImageBG").Find("InputPhoneNum").gameObject.GetComponent<InputField>();            string phonenumberstr = phoneInput.text;            if (string.IsNullOrEmpty(phonenumberstr))            {                CCustomDialog.OpenCustomConfirmUI(1003);                return;            }            //检测是否有效手机号码            if(GameCommon.CheckPhoneIsAble(phonenumberstr))            {                GameObject sendcodeBtn = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")                .Find("ImageBG").Find("ButtonSend").gameObject;                sendcodeBtn.GetComponent<Image>().raycastTarget = false;                sendcodeBtn.GetComponent<Button>().interactable = false;                BindMobileCodeTimer = new CTimerPersecondCall(60f, UpdataBindGetCodeBtnSecondText);                xTimeManger.Instance.RegisterTimer(BindMobileCodeTimer);                //发送手机号码到服务器                CLoginUI.Instance.SendApplyGetCode(long.Parse(phonenumberstr), 2);            }            else            {                CCustomDialog.OpenCustomConfirmUI(1003);            }        }    }    /// <summary>    /// 登陆中的时候 更新 获取验证码按钮上的文字显示    /// </summary>    void UpdataBindGetCodeBtnSecondText(object[] RemainTime)    {        if (BindCellPhoneNumberUIObj == null)            return;        float fRemaintime = (float)RemainTime[0];        GameObject getcodeBtn = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")              .Find("ImageBG").Find("ButtonSend").gameObject;        if (null != getcodeBtn)        {            Text strCode = getcodeBtn.transform.Find("Text").gameObject.GetComponent<Text>();            if (fRemaintime > 1)                strCode.text = fRemaintime.ToString("f0") + "S可重新获取";            else            {                getcodeBtn.GetComponent<Image>().raycastTarget = true;                getcodeBtn.GetComponent<Button>().interactable = true;                strCode.text = "获取验证码";            }        }    }    //点击绑定手机号确定按钮    private void ClickBindPhoneOkBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (BindCellPhoneNumberUIObj == null)                return;            InputField codeInput = BindCellPhoneNumberUIObj.transform.Find("PhoneNumbe_Binding")            .Find("ImageBG").Find("InputVerificationCode").gameObject.GetComponent<InputField>();            string codestr = codeInput.text;            if (string.IsNullOrEmpty(codestr))                return;            //检测是否有效验证码            if (codestr.Length != 6)                return;            //发送验证码到服务器            CLoginUI.Instance.SendCodeApplyLogin(uint.Parse(codestr), 2);            OpenOrCloseBindPhoneUI(false);        }    }    //点击绑定手机号取消按钮    private void ClickBindPhoneCancelBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            OpenOrCloseBindPhoneUI(false);        }    }    //注册修改昵称界面按钮    private void RegisterChangeNameUIBtn()    {        if (PlayerInfoMainUI == null)            return;        Transform changnameUItf = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").Find("PopUp_ChangeName");        GameObject OkBtn = changnameUItf.Find("ButtonOk").gameObject;        XPointEvent.AutoAddListener(OkBtn, ClickChangeNameOkBtn, null);        GameObject cancelBtn = changnameUItf.Find("ButtonCancel").gameObject;        XPointEvent.AutoAddListener(cancelBtn, ClickChangeNameCancelBtn, null);        RegisterChangeNameBtnFlag = true;    }    //注册修改玩家ICON界面按钮    private void RegisterChangeIconUIBtn()    {        if (Luancher.IsVChatLogin)            return;        if (PlayerInfoMainUI == null)            return;        Transform changIconUItf = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").Find("PopUp_ChangeHead");        GameObject iconOkBtn = changIconUItf.Find("ButtonOk").gameObject;        XPointEvent.AutoAddListener(iconOkBtn, ClickChangeIconOkBtn, null);        GameObject iconcancelBtn = changIconUItf.Find("ButtonCancel").gameObject;        XPointEvent.AutoAddListener(iconcancelBtn, ClickChangeIconCancelBtn, null);        //添加Icon到界面中        Dictionary<string, Sprite> iconlist = GameMain.hall_.sprites_;        uint playerid = GameMain.hall_.GetPlayerId();        AssetBundle bundle = AssetBundleManager.GetAssetBundle(GameDefine.HallAssetbundleName);        if (bundle == null)            return;        Object iconper = bundle.LoadAsset("PlayerInfo_ChangeHead") as Object;        Transform IconContaintf = changIconUItf.Find("ImageBG").Find("Viewport_ChangeHead").Find("Content_ChangeHead");        ToggleGroup icongroup = IconContaintf.gameObject.GetComponent<ToggleGroup>();        foreach (var icon in iconlist)        {            //非当前玩家ICON才添加进去            if (icon.Key.CompareTo(playerid.ToString()) != 0)            {                GameObject IconObj = GameMain.instantiate(iconper) as GameObject;                IconObj.name = icon.Key;                IconObj.transform.SetParent(IconContaintf, false);                IconObj.transform.Find("Background").gameObject.GetComponent<Image>().sprite = icon.Value;                IconObj.GetComponent<Toggle>().group = icongroup;                IconObj.GetComponent<Toggle>().onValueChanged.AddListener(                delegate (bool isOn) { OnIconToggleValueChanged(isOn, IconObj); });            }        }        RegisterChangeIconBtnFlag = true;    }    //Icon Toggle选中ICON改变事件处理    private void OnIconToggleValueChanged(bool ison,GameObject onObj)    {        if (ison)        {            PlayerIconToggleOnObj = onObj;        }    }    //点击修改昵称确定按钮    private void ClickChangeNameOkBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            InputField nameInput = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").Find("PopUp_ChangeName")                .Find("ImageBG").Find("InputName").gameObject.GetComponent<InputField>();            string newnamestr = nameInput.text;            if (string.IsNullOrEmpty(newnamestr))                return;            //检测是否含空格            if(newnamestr.Contains(" "))            {                CCustomDialog.OpenCustomConfirmUI(1220);                return;            }            int newnamestrlen = System.Text.Encoding.UTF8.GetBytes(newnamestr).Length;            //utf-8编码下一个汉字占3字节,最多允许6个汉字            if (newnamestrlen > 18)            {                //Debug.Log("昵称过长，请重新输入");                CCustomDialog.OpenCustomConfirmUI(1221);                return;            }            //屏蔽字检测通过再发送请求            if (GameCommon.CheckForbiddenWord(ref newnamestr, false))            {                //Debug.Log("昵称不合法,请重新输入");                CCustomDialog.OpenCustomConfirmUI(1220);                return;            }            SendChangeNickNameReq(newnamestr);            CloseTopChildUI(1);        }    }    //修改昵称(头像)成功后刷新显示(收到服务器修改成功消息)    public void RefreshShowPlayerNameIcon()    {        if (PlayerInfoMainUI == null)            return;        PlayerData playerdata = GameMain.hall_.GetPlayerData();        Image icon = PlayerInfoMainUI.transform.Find("ImageBG").Find("Middle").Find("Image_HeadFram").Find("Image_Mask")            .Find("Image_Head").gameObject.GetComponent<Image>();        icon.sprite = GameMain.hall_.GetIcon(playerdata.GetPlayerIconURL(), playerdata.GetPlayerID(), (int)playerdata.PlayerIconId);        Text NameText = PlayerInfoMainUI.transform.Find("ImageBG").Find("Middle").Find("Image_Name").Find("Text")            .gameObject.GetComponent<Text>();        NameText.text = playerdata.GetPlayerName();        if(playerdata.IsChangeName)        {            GameObject changNameBtn = PlayerInfoMainUI.transform.Find("Middle").Find("Image_Name")                                 .Find("ButtonXiugai").gameObject;            changNameBtn.SetActive(false);        }    }    //点击修改昵称取消按钮    private void ClickChangeNameCancelBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            CloseTopChildUI(1);        }    }    //点击修改icon 确定按钮    private void ClickChangeIconOkBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            if (PlayerIconToggleOnObj != null)            {                if (Luancher.IsVChatLogin)                    return;                Debug.Log("Player Icon:"+PlayerIconToggleOnObj.name);                CloseTopChildUI(2);                //发送请求修改ICON消息                ushort playerIconId = 0;                ushort.TryParse(PlayerIconToggleOnObj.name, out playerIconId);                SendChangeIconIDReq(playerIconId);            }                  }    }    //点击修改icon取消按钮    private void ClickChangeIconCancelBtn(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            CloseTopChildUI(2);        }    }    //显示子功能界面    private void ShowTopChildUI(byte childtype)    {        if (PlayerInfoMainUI == null)            return;        GameObject popobj = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").gameObject;        switch (childtype)        {            case 1:                {                    if (!RegisterChangeNameBtnFlag)                        RegisterChangeNameUIBtn();                    GameObject chgenameui = popobj.transform.Find("PopUp_ChangeName").gameObject;                    chgenameui.SetActive(true);                    popobj.SetActive(true);                }                break;            case 2:                {                    if (!RegisterChangeIconBtnFlag)                        RegisterChangeIconUIBtn();                    GameObject chgeiconui = popobj.transform.Find("PopUp_ChangeHead").gameObject;                    chgeiconui.SetActive(true);                    popobj.SetActive(true);                }                break;        }    }     //关闭子功能界面    private void CloseTopChildUI(byte childtype)    {        if (PlayerInfoMainUI == null)            return;        GameObject popobj = PlayerInfoMainUI.transform.Find("ImageBG").Find("Pop_up").gameObject;        switch (childtype)        {            case 1:                {                                       GameObject chgenameui = popobj.transform.Find("PopUp_ChangeName").gameObject;                    chgenameui.SetActive(false);                    popobj.SetActive(false);                                    }                break;            case 2:                {                                       GameObject chgeiconui = popobj.transform.Find("PopUp_ChangeHead").gameObject;                    chgeiconui.SetActive(false);                    popobj.SetActive(false);                }                break;        }    }    /// <summary>    /// 发送消息到服务器获取工会赠送数据    /// </summary>    public void RequestGiveRecordData(short nBeginSign)    {        UMessage ApplyMsg = new UMessage((uint)GameCity.EMSG_ENUM.CrazyCityMsg_GETROLECLUBGIVEDATA);        ApplyMsg.Add(nBeginSign);        ApplyMsg.Add(GameMain.hall_.GetPlayerId());        NetWorkClient.GetInstance().SendMsg(ApplyMsg);    }    /// <summary>    /// 添加赠送记录data到list    /// </summary>    /// <param name="giveData"></param>    /// <returns></returns>    private bool AddSingleGiveRecordDataToList(GiveRecordData giveData)    {        //先判断下列表里是否已经存在        for (int i = 0; i < m_GiveRecordDataList.Count; i++)        {            if (m_GiveRecordDataList[i].GiveId == giveData.GiveId)                return false;        }        m_GiveRecordDataList.Add(giveData);        AddSingleGiveRecordToUI(giveData);        return true;    }    /// <summary>    /// 添加一条赠送记录到界面    /// </summary>    /// <param name="timedate"></param>    /// <param name="playername"></param>    /// <param name="coinNum"></param>    /// <param name="giveType"></param>    /// <returns></returns>    private bool AddSingleGiveRecordToUI(GiveRecordData giveData)    {        if (SingleGiveRecordPrefabObj == null)            return false;        GameObject giveobj = GameMain.instantiate(SingleGiveRecordPrefabObj) as GameObject;        giveobj.transform.SetParent(GiveRecordContentObjTf, false);        giveobj.transform.SetAsFirstSibling();        giveobj.name = giveData.GiveId.ToString();        string datetxt = GameCommon.ConvertLongToDateTime(giveData.GiveDate).ToString("yyyy年MM月dd日HH:mm:ss");        if (giveData.GiveType == 1)            datetxt += "您资助<color=#E2FF2D>" + giveData.GivePlayerName + "</color>金币<color=#FF0000>" + giveData.GiveCoinNum.ToString() + "</color>";        else            datetxt += "<color=#E2FF2D>" + giveData.GivePlayerName + "</color>资助您金币<color=#00FF02>" + giveData.GiveCoinNum.ToString() + "</color>";        giveobj.transform.Find("TextDate").gameObject.GetComponent<Text>().text = datetxt;        //giveobj.transform.FindChild("TextName").gameObject.GetComponent<Text>().text =giveData.GivePlayerName;                //string givetxt = "<color=#FF0000>-"+ giveData.GiveCoinNum.ToString() + "</color>";        //if (giveData.GiveType == 2)        //    givetxt = "<color=#00FF02>+" + giveData.GiveCoinNum.ToString() + "</color>";        //giveobj.transform.FindChild("TextNum").gameObject.GetComponent<Text>().text = givetxt;        XPointEvent.AutoAddListener(giveobj,OnClickSingleGiveRecord, giveData.GiveId);        GameObject deletebtn =  giveobj.transform.Find("ButtonDelete").gameObject;        deletebtn.SetActive(false);        XPointEvent.AutoAddListener(deletebtn,OnClickDeleteSingleGiveRecord, giveData.GiveId);        return true;    }    /// <summary>    /// 刷新界面或清空赠送记录    /// </summary>    /// <param name="isClear"></param>    private void RefreshGiveRecordContentUIObj(bool isClear = false)    {        for (int i = 0; i < GiveRecordContentObjTf.childCount; i++)        {            Object.Destroy(GiveRecordContentObjTf.GetChild(i).gameObject);        }        if(isClear)        {            m_GiveRecordDataList.Clear();        }        if(m_GiveRecordDataList.Count >0 && !isClear)        {            for (int i = 0; i < m_GiveRecordDataList.Count; i++)            {                AddSingleGiveRecordToUI(m_GiveRecordDataList[i]);            }        }        bNeedResetGiveRecordUIFlag = false;    }    /// <summary>    /// 选中单条记录    /// </summary>    /// <param name="eventtype"></param>    /// <param name="parma"></param>    /// <param name="eventData"></param>    private void OnClickSingleGiveRecord(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if(eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            string giveidstr = parma.ToString();            //如果当前已经被选中            if (CurrentSelectSingleRecordObj != null)            {                if (CurrentSelectSingleRecordObj.name.CompareTo(giveidstr) == 0)                    return;            }            GameObject btnobj = GiveRecordContentObjTf.transform.Find(giveidstr).Find("ButtonDelete").gameObject;            btnobj.SetActive(true);            if (CurrentSelectSingleRecordObj != null)                CurrentSelectSingleRecordObj.transform.Find("ButtonDelete").gameObject.SetActive(false);            CurrentSelectSingleRecordObj = GiveRecordContentObjTf.transform.Find(giveidstr).gameObject;        }    }    /// <summary>    /// </summary>    /// <param name="eventtype"></param>    /// <param name="parma"></param>    /// <param name="eventData"></param>    private void OnClickDeleteSingleGiveRecord(EventTriggerType eventtype, object parma, PointerEventData eventData)    {        if (eventtype == EventTriggerType.PointerClick)        {            CustomAudio.GetInstance().PlayCustomAudio(1002);            uint giveId = (uint)parma;            GameObject obj = GiveRecordContentObjTf.transform.Find(giveId.ToString()).gameObject;            GameMain.safeDeleteObj(obj);            for(int i = 0; i<m_GiveRecordDataList.Count;i++)            {                if (m_GiveRecordDataList[i].GiveId == giveId)                {                    m_GiveRecordDataList.RemoveAt(i);                    break;                }                     }            CurrentSelectSingleRecordObj = null;            RequestDeleteGiveRecord(giveId);        }    }    /// <summary>    /// 服务器通知客户端工会赠送数据    /// </summary>    private  bool RecvRoleGiveRecordData(uint _msgType, UMessage _ms)    {        short nBeginSign = _ms.ReadShort();        if (nBeginSign == -2)    //没有数据        {            Debug.Log("This player has not club give data!");        }        else if(nBeginSign == -3)   //添加        {            short nSize = _ms.ReadShort();            GiveRecordData GRData = new GiveRecordData();            GRData.GiveId = _ms.ReadUInt();            GRData.GiveType = _ms.ReadByte();    // 1赠送 2接受            GRData.GivePlayerId = _ms.ReadUInt();            GRData.GiveDate = _ms.ReadLong();            GRData.GiveCoinNum = _ms.ReadLong();            GRData.GivePlayerName = _ms.ReadString();            GRData.Faceid = _ms.ReadInt();            AddSingleGiveRecordDataToList(GRData);                      Debug.Log("Add new GiveRecord:" +                "nSign: " + GRData.GiveId.ToString() + "name:" + GRData.GivePlayerName +                "coin: " + GRData.GiveCoinNum);        }        else        {            short nSize = _ms.ReadShort();            for (int i = 0; i < nSize; i++)            {                GiveRecordData GRData = new GiveRecordData();                GRData.GiveId = _ms.ReadUInt();                GRData.GiveType = _ms.ReadByte();    // 1赠送 2接受                GRData.GivePlayerId = _ms.ReadUInt();                GRData.GiveDate = _ms.ReadLong();                GRData.GiveCoinNum = _ms.ReadLong();                GRData.GivePlayerName = _ms.ReadString();                GRData.Faceid = _ms.ReadInt();                AddSingleGiveRecordDataToList(GRData);                Debug.Log("Old GiveRecord:" +                    "nSign: " + GRData.GiveId.ToString() + "name:" +GRData.GivePlayerName +                    "coin: " + GRData.GiveCoinNum);            }            if (nBeginSign == -1)            {                Debug.Log("Get role club give data over!");            }            else            {                nBeginSign += nSize;                RequestGiveRecordData(nBeginSign);            }        }        return true;    }    /// <summary>    /// 移除工会赠送记录    /// </summary>    public void RequestDeleteGiveRecord(uint nSign)    {        UMessage ApplyMsg = new UMessage((uint)GameCity.EMSG_ENUM.CrazyCityMsg_PLAYERREMOVECLUBGIVEDATA);        ApplyMsg.Add(nSign);        ApplyMsg.Add(GameMain.hall_.GetPlayerId());        NetWorkClient.GetInstance().SendMsg(ApplyMsg);    }    //场景切换后重新填充界面数据标记    public void ResetInitIconFlag()    {        RegisterChangeIconBtnFlag = false;        RegisterChangeNameBtnFlag = false;        bNeedResetGiveRecordUIFlag = true;    }    /// <summary>    /// 切换账号后重新请求数据标记    /// </summary>    public void ChangeAccountResetDateFlag()    {        bHaveRequestGiveRecordData = false;        bNeedResetGiveRecordUIFlag = true;    }    /// <summary>    /// 请求修改昵称    /// </summary>    /// <param name="name">新的昵称名</param>    public void SendChangeNickNameReq(string name)    {        UMessage msgChangeNickName = new UMessage((uint)GameCity.EMSG_ENUM.CrazyCityMsg_CHANGENICKNAME);        MessageChangeNickName mcnn_ = new MessageChangeNickName();        mcnn_.uid = GameMain.hall_.GetPlayerId();        mcnn_.name = name;        mcnn_.faceid = 0;        mcnn_.SetSendData(msgChangeNickName);        NetWorkClient.GetInstance().SendMsg(msgChangeNickName);    }    /// <summary>    /// 请求修改头像    /// </summary>    /// <param name="name">新的昵称名</param>    public void SendChangeIconIDReq(ushort nfaceid)    {        UMessage msgChangeNickName = new UMessage((uint)GameCity.EMSG_ENUM.CrazyCityMsg_CHANGENICKNAME);        MessageChangeNickName mcnn_ = new MessageChangeNickName();        mcnn_.uid = GameMain.hall_.GetPlayerId();        mcnn_.name = "";        mcnn_.faceid = nfaceid;        mcnn_.SetSendData(msgChangeNickName);        NetWorkClient.GetInstance().SendMsg(msgChangeNickName);    }    /// <summary>    /// 修改昵称成功处理    /// </summary>    /// <param name="_msgType"></param>    /// <param name="_ms"></param>    /// <returns></returns>    bool ChangeNickNameSuccess(uint _msgType, UMessage _ms)    {        PlayerData playerdata = GameMain.hall_.GetPlayerData();        byte isSuccess = _ms.ReadByte();        if (isSuccess == 1)  //修改昵称        {            playerdata.SetPlayerName(_ms.ReadString());            playerdata.IsChangeName = true;            Debug.Log("修改昵称成功：" + playerdata.GetPlayerName());        }        else if (isSuccess == 2) //修改头像        {            playerdata.PlayerIconId = _ms.ReadUInt();            Debug.Log("修改头像成功!头像id：" + playerdata.PlayerIconId.ToString());        }        else if (isSuccess == 3) //都修改了        {            playerdata.SetPlayerName (_ms.ReadString());            playerdata.IsChangeName = true;            playerdata.PlayerIconId = _ms.ReadUInt();            Debug.Log("修改昵称成功：" + playerdata.GetPlayerName());            Debug.Log("修改头像成功!头像id：" + playerdata.PlayerIconId.ToString());        }        else if (isSuccess == 4) //昵称修改失败        {            Debug.Log("修改昵称失败");            CCustomDialog.OpenCustomConfirmUI(1301);        }        else if (isSuccess == 5) ////5修改昵称失败但修改头像成功        {            playerdata.PlayerIconId = _ms.ReadUInt();            Debug.Log("修改昵称失败但修改头像成功!头像id：" + playerdata.PlayerIconId.ToString());        }        GameMain.hall_.RefreshPlayerNameIcon();        RefreshShowPlayerNameIcon();        return true;    }    /// <summary>    /// 发送设置验证码消息    /// </summary>    /// <param name="InviteCodestr"></param>    private void SendSetInviteCodeMsg(string InviteCodestr)    {        //UMessage msginvitecode = new UMessage((uint)GameCity.EMSG_ENUM.CCMsg_CM_PLAYERAPPLYBINDINVITE);        //msginvitecode.Add(GameMain.hall_.GetPlayerId());        //msginvitecode.Add(InviteCodestr);        //NetWorkClient.GetInstance().SendMsg(msginvitecode);    }}