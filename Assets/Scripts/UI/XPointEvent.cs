using UnityEngine;using UnityEngine.EventSystems;public class XPointEvent : MonoBehaviour, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler , IDropHandler, IScrollHandler/*, IUpdateSelectedHandler*/, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler{    public delegate void CallBack(EventTriggerType eventtype, object message, PointerEventData eventData);    private object message;    private CallBack funCallBack;    private XButton myButton;    private static XPointEvent AutoGetPointEvent(GameObject obj)    {        XPointEvent trigger = obj.GetComponent<XPointEvent>();        if (trigger == null)        {            trigger = obj.AddComponent<XPointEvent>();        }        return trigger;    }    public static void AutoAddListener(GameObject obj, CallBack callback, object param)    {        XPointEvent trigger = AutoGetPointEvent(obj);        trigger.AddListener(callback, param);    }    void SetSelect()    {        if (myButton != null)        {            Transform part = transform.parent;            XButton[] testBut = part.GetComponentsInChildren<XButton>();            int length = testBut.Length;            for (int i = 0; i < length; i++)            {                XButton mBut = testBut[i];                mBut.SetNormal();            }            if (myButton != null)            {                myButton.SetHighlighted();            }        }    }    public void AddListener(CallBack callback, object param)    {        funCallBack = callback;        message = param;        if (myButton == null)        {            myButton = this.GetComponent<XButton>();        }    }    private void ExcuteCallBack(EventTriggerType type, PointerEventData eventData)    {        if (funCallBack != null)        {            funCallBack(type, message, eventData);        }    }    public virtual void OnPointerEnter(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.PointerEnter, eventData);    }    public virtual void OnPointerExit(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.PointerExit, eventData);    }    public virtual void OnDrag(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.Drag, eventData);    }    public virtual void OnDrop(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.Drop, eventData);    }    public virtual void OnPointerDown(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.PointerDown, eventData);        cachePointDownEventData__ = eventData;        isPointerDown__ = true;    }    public virtual void OnPointerUp(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.PointerUp, eventData);        isPointerDown__ = false;    }    public virtual void OnPointerClick(PointerEventData eventData)    {        SetSelect();        ExcuteCallBack(EventTriggerType.PointerClick, eventData);    }    public virtual void OnSelect(BaseEventData eventData)    {        //ExcuteCallBack(EventTriggerType.Select, eventData);    }    public virtual void OnDeselect(BaseEventData eventData)    {        //ExcuteCallBack(EventTriggerType.Deselect);    }    public virtual void OnScroll(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.Scroll, eventData);    }    public virtual void OnMove(AxisEventData eventData)    {        //ExcuteCallBack(EventTriggerType.Move);    }    //public virtual void OnUpdateSelected(BaseEventData eventData)    //{    //    ExcuteCallBack(EventTriggerType.UpdateSelected);    //}    public virtual void OnInitializePotentialDrag(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.InitializePotentialDrag, eventData);    }    public virtual void OnBeginDrag(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.BeginDrag, eventData);    }   /* public virtual void OnEndDrag(PointerEventData eventData)    {        ExcuteCallBack(EventTriggerType.EndDrag, eventData);    }*/    public virtual void OnSubmit(BaseEventData eventData)    {        // ExcuteCallBack(EventTriggerType.Submit, eventData);    }    public virtual void OnCancel(BaseEventData eventData)    {        //ExcuteCallBack(EventTriggerType.Cancel);    }    public virtual void OnPress(GameObject sender)    {        if (cachePointDownEventData__ == null)        {            Debug.LogError("cacheEventIsNULL!");            return;        }       // ExcuteCallBack(EventTriggerType.Press, cachePointDownEventData__);    }    //以下处理onpress    PointerEventData cachePointDownEventData__ = null;//press下的eventdata是pointdown的    bool isPointerDown__ = false;    int isPressCnt__ = 10;    void Update()    {        if (isPointerDown__)        {            isPressCnt__--;            if (isPressCnt__ < 0)            {                OnPress(gameObject);            }        }        if (!isPointerDown__)        {            isPressCnt__ = 10;        }    }}